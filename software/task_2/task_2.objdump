
task_2.elf:     file format elf32-littlenios2
task_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001984 memsz 0x00001984 flags r-x
    LOAD off    0x000029a4 vaddr 0x000099a4 paddr 0x00009c84 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00002f64 vaddr 0x00009f64 paddr 0x00009f64 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000017c4  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00009978  00009978  00002978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  000099a4  00009c84  000029a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00009f64  00009f64  00002f64  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000478  00000000  00000000  00002cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000665  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006a41  00000000  00000000  0000378d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001aa2  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000508c  00000000  00000000  0000bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000704  00000000  00000000  00010cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000097d  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009be  00000000  00000000  00011d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001273c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00013f73  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00013f76  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013f79  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013f7a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013f7b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00013f7f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00013f83  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00013f87  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00013f90  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00013f99  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00013fa2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000009  00000000  00000000  00013fb4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  00013fbd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00034e1f  00000000  00000000  00018f6b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
00009978 l    d  .rodata	00000000 .rodata
000099a4 l    d  .rwdata	00000000 .rwdata
00009f64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00008290 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000099a4 l     O .rwdata	0000002c jtag_uart
000083d4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00008664 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00008864 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000088e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000089c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008d1c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00008e6c l     F .text	000000f8 alt_file_locked
000090f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000971c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
00009b78 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009914 l     F .text	00000040 alt_sim_halt
000082fc g     F .text	0000005c alt_main
00009f80 g     O .bss	00000100 alt_irq
00009c84 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009f7c g     O .bss	00000004 errno
00009f68 g     O .bss	00000004 alt_argv
00011c58 g       *ABS*	00000000 _gp
000099f8 g     O .rwdata	00000180 alt_fd_list
0000938c g     F .text	00000094 alt_find_dev
00008df4 g     F .text	00000078 alt_io_redirect
000084bc g     F .text	00000104 altera_avalon_jtag_uart_read
00009610 g     F .text	00000090 alt_icache_flush
00009c68 g     O .rwdata	00000004 alt_max_fd
00009c80 g     O .rwdata	00000004 _global_impure_ptr
0000a080 g       *ABS*	00000000 __bss_end
00008c24 g     F .text	000000f8 alt_iic_isr_register
00009260 g     F .text	0000010c alt_tick
00008bdc g     F .text	00000048 alt_ic_irq_enabled
000091c8 g     F .text	00000098 alt_alarm_stop
00009f70 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000c8 alt_irq_handler
000099d0 g     O .rwdata	00000028 alt_dev_null
000088c4 g     F .text	0000001c alt_dcache_flush_all
00009c84 g       *ABS*	00000000 __ram_rwdata_end
00009c60 g     O .rwdata	00000008 alt_dev_list
000099a4 g       *ABS*	00000000 __ram_rodata_end
0000a080 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000086d4 g     F .text	00000090 alt_avalon_timer_sc_init
000085c0 g     F .text	000000a4 altera_avalon_jtag_uart_write
00009720 g     F .text	000001bc __call_exitprocs
000081b4 g     F .text	0000003c _start
00009f74 g     O .bss	00000004 _alt_tick_rate
00009f78 g     O .bss	00000004 _alt_nticks
0000838c g     F .text	00000048 alt_sys_init
000098dc g     F .text	00000038 __mulsi3
000099a4 g       *ABS*	00000000 __ram_rwdata_start
00009978 g       *ABS*	00000000 __ram_rodata_start
0000840c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009540 g     F .text	000000d0 alt_get_fd
000096c0 g     F .text	0000003c memcmp
0000a080 g       *ABS*	00000000 __alt_stack_base
00009420 g     F .text	00000120 alt_find_file
0000890c g     F .text	000000b4 alt_dev_llist_insert
00009f64 g       *ABS*	00000000 __bss_start
000081f0 g     F .text	00000020 main
00009f6c g     O .bss	00000004 alt_envp
00008464 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00009c6c g     O .rwdata	00000004 alt_errno
00009978 g       *ABS*	00000000 __flash_rodata_start
00008358 g     F .text	00000034 alt_irq_init
00009150 g     F .text	00000078 alt_release_fd
00009c7c g     O .rwdata	00000004 _impure_ptr
00009f64 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00009c58 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008a50 g     F .text	00000050 alt_ic_isr_register
00009c84 g       *ABS*	00000000 _edata
0000a080 g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008b3c g     F .text	000000a0 alt_ic_irq_disable
0000936c g     F .text	00000020 altera_nios2_qsys_irq_init
000096a0 g     F .text	00000020 exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009954 g     F .text	00000020 _exit
000096fc g     F .text	00000020 strlen
00008f64 g     F .text	0000018c open
00008a20 g     F .text	00000030 alt_icache_flush_all
00009c70 g     O .rwdata	00000004 alt_priority_mask
00008aa0 g     F .text	0000009c alt_ic_irq_enable
00009c74 g     O .rwdata	00000008 alt_alarm_list
00008764 g     F .text	00000100 close
00008210 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606d14 	ori	at,at,33204
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18e7e004 	addi	r3,r3,-24704
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18e7e004 	addi	r3,r3,-24704
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d6871614 	ori	gp,gp,7256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10a7d914 	ori	r2,r2,40804

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18e82014 	ori	r3,r3,41088

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	00082100 	call	8210 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	00082fc0 	call	82fc <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <main>:
	return y;
}
*/

int main()
{
    81f0:	deffff04 	addi	sp,sp,-4
    81f4:	df000015 	stw	fp,0(sp)
    81f8:	d839883a 	mov	fp,sp

  gcvt(((int) y), 10, buf);
  alt_putstr(" Result (divided by 1014) = "); alt_putstr(buf);

  */
  return 0;
    81fc:	0005883a 	mov	r2,zero
}
    8200:	e037883a 	mov	sp,fp
    8204:	df000017 	ldw	fp,0(sp)
    8208:	dec00104 	addi	sp,sp,4
    820c:	f800283a 	ret

00008210 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8210:	defffe04 	addi	sp,sp,-8
    8214:	dfc00115 	stw	ra,4(sp)
    8218:	df000015 	stw	fp,0(sp)
    821c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8220:	01000074 	movhi	r4,1
    8224:	21272104 	addi	r4,r4,-25468
    8228:	01400074 	movhi	r5,1
    822c:	29666904 	addi	r5,r5,-26204
    8230:	01800074 	movhi	r6,1
    8234:	31a72104 	addi	r6,r6,-25468
    8238:	00082900 	call	8290 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    823c:	01000074 	movhi	r4,1
    8240:	21200804 	addi	r4,r4,-32736
    8244:	01400074 	movhi	r5,1
    8248:	29600804 	addi	r5,r5,-32736
    824c:	01800074 	movhi	r6,1
    8250:	31a06d04 	addi	r6,r6,-32332
    8254:	00082900 	call	8290 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8258:	01000074 	movhi	r4,1
    825c:	21265e04 	addi	r4,r4,-26248
    8260:	01400074 	movhi	r5,1
    8264:	29665e04 	addi	r5,r5,-26248
    8268:	01800074 	movhi	r6,1
    826c:	31a66904 	addi	r6,r6,-26204
    8270:	00082900 	call	8290 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8274:	00088c40 	call	88c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8278:	0008a200 	call	8a20 <alt_icache_flush_all>
}
    827c:	e037883a 	mov	sp,fp
    8280:	dfc00117 	ldw	ra,4(sp)
    8284:	df000017 	ldw	fp,0(sp)
    8288:	dec00204 	addi	sp,sp,8
    828c:	f800283a 	ret

00008290 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8290:	defffc04 	addi	sp,sp,-16
    8294:	df000315 	stw	fp,12(sp)
    8298:	df000304 	addi	fp,sp,12
    829c:	e13ffd15 	stw	r4,-12(fp)
    82a0:	e17ffe15 	stw	r5,-8(fp)
    82a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    82a8:	e0fffe17 	ldw	r3,-8(fp)
    82ac:	e0bffd17 	ldw	r2,-12(fp)
    82b0:	18800e26 	beq	r3,r2,82ec <alt_load_section+0x5c>
  {
    while( to != end )
    82b4:	00000a06 	br	82e0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    82b8:	e0bffd17 	ldw	r2,-12(fp)
    82bc:	10c00017 	ldw	r3,0(r2)
    82c0:	e0bffe17 	ldw	r2,-8(fp)
    82c4:	10c00015 	stw	r3,0(r2)
    82c8:	e0bffe17 	ldw	r2,-8(fp)
    82cc:	10800104 	addi	r2,r2,4
    82d0:	e0bffe15 	stw	r2,-8(fp)
    82d4:	e0bffd17 	ldw	r2,-12(fp)
    82d8:	10800104 	addi	r2,r2,4
    82dc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82e0:	e0fffe17 	ldw	r3,-8(fp)
    82e4:	e0bfff17 	ldw	r2,-4(fp)
    82e8:	18bff31e 	bne	r3,r2,82b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    82ec:	e037883a 	mov	sp,fp
    82f0:	df000017 	ldw	fp,0(sp)
    82f4:	dec00104 	addi	sp,sp,4
    82f8:	f800283a 	ret

000082fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    82fc:	defffd04 	addi	sp,sp,-12
    8300:	dfc00215 	stw	ra,8(sp)
    8304:	df000115 	stw	fp,4(sp)
    8308:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    830c:	0009883a 	mov	r4,zero
    8310:	00083580 	call	8358 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8314:	000838c0 	call	838c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8318:	01000074 	movhi	r4,1
    831c:	21265e04 	addi	r4,r4,-26248
    8320:	01400074 	movhi	r5,1
    8324:	29665e04 	addi	r5,r5,-26248
    8328:	01800074 	movhi	r6,1
    832c:	31a65e04 	addi	r6,r6,-26248
    8330:	0008df40 	call	8df4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8334:	d120c317 	ldw	r4,-31988(gp)
    8338:	d160c417 	ldw	r5,-31984(gp)
    833c:	d1a0c517 	ldw	r6,-31980(gp)
    8340:	00081f00 	call	81f0 <main>
    8344:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8348:	01000044 	movi	r4,1
    834c:	00087640 	call	8764 <close>
  exit (result);
    8350:	e13fff17 	ldw	r4,-4(fp)
    8354:	00096a00 	call	96a0 <exit>

00008358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8358:	defffd04 	addi	sp,sp,-12
    835c:	dfc00215 	stw	ra,8(sp)
    8360:	df000115 	stw	fp,4(sp)
    8364:	df000104 	addi	fp,sp,4
    8368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    836c:	000936c0 	call	936c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8370:	00800044 	movi	r2,1
    8374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8378:	e037883a 	mov	sp,fp
    837c:	dfc00117 	ldw	ra,4(sp)
    8380:	df000017 	ldw	fp,0(sp)
    8384:	dec00204 	addi	sp,sp,8
    8388:	f800283a 	ret

0000838c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    838c:	defffe04 	addi	sp,sp,-8
    8390:	dfc00115 	stw	ra,4(sp)
    8394:	df000015 	stw	fp,0(sp)
    8398:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    839c:	01000074 	movhi	r4,1
    83a0:	21040004 	addi	r4,r4,4096
    83a4:	000b883a 	mov	r5,zero
    83a8:	01800044 	movi	r6,1
    83ac:	01c0fa04 	movi	r7,1000
    83b0:	00086d40 	call	86d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    83b4:	01000074 	movhi	r4,1
    83b8:	21266904 	addi	r4,r4,-26204
    83bc:	00083d40 	call	83d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    83c0:	e037883a 	mov	sp,fp
    83c4:	dfc00117 	ldw	ra,4(sp)
    83c8:	df000017 	ldw	fp,0(sp)
    83cc:	dec00204 	addi	sp,sp,8
    83d0:	f800283a 	ret

000083d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    83d4:	defffd04 	addi	sp,sp,-12
    83d8:	dfc00215 	stw	ra,8(sp)
    83dc:	df000115 	stw	fp,4(sp)
    83e0:	df000104 	addi	fp,sp,4
    83e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    83e8:	e13fff17 	ldw	r4,-4(fp)
    83ec:	01400074 	movhi	r5,1
    83f0:	29671804 	addi	r5,r5,-25504
    83f4:	000890c0 	call	890c <alt_dev_llist_insert>
}
    83f8:	e037883a 	mov	sp,fp
    83fc:	dfc00117 	ldw	ra,4(sp)
    8400:	df000017 	ldw	fp,0(sp)
    8404:	dec00204 	addi	sp,sp,8
    8408:	f800283a 	ret

0000840c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    840c:	defffa04 	addi	sp,sp,-24
    8410:	dfc00515 	stw	ra,20(sp)
    8414:	df000415 	stw	fp,16(sp)
    8418:	df000404 	addi	fp,sp,16
    841c:	e13ffd15 	stw	r4,-12(fp)
    8420:	e17ffe15 	stw	r5,-8(fp)
    8424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	10800017 	ldw	r2,0(r2)
    8430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8434:	e0bffc17 	ldw	r2,-16(fp)
    8438:	11000a04 	addi	r4,r2,40
    843c:	e0bffd17 	ldw	r2,-12(fp)
    8440:	11c00217 	ldw	r7,8(r2)
    8444:	e17ffe17 	ldw	r5,-8(fp)
    8448:	e1bfff17 	ldw	r6,-4(fp)
    844c:	00084bc0 	call	84bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8450:	e037883a 	mov	sp,fp
    8454:	dfc00117 	ldw	ra,4(sp)
    8458:	df000017 	ldw	fp,0(sp)
    845c:	dec00204 	addi	sp,sp,8
    8460:	f800283a 	ret

00008464 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8464:	defffa04 	addi	sp,sp,-24
    8468:	dfc00515 	stw	ra,20(sp)
    846c:	df000415 	stw	fp,16(sp)
    8470:	df000404 	addi	fp,sp,16
    8474:	e13ffd15 	stw	r4,-12(fp)
    8478:	e17ffe15 	stw	r5,-8(fp)
    847c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8480:	e0bffd17 	ldw	r2,-12(fp)
    8484:	10800017 	ldw	r2,0(r2)
    8488:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    848c:	e0bffc17 	ldw	r2,-16(fp)
    8490:	11000a04 	addi	r4,r2,40
    8494:	e0bffd17 	ldw	r2,-12(fp)
    8498:	11c00217 	ldw	r7,8(r2)
    849c:	e17ffe17 	ldw	r5,-8(fp)
    84a0:	e1bfff17 	ldw	r6,-4(fp)
    84a4:	00085c00 	call	85c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    84a8:	e037883a 	mov	sp,fp
    84ac:	dfc00117 	ldw	ra,4(sp)
    84b0:	df000017 	ldw	fp,0(sp)
    84b4:	dec00204 	addi	sp,sp,8
    84b8:	f800283a 	ret

000084bc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    84bc:	defff604 	addi	sp,sp,-40
    84c0:	df000915 	stw	fp,36(sp)
    84c4:	df000904 	addi	fp,sp,36
    84c8:	e13ffb15 	stw	r4,-20(fp)
    84cc:	e17ffc15 	stw	r5,-16(fp)
    84d0:	e1bffd15 	stw	r6,-12(fp)
    84d4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    84d8:	e0bffb17 	ldw	r2,-20(fp)
    84dc:	10800017 	ldw	r2,0(r2)
    84e0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    84e4:	e0bffc17 	ldw	r2,-16(fp)
    84e8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    84ec:	e0bffd17 	ldw	r2,-12(fp)
    84f0:	1007883a 	mov	r3,r2
    84f4:	e0bffc17 	ldw	r2,-16(fp)
    84f8:	10c5883a 	add	r2,r2,r3
    84fc:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    8500:	00001606 	br	855c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8504:	e0bffa17 	ldw	r2,-24(fp)
    8508:	10800037 	ldwio	r2,0(r2)
    850c:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8510:	e0bff717 	ldw	r2,-36(fp)
    8514:	10a0000c 	andi	r2,r2,32768
    8518:	1005003a 	cmpeq	r2,r2,zero
    851c:	1000081e 	bne	r2,zero,8540 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8520:	e0bff717 	ldw	r2,-36(fp)
    8524:	1007883a 	mov	r3,r2
    8528:	e0bff917 	ldw	r2,-28(fp)
    852c:	10c00005 	stb	r3,0(r2)
    8530:	e0bff917 	ldw	r2,-28(fp)
    8534:	10800044 	addi	r2,r2,1
    8538:	e0bff915 	stw	r2,-28(fp)
    853c:	00000706 	br	855c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    8540:	e0fff917 	ldw	r3,-28(fp)
    8544:	e0bffc17 	ldw	r2,-16(fp)
    8548:	1880071e 	bne	r3,r2,8568 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    854c:	e0bffe17 	ldw	r2,-8(fp)
    8550:	1090000c 	andi	r2,r2,16384
    8554:	1004c03a 	cmpne	r2,r2,zero
    8558:	1000031e 	bne	r2,zero,8568 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    855c:	e0fff917 	ldw	r3,-28(fp)
    8560:	e0bff817 	ldw	r2,-32(fp)
    8564:	18bfe736 	bltu	r3,r2,8504 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    8568:	e0fff917 	ldw	r3,-28(fp)
    856c:	e0bffc17 	ldw	r2,-16(fp)
    8570:	18800526 	beq	r3,r2,8588 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8574:	e0fff917 	ldw	r3,-28(fp)
    8578:	e0bffc17 	ldw	r2,-16(fp)
    857c:	1887c83a 	sub	r3,r3,r2
    8580:	e0ffff15 	stw	r3,-4(fp)
    8584:	00000906 	br	85ac <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    8588:	e0bffe17 	ldw	r2,-8(fp)
    858c:	1090000c 	andi	r2,r2,16384
    8590:	1005003a 	cmpeq	r2,r2,zero
    8594:	1000031e 	bne	r2,zero,85a4 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    8598:	00bffd44 	movi	r2,-11
    859c:	e0bfff15 	stw	r2,-4(fp)
    85a0:	00000206 	br	85ac <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    85a4:	00bffec4 	movi	r2,-5
    85a8:	e0bfff15 	stw	r2,-4(fp)
    85ac:	e0bfff17 	ldw	r2,-4(fp)
}
    85b0:	e037883a 	mov	sp,fp
    85b4:	df000017 	ldw	fp,0(sp)
    85b8:	dec00104 	addi	sp,sp,4
    85bc:	f800283a 	ret

000085c0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    85c0:	defff904 	addi	sp,sp,-28
    85c4:	df000615 	stw	fp,24(sp)
    85c8:	df000604 	addi	fp,sp,24
    85cc:	e13ffc15 	stw	r4,-16(fp)
    85d0:	e17ffd15 	stw	r5,-12(fp)
    85d4:	e1bffe15 	stw	r6,-8(fp)
    85d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    85dc:	e0bffc17 	ldw	r2,-16(fp)
    85e0:	10800017 	ldw	r2,0(r2)
    85e4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    85e8:	e0bffe17 	ldw	r2,-8(fp)
    85ec:	1007883a 	mov	r3,r2
    85f0:	e0bffd17 	ldw	r2,-12(fp)
    85f4:	10c5883a 	add	r2,r2,r3
    85f8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    85fc:	00001106 	br	8644 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8600:	e0bffb17 	ldw	r2,-20(fp)
    8604:	10800104 	addi	r2,r2,4
    8608:	10800037 	ldwio	r2,0(r2)
    860c:	10bfffec 	andhi	r2,r2,65535
    8610:	1005003a 	cmpeq	r2,r2,zero
    8614:	10000b1e 	bne	r2,zero,8644 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8618:	e13ffb17 	ldw	r4,-20(fp)
    861c:	e0bffd17 	ldw	r2,-12(fp)
    8620:	10800003 	ldbu	r2,0(r2)
    8624:	10c03fcc 	andi	r3,r2,255
    8628:	18c0201c 	xori	r3,r3,128
    862c:	18ffe004 	addi	r3,r3,-128
    8630:	e0bffd17 	ldw	r2,-12(fp)
    8634:	10800044 	addi	r2,r2,1
    8638:	e0bffd15 	stw	r2,-12(fp)
    863c:	2005883a 	mov	r2,r4
    8640:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8644:	e0fffd17 	ldw	r3,-12(fp)
    8648:	e0bffa17 	ldw	r2,-24(fp)
    864c:	18bfec36 	bltu	r3,r2,8600 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8650:	e0bffe17 	ldw	r2,-8(fp)
}
    8654:	e037883a 	mov	sp,fp
    8658:	df000017 	ldw	fp,0(sp)
    865c:	dec00104 	addi	sp,sp,4
    8660:	f800283a 	ret

00008664 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    8664:	defffa04 	addi	sp,sp,-24
    8668:	dfc00515 	stw	ra,20(sp)
    866c:	df000415 	stw	fp,16(sp)
    8670:	df000404 	addi	fp,sp,16
    8674:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    8678:	e0bfff17 	ldw	r2,-4(fp)
    867c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    8680:	e0bfff17 	ldw	r2,-4(fp)
    8684:	10800104 	addi	r2,r2,4
    8688:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    868c:	0005303a 	rdctl	r2,status
    8690:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8694:	e0fffd17 	ldw	r3,-12(fp)
    8698:	00bfff84 	movi	r2,-2
    869c:	1884703a 	and	r2,r3,r2
    86a0:	1001703a 	wrctl	status,r2
  
  return context;
    86a4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    86a8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    86ac:	00092600 	call	9260 <alt_tick>
    86b0:	e0bffe17 	ldw	r2,-8(fp)
    86b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    86b8:	e0bffc17 	ldw	r2,-16(fp)
    86bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    86c0:	e037883a 	mov	sp,fp
    86c4:	dfc00117 	ldw	ra,4(sp)
    86c8:	df000017 	ldw	fp,0(sp)
    86cc:	dec00204 	addi	sp,sp,8
    86d0:	f800283a 	ret

000086d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    86d4:	defff804 	addi	sp,sp,-32
    86d8:	dfc00715 	stw	ra,28(sp)
    86dc:	df000615 	stw	fp,24(sp)
    86e0:	df000604 	addi	fp,sp,24
    86e4:	e13ffc15 	stw	r4,-16(fp)
    86e8:	e17ffd15 	stw	r5,-12(fp)
    86ec:	e1bffe15 	stw	r6,-8(fp)
    86f0:	e1ffff15 	stw	r7,-4(fp)
    86f4:	e0bfff17 	ldw	r2,-4(fp)
    86f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    86fc:	00800074 	movhi	r2,1
    8700:	10a7dd04 	addi	r2,r2,-24716
    8704:	10800017 	ldw	r2,0(r2)
    8708:	1004c03a 	cmpne	r2,r2,zero
    870c:	1000041e 	bne	r2,zero,8720 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    8710:	00c00074 	movhi	r3,1
    8714:	18e7dd04 	addi	r3,r3,-24716
    8718:	e0bffb17 	ldw	r2,-20(fp)
    871c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    8720:	e0bffc17 	ldw	r2,-16(fp)
    8724:	10800104 	addi	r2,r2,4
    8728:	1007883a 	mov	r3,r2
    872c:	008001c4 	movi	r2,7
    8730:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    8734:	d8000015 	stw	zero,0(sp)
    8738:	e13ffd17 	ldw	r4,-12(fp)
    873c:	e17ffe17 	ldw	r5,-8(fp)
    8740:	01800074 	movhi	r6,1
    8744:	31a19904 	addi	r6,r6,-31132
    8748:	e1fffc17 	ldw	r7,-16(fp)
    874c:	0008a500 	call	8a50 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    8750:	e037883a 	mov	sp,fp
    8754:	dfc00117 	ldw	ra,4(sp)
    8758:	df000017 	ldw	fp,0(sp)
    875c:	dec00204 	addi	sp,sp,8
    8760:	f800283a 	ret

00008764 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8764:	defff804 	addi	sp,sp,-32
    8768:	dfc00715 	stw	ra,28(sp)
    876c:	df000615 	stw	fp,24(sp)
    8770:	df000604 	addi	fp,sp,24
    8774:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8778:	e0bffc17 	ldw	r2,-16(fp)
    877c:	1004803a 	cmplt	r2,r2,zero
    8780:	1000091e 	bne	r2,zero,87a8 <close+0x44>
    8784:	e13ffc17 	ldw	r4,-16(fp)
    8788:	01400304 	movi	r5,12
    878c:	00098dc0 	call	98dc <__mulsi3>
    8790:	1007883a 	mov	r3,r2
    8794:	00800074 	movhi	r2,1
    8798:	10a67e04 	addi	r2,r2,-26120
    879c:	1887883a 	add	r3,r3,r2
    87a0:	e0ffff15 	stw	r3,-4(fp)
    87a4:	00000106 	br	87ac <close+0x48>
    87a8:	e03fff15 	stw	zero,-4(fp)
    87ac:	e0bfff17 	ldw	r2,-4(fp)
    87b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    87b4:	e0bffb17 	ldw	r2,-20(fp)
    87b8:	1005003a 	cmpeq	r2,r2,zero
    87bc:	10001d1e 	bne	r2,zero,8834 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    87c0:	e0bffb17 	ldw	r2,-20(fp)
    87c4:	10800017 	ldw	r2,0(r2)
    87c8:	10800417 	ldw	r2,16(r2)
    87cc:	1005003a 	cmpeq	r2,r2,zero
    87d0:	1000071e 	bne	r2,zero,87f0 <close+0x8c>
    87d4:	e0bffb17 	ldw	r2,-20(fp)
    87d8:	10800017 	ldw	r2,0(r2)
    87dc:	10800417 	ldw	r2,16(r2)
    87e0:	e13ffb17 	ldw	r4,-20(fp)
    87e4:	103ee83a 	callr	r2
    87e8:	e0bffe15 	stw	r2,-8(fp)
    87ec:	00000106 	br	87f4 <close+0x90>
    87f0:	e03ffe15 	stw	zero,-8(fp)
    87f4:	e0bffe17 	ldw	r2,-8(fp)
    87f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    87fc:	e13ffc17 	ldw	r4,-16(fp)
    8800:	00091500 	call	9150 <alt_release_fd>
    if (rval < 0)
    8804:	e0bffa17 	ldw	r2,-24(fp)
    8808:	1004403a 	cmpge	r2,r2,zero
    880c:	1000071e 	bne	r2,zero,882c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    8810:	00088640 	call	8864 <alt_get_errno>
    8814:	e0fffa17 	ldw	r3,-24(fp)
    8818:	00c7c83a 	sub	r3,zero,r3
    881c:	10c00015 	stw	r3,0(r2)
      return -1;
    8820:	00bfffc4 	movi	r2,-1
    8824:	e0bffd15 	stw	r2,-12(fp)
    8828:	00000806 	br	884c <close+0xe8>
    }
    return 0;
    882c:	e03ffd15 	stw	zero,-12(fp)
    8830:	00000606 	br	884c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8834:	00088640 	call	8864 <alt_get_errno>
    8838:	1007883a 	mov	r3,r2
    883c:	00801444 	movi	r2,81
    8840:	18800015 	stw	r2,0(r3)
    return -1;
    8844:	00bfffc4 	movi	r2,-1
    8848:	e0bffd15 	stw	r2,-12(fp)
    884c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    8850:	e037883a 	mov	sp,fp
    8854:	dfc00117 	ldw	ra,4(sp)
    8858:	df000017 	ldw	fp,0(sp)
    885c:	dec00204 	addi	sp,sp,8
    8860:	f800283a 	ret

00008864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8864:	defffd04 	addi	sp,sp,-12
    8868:	dfc00215 	stw	ra,8(sp)
    886c:	df000115 	stw	fp,4(sp)
    8870:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8874:	00800074 	movhi	r2,1
    8878:	10a71b04 	addi	r2,r2,-25492
    887c:	10800017 	ldw	r2,0(r2)
    8880:	1005003a 	cmpeq	r2,r2,zero
    8884:	1000061e 	bne	r2,zero,88a0 <alt_get_errno+0x3c>
    8888:	00800074 	movhi	r2,1
    888c:	10a71b04 	addi	r2,r2,-25492
    8890:	10800017 	ldw	r2,0(r2)
    8894:	103ee83a 	callr	r2
    8898:	e0bfff15 	stw	r2,-4(fp)
    889c:	00000306 	br	88ac <alt_get_errno+0x48>
    88a0:	00800074 	movhi	r2,1
    88a4:	10a7df04 	addi	r2,r2,-24708
    88a8:	e0bfff15 	stw	r2,-4(fp)
    88ac:	e0bfff17 	ldw	r2,-4(fp)
}
    88b0:	e037883a 	mov	sp,fp
    88b4:	dfc00117 	ldw	ra,4(sp)
    88b8:	df000017 	ldw	fp,0(sp)
    88bc:	dec00204 	addi	sp,sp,8
    88c0:	f800283a 	ret

000088c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    88c4:	deffff04 	addi	sp,sp,-4
    88c8:	df000015 	stw	fp,0(sp)
    88cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    88d0:	e037883a 	mov	sp,fp
    88d4:	df000017 	ldw	fp,0(sp)
    88d8:	dec00104 	addi	sp,sp,4
    88dc:	f800283a 	ret

000088e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    88e0:	defffc04 	addi	sp,sp,-16
    88e4:	df000315 	stw	fp,12(sp)
    88e8:	df000304 	addi	fp,sp,12
    88ec:	e13ffd15 	stw	r4,-12(fp)
    88f0:	e17ffe15 	stw	r5,-8(fp)
    88f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    88f8:	e0bfff17 	ldw	r2,-4(fp)
}
    88fc:	e037883a 	mov	sp,fp
    8900:	df000017 	ldw	fp,0(sp)
    8904:	dec00104 	addi	sp,sp,4
    8908:	f800283a 	ret

0000890c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    890c:	defff904 	addi	sp,sp,-28
    8910:	dfc00615 	stw	ra,24(sp)
    8914:	df000515 	stw	fp,20(sp)
    8918:	df000504 	addi	fp,sp,20
    891c:	e13ffd15 	stw	r4,-12(fp)
    8920:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8924:	e0bffd17 	ldw	r2,-12(fp)
    8928:	1005003a 	cmpeq	r2,r2,zero
    892c:	1000041e 	bne	r2,zero,8940 <alt_dev_llist_insert+0x34>
    8930:	e0bffd17 	ldw	r2,-12(fp)
    8934:	10800217 	ldw	r2,8(r2)
    8938:	1004c03a 	cmpne	r2,r2,zero
    893c:	1000071e 	bne	r2,zero,895c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    8940:	00089c00 	call	89c0 <alt_get_errno>
    8944:	1007883a 	mov	r3,r2
    8948:	00800584 	movi	r2,22
    894c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8950:	00bffa84 	movi	r2,-22
    8954:	e0bfff15 	stw	r2,-4(fp)
    8958:	00001306 	br	89a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    895c:	e0fffd17 	ldw	r3,-12(fp)
    8960:	e0bffe17 	ldw	r2,-8(fp)
    8964:	e0bffb15 	stw	r2,-20(fp)
    8968:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    896c:	e0fffc17 	ldw	r3,-16(fp)
    8970:	e0bffb17 	ldw	r2,-20(fp)
    8974:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    8978:	e0bffb17 	ldw	r2,-20(fp)
    897c:	10c00017 	ldw	r3,0(r2)
    8980:	e0bffc17 	ldw	r2,-16(fp)
    8984:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8988:	e0bffb17 	ldw	r2,-20(fp)
    898c:	10c00017 	ldw	r3,0(r2)
    8990:	e0bffc17 	ldw	r2,-16(fp)
    8994:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    8998:	e0fffb17 	ldw	r3,-20(fp)
    899c:	e0bffc17 	ldw	r2,-16(fp)
    89a0:	18800015 	stw	r2,0(r3)

  return 0;  
    89a4:	e03fff15 	stw	zero,-4(fp)
    89a8:	e0bfff17 	ldw	r2,-4(fp)
}
    89ac:	e037883a 	mov	sp,fp
    89b0:	dfc00117 	ldw	ra,4(sp)
    89b4:	df000017 	ldw	fp,0(sp)
    89b8:	dec00204 	addi	sp,sp,8
    89bc:	f800283a 	ret

000089c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    89c0:	defffd04 	addi	sp,sp,-12
    89c4:	dfc00215 	stw	ra,8(sp)
    89c8:	df000115 	stw	fp,4(sp)
    89cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    89d0:	00800074 	movhi	r2,1
    89d4:	10a71b04 	addi	r2,r2,-25492
    89d8:	10800017 	ldw	r2,0(r2)
    89dc:	1005003a 	cmpeq	r2,r2,zero
    89e0:	1000061e 	bne	r2,zero,89fc <alt_get_errno+0x3c>
    89e4:	00800074 	movhi	r2,1
    89e8:	10a71b04 	addi	r2,r2,-25492
    89ec:	10800017 	ldw	r2,0(r2)
    89f0:	103ee83a 	callr	r2
    89f4:	e0bfff15 	stw	r2,-4(fp)
    89f8:	00000306 	br	8a08 <alt_get_errno+0x48>
    89fc:	00800074 	movhi	r2,1
    8a00:	10a7df04 	addi	r2,r2,-24708
    8a04:	e0bfff15 	stw	r2,-4(fp)
    8a08:	e0bfff17 	ldw	r2,-4(fp)
}
    8a0c:	e037883a 	mov	sp,fp
    8a10:	dfc00117 	ldw	ra,4(sp)
    8a14:	df000017 	ldw	fp,0(sp)
    8a18:	dec00204 	addi	sp,sp,8
    8a1c:	f800283a 	ret

00008a20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8a20:	defffe04 	addi	sp,sp,-8
    8a24:	dfc00115 	stw	ra,4(sp)
    8a28:	df000015 	stw	fp,0(sp)
    8a2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8a30:	0009883a 	mov	r4,zero
    8a34:	01420004 	movi	r5,2048
    8a38:	00096100 	call	9610 <alt_icache_flush>
#endif
}
    8a3c:	e037883a 	mov	sp,fp
    8a40:	dfc00117 	ldw	ra,4(sp)
    8a44:	df000017 	ldw	fp,0(sp)
    8a48:	dec00204 	addi	sp,sp,8
    8a4c:	f800283a 	ret

00008a50 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8a50:	defff904 	addi	sp,sp,-28
    8a54:	dfc00615 	stw	ra,24(sp)
    8a58:	df000515 	stw	fp,20(sp)
    8a5c:	df000504 	addi	fp,sp,20
    8a60:	e13ffc15 	stw	r4,-16(fp)
    8a64:	e17ffd15 	stw	r5,-12(fp)
    8a68:	e1bffe15 	stw	r6,-8(fp)
    8a6c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8a70:	e0800217 	ldw	r2,8(fp)
    8a74:	d8800015 	stw	r2,0(sp)
    8a78:	e13ffc17 	ldw	r4,-16(fp)
    8a7c:	e17ffd17 	ldw	r5,-12(fp)
    8a80:	e1bffe17 	ldw	r6,-8(fp)
    8a84:	e1ffff17 	ldw	r7,-4(fp)
    8a88:	0008c240 	call	8c24 <alt_iic_isr_register>
}  
    8a8c:	e037883a 	mov	sp,fp
    8a90:	dfc00117 	ldw	ra,4(sp)
    8a94:	df000017 	ldw	fp,0(sp)
    8a98:	dec00204 	addi	sp,sp,8
    8a9c:	f800283a 	ret

00008aa0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8aa0:	defff904 	addi	sp,sp,-28
    8aa4:	df000615 	stw	fp,24(sp)
    8aa8:	df000604 	addi	fp,sp,24
    8aac:	e13ffe15 	stw	r4,-8(fp)
    8ab0:	e17fff15 	stw	r5,-4(fp)
    8ab4:	e0bfff17 	ldw	r2,-4(fp)
    8ab8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8abc:	0005303a 	rdctl	r2,status
    8ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ac4:	e0fffb17 	ldw	r3,-20(fp)
    8ac8:	00bfff84 	movi	r2,-2
    8acc:	1884703a 	and	r2,r3,r2
    8ad0:	1001703a 	wrctl	status,r2
  
  return context;
    8ad4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8ad8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8adc:	e0fffc17 	ldw	r3,-16(fp)
    8ae0:	00800044 	movi	r2,1
    8ae4:	10c4983a 	sll	r2,r2,r3
    8ae8:	1007883a 	mov	r3,r2
    8aec:	00800074 	movhi	r2,1
    8af0:	10a7dc04 	addi	r2,r2,-24720
    8af4:	10800017 	ldw	r2,0(r2)
    8af8:	1886b03a 	or	r3,r3,r2
    8afc:	00800074 	movhi	r2,1
    8b00:	10a7dc04 	addi	r2,r2,-24720
    8b04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8b08:	00800074 	movhi	r2,1
    8b0c:	10a7dc04 	addi	r2,r2,-24720
    8b10:	10800017 	ldw	r2,0(r2)
    8b14:	100170fa 	wrctl	ienable,r2
    8b18:	e0bffd17 	ldw	r2,-12(fp)
    8b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b20:	e0bffa17 	ldw	r2,-24(fp)
    8b24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8b28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8b2c:	e037883a 	mov	sp,fp
    8b30:	df000017 	ldw	fp,0(sp)
    8b34:	dec00104 	addi	sp,sp,4
    8b38:	f800283a 	ret

00008b3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8b3c:	defff904 	addi	sp,sp,-28
    8b40:	df000615 	stw	fp,24(sp)
    8b44:	df000604 	addi	fp,sp,24
    8b48:	e13ffe15 	stw	r4,-8(fp)
    8b4c:	e17fff15 	stw	r5,-4(fp)
    8b50:	e0bfff17 	ldw	r2,-4(fp)
    8b54:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8b58:	0005303a 	rdctl	r2,status
    8b5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b60:	e0fffb17 	ldw	r3,-20(fp)
    8b64:	00bfff84 	movi	r2,-2
    8b68:	1884703a 	and	r2,r3,r2
    8b6c:	1001703a 	wrctl	status,r2
  
  return context;
    8b70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8b74:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    8b78:	e0fffc17 	ldw	r3,-16(fp)
    8b7c:	00800044 	movi	r2,1
    8b80:	10c4983a 	sll	r2,r2,r3
    8b84:	0084303a 	nor	r2,zero,r2
    8b88:	1007883a 	mov	r3,r2
    8b8c:	00800074 	movhi	r2,1
    8b90:	10a7dc04 	addi	r2,r2,-24720
    8b94:	10800017 	ldw	r2,0(r2)
    8b98:	1886703a 	and	r3,r3,r2
    8b9c:	00800074 	movhi	r2,1
    8ba0:	10a7dc04 	addi	r2,r2,-24720
    8ba4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8ba8:	00800074 	movhi	r2,1
    8bac:	10a7dc04 	addi	r2,r2,-24720
    8bb0:	10800017 	ldw	r2,0(r2)
    8bb4:	100170fa 	wrctl	ienable,r2
    8bb8:	e0bffd17 	ldw	r2,-12(fp)
    8bbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8bc0:	e0bffa17 	ldw	r2,-24(fp)
    8bc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8bc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8bcc:	e037883a 	mov	sp,fp
    8bd0:	df000017 	ldw	fp,0(sp)
    8bd4:	dec00104 	addi	sp,sp,4
    8bd8:	f800283a 	ret

00008bdc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8bdc:	defffc04 	addi	sp,sp,-16
    8be0:	df000315 	stw	fp,12(sp)
    8be4:	df000304 	addi	fp,sp,12
    8be8:	e13ffe15 	stw	r4,-8(fp)
    8bec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8bf0:	000530fa 	rdctl	r2,ienable
    8bf4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8bf8:	e0ffff17 	ldw	r3,-4(fp)
    8bfc:	00800044 	movi	r2,1
    8c00:	10c4983a 	sll	r2,r2,r3
    8c04:	1007883a 	mov	r3,r2
    8c08:	e0bffd17 	ldw	r2,-12(fp)
    8c0c:	1884703a 	and	r2,r3,r2
    8c10:	1004c03a 	cmpne	r2,r2,zero
}
    8c14:	e037883a 	mov	sp,fp
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00104 	addi	sp,sp,4
    8c20:	f800283a 	ret

00008c24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8c24:	defff404 	addi	sp,sp,-48
    8c28:	dfc00b15 	stw	ra,44(sp)
    8c2c:	df000a15 	stw	fp,40(sp)
    8c30:	df000a04 	addi	fp,sp,40
    8c34:	e13ffb15 	stw	r4,-20(fp)
    8c38:	e17ffc15 	stw	r5,-16(fp)
    8c3c:	e1bffd15 	stw	r6,-12(fp)
    8c40:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    8c44:	00bffa84 	movi	r2,-22
    8c48:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8c4c:	e0bffc17 	ldw	r2,-16(fp)
    8c50:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8c54:	e0bff917 	ldw	r2,-28(fp)
    8c58:	10800808 	cmpgei	r2,r2,32
    8c5c:	1000291e 	bne	r2,zero,8d04 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c60:	0005303a 	rdctl	r2,status
    8c64:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c68:	e0fff717 	ldw	r3,-36(fp)
    8c6c:	00bfff84 	movi	r2,-2
    8c70:	1884703a 	and	r2,r3,r2
    8c74:	1001703a 	wrctl	status,r2
  
  return context;
    8c78:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8c7c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    8c80:	e0bff917 	ldw	r2,-28(fp)
    8c84:	00c00074 	movhi	r3,1
    8c88:	18e7e004 	addi	r3,r3,-24704
    8c8c:	100490fa 	slli	r2,r2,3
    8c90:	10c7883a 	add	r3,r2,r3
    8c94:	e0bffd17 	ldw	r2,-12(fp)
    8c98:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    8c9c:	e0bff917 	ldw	r2,-28(fp)
    8ca0:	00c00074 	movhi	r3,1
    8ca4:	18e7e004 	addi	r3,r3,-24704
    8ca8:	100490fa 	slli	r2,r2,3
    8cac:	10c5883a 	add	r2,r2,r3
    8cb0:	10c00104 	addi	r3,r2,4
    8cb4:	e0bffe17 	ldw	r2,-8(fp)
    8cb8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8cbc:	e0bffd17 	ldw	r2,-12(fp)
    8cc0:	1005003a 	cmpeq	r2,r2,zero
    8cc4:	1000051e 	bne	r2,zero,8cdc <alt_iic_isr_register+0xb8>
    8cc8:	e17ff917 	ldw	r5,-28(fp)
    8ccc:	e13ffb17 	ldw	r4,-20(fp)
    8cd0:	0008aa00 	call	8aa0 <alt_ic_irq_enable>
    8cd4:	e0bfff15 	stw	r2,-4(fp)
    8cd8:	00000406 	br	8cec <alt_iic_isr_register+0xc8>
    8cdc:	e17ff917 	ldw	r5,-28(fp)
    8ce0:	e13ffb17 	ldw	r4,-20(fp)
    8ce4:	0008b3c0 	call	8b3c <alt_ic_irq_disable>
    8ce8:	e0bfff15 	stw	r2,-4(fp)
    8cec:	e0bfff17 	ldw	r2,-4(fp)
    8cf0:	e0bffa15 	stw	r2,-24(fp)
    8cf4:	e0bff817 	ldw	r2,-32(fp)
    8cf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cfc:	e0bff617 	ldw	r2,-40(fp)
    8d00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    8d04:	e0bffa17 	ldw	r2,-24(fp)
}
    8d08:	e037883a 	mov	sp,fp
    8d0c:	dfc00117 	ldw	ra,4(sp)
    8d10:	df000017 	ldw	fp,0(sp)
    8d14:	dec00204 	addi	sp,sp,8
    8d18:	f800283a 	ret

00008d1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8d1c:	defff804 	addi	sp,sp,-32
    8d20:	dfc00715 	stw	ra,28(sp)
    8d24:	df000615 	stw	fp,24(sp)
    8d28:	dc000515 	stw	r16,20(sp)
    8d2c:	df000504 	addi	fp,sp,20
    8d30:	e13ffc15 	stw	r4,-16(fp)
    8d34:	e17ffd15 	stw	r5,-12(fp)
    8d38:	e1bffe15 	stw	r6,-8(fp)
    8d3c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8d40:	e13ffd17 	ldw	r4,-12(fp)
    8d44:	e17ffe17 	ldw	r5,-8(fp)
    8d48:	e1bfff17 	ldw	r6,-4(fp)
    8d4c:	0008f640 	call	8f64 <open>
    8d50:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8d54:	e0bffb17 	ldw	r2,-20(fp)
    8d58:	1004803a 	cmplt	r2,r2,zero
    8d5c:	10001f1e 	bne	r2,zero,8ddc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    8d60:	e13ffb17 	ldw	r4,-20(fp)
    8d64:	04000074 	movhi	r16,1
    8d68:	84267e04 	addi	r16,r16,-26120
    8d6c:	01400304 	movi	r5,12
    8d70:	00098dc0 	call	98dc <__mulsi3>
    8d74:	1405883a 	add	r2,r2,r16
    8d78:	10c00017 	ldw	r3,0(r2)
    8d7c:	e0bffc17 	ldw	r2,-16(fp)
    8d80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8d84:	e13ffb17 	ldw	r4,-20(fp)
    8d88:	04000074 	movhi	r16,1
    8d8c:	84267e04 	addi	r16,r16,-26120
    8d90:	01400304 	movi	r5,12
    8d94:	00098dc0 	call	98dc <__mulsi3>
    8d98:	1405883a 	add	r2,r2,r16
    8d9c:	10800104 	addi	r2,r2,4
    8da0:	10c00017 	ldw	r3,0(r2)
    8da4:	e0bffc17 	ldw	r2,-16(fp)
    8da8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8dac:	e13ffb17 	ldw	r4,-20(fp)
    8db0:	04000074 	movhi	r16,1
    8db4:	84267e04 	addi	r16,r16,-26120
    8db8:	01400304 	movi	r5,12
    8dbc:	00098dc0 	call	98dc <__mulsi3>
    8dc0:	1405883a 	add	r2,r2,r16
    8dc4:	10800204 	addi	r2,r2,8
    8dc8:	10c00017 	ldw	r3,0(r2)
    8dcc:	e0bffc17 	ldw	r2,-16(fp)
    8dd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8dd4:	e13ffb17 	ldw	r4,-20(fp)
    8dd8:	00091500 	call	9150 <alt_release_fd>
  }
} 
    8ddc:	e037883a 	mov	sp,fp
    8de0:	dfc00217 	ldw	ra,8(sp)
    8de4:	df000117 	ldw	fp,4(sp)
    8de8:	dc000017 	ldw	r16,0(sp)
    8dec:	dec00304 	addi	sp,sp,12
    8df0:	f800283a 	ret

00008df4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8df4:	defffb04 	addi	sp,sp,-20
    8df8:	dfc00415 	stw	ra,16(sp)
    8dfc:	df000315 	stw	fp,12(sp)
    8e00:	df000304 	addi	fp,sp,12
    8e04:	e13ffd15 	stw	r4,-12(fp)
    8e08:	e17ffe15 	stw	r5,-8(fp)
    8e0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8e10:	01000074 	movhi	r4,1
    8e14:	21268104 	addi	r4,r4,-26108
    8e18:	e17ffd17 	ldw	r5,-12(fp)
    8e1c:	01800044 	movi	r6,1
    8e20:	01c07fc4 	movi	r7,511
    8e24:	0008d1c0 	call	8d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8e28:	01000074 	movhi	r4,1
    8e2c:	21267e04 	addi	r4,r4,-26120
    8e30:	e17ffe17 	ldw	r5,-8(fp)
    8e34:	000d883a 	mov	r6,zero
    8e38:	01c07fc4 	movi	r7,511
    8e3c:	0008d1c0 	call	8d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8e40:	01000074 	movhi	r4,1
    8e44:	21268404 	addi	r4,r4,-26096
    8e48:	e17fff17 	ldw	r5,-4(fp)
    8e4c:	01800044 	movi	r6,1
    8e50:	01c07fc4 	movi	r7,511
    8e54:	0008d1c0 	call	8d1c <alt_open_fd>
}  
    8e58:	e037883a 	mov	sp,fp
    8e5c:	dfc00117 	ldw	ra,4(sp)
    8e60:	df000017 	ldw	fp,0(sp)
    8e64:	dec00204 	addi	sp,sp,8
    8e68:	f800283a 	ret

00008e6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8e6c:	defffa04 	addi	sp,sp,-24
    8e70:	dfc00515 	stw	ra,20(sp)
    8e74:	df000415 	stw	fp,16(sp)
    8e78:	dc000315 	stw	r16,12(sp)
    8e7c:	df000304 	addi	fp,sp,12
    8e80:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8e84:	e0bffe17 	ldw	r2,-8(fp)
    8e88:	10800217 	ldw	r2,8(r2)
    8e8c:	10d00034 	orhi	r3,r2,16384
    8e90:	e0bffe17 	ldw	r2,-8(fp)
    8e94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8e98:	e03ffd15 	stw	zero,-12(fp)
    8e9c:	00002306 	br	8f2c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8ea0:	e13ffd17 	ldw	r4,-12(fp)
    8ea4:	04000074 	movhi	r16,1
    8ea8:	84267e04 	addi	r16,r16,-26120
    8eac:	01400304 	movi	r5,12
    8eb0:	00098dc0 	call	98dc <__mulsi3>
    8eb4:	1405883a 	add	r2,r2,r16
    8eb8:	10c00017 	ldw	r3,0(r2)
    8ebc:	e0bffe17 	ldw	r2,-8(fp)
    8ec0:	10800017 	ldw	r2,0(r2)
    8ec4:	1880161e 	bne	r3,r2,8f20 <alt_file_locked+0xb4>
    8ec8:	e13ffd17 	ldw	r4,-12(fp)
    8ecc:	04000074 	movhi	r16,1
    8ed0:	84267e04 	addi	r16,r16,-26120
    8ed4:	01400304 	movi	r5,12
    8ed8:	00098dc0 	call	98dc <__mulsi3>
    8edc:	1405883a 	add	r2,r2,r16
    8ee0:	10800204 	addi	r2,r2,8
    8ee4:	10800017 	ldw	r2,0(r2)
    8ee8:	1004403a 	cmpge	r2,r2,zero
    8eec:	10000c1e 	bne	r2,zero,8f20 <alt_file_locked+0xb4>
    8ef0:	e13ffd17 	ldw	r4,-12(fp)
    8ef4:	01400304 	movi	r5,12
    8ef8:	00098dc0 	call	98dc <__mulsi3>
    8efc:	1007883a 	mov	r3,r2
    8f00:	00800074 	movhi	r2,1
    8f04:	10a67e04 	addi	r2,r2,-26120
    8f08:	1887883a 	add	r3,r3,r2
    8f0c:	e0bffe17 	ldw	r2,-8(fp)
    8f10:	18800326 	beq	r3,r2,8f20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8f14:	00bffcc4 	movi	r2,-13
    8f18:	e0bfff15 	stw	r2,-4(fp)
    8f1c:	00000a06 	br	8f48 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f20:	e0bffd17 	ldw	r2,-12(fp)
    8f24:	10800044 	addi	r2,r2,1
    8f28:	e0bffd15 	stw	r2,-12(fp)
    8f2c:	00800074 	movhi	r2,1
    8f30:	10a71a04 	addi	r2,r2,-25496
    8f34:	10800017 	ldw	r2,0(r2)
    8f38:	1007883a 	mov	r3,r2
    8f3c:	e0bffd17 	ldw	r2,-12(fp)
    8f40:	18bfd72e 	bgeu	r3,r2,8ea0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8f44:	e03fff15 	stw	zero,-4(fp)
    8f48:	e0bfff17 	ldw	r2,-4(fp)
}
    8f4c:	e037883a 	mov	sp,fp
    8f50:	dfc00217 	ldw	ra,8(sp)
    8f54:	df000117 	ldw	fp,4(sp)
    8f58:	dc000017 	ldw	r16,0(sp)
    8f5c:	dec00304 	addi	sp,sp,12
    8f60:	f800283a 	ret

00008f64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8f64:	defff404 	addi	sp,sp,-48
    8f68:	dfc00b15 	stw	ra,44(sp)
    8f6c:	df000a15 	stw	fp,40(sp)
    8f70:	df000a04 	addi	fp,sp,40
    8f74:	e13ffb15 	stw	r4,-20(fp)
    8f78:	e17ffc15 	stw	r5,-16(fp)
    8f7c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8f80:	00bfffc4 	movi	r2,-1
    8f84:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    8f88:	00bffb44 	movi	r2,-19
    8f8c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    8f90:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8f94:	e13ffb17 	ldw	r4,-20(fp)
    8f98:	01400074 	movhi	r5,1
    8f9c:	29671804 	addi	r5,r5,-25504
    8fa0:	000938c0 	call	938c <alt_find_dev>
    8fa4:	e0bffa15 	stw	r2,-24(fp)
    8fa8:	e0bffa17 	ldw	r2,-24(fp)
    8fac:	1004c03a 	cmpne	r2,r2,zero
    8fb0:	1000051e 	bne	r2,zero,8fc8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8fb4:	e13ffb17 	ldw	r4,-20(fp)
    8fb8:	00094200 	call	9420 <alt_find_file>
    8fbc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    8fc0:	00800044 	movi	r2,1
    8fc4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8fc8:	e0bffa17 	ldw	r2,-24(fp)
    8fcc:	1005003a 	cmpeq	r2,r2,zero
    8fd0:	1000311e 	bne	r2,zero,9098 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8fd4:	e13ffa17 	ldw	r4,-24(fp)
    8fd8:	00095400 	call	9540 <alt_get_fd>
    8fdc:	e0bff815 	stw	r2,-32(fp)
    8fe0:	e0bff817 	ldw	r2,-32(fp)
    8fe4:	1004403a 	cmpge	r2,r2,zero
    8fe8:	1000031e 	bne	r2,zero,8ff8 <open+0x94>
    {
      status = index;
    8fec:	e0bff817 	ldw	r2,-32(fp)
    8ff0:	e0bff715 	stw	r2,-36(fp)
    8ff4:	00002a06 	br	90a0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8ff8:	e13ff817 	ldw	r4,-32(fp)
    8ffc:	01400304 	movi	r5,12
    9000:	00098dc0 	call	98dc <__mulsi3>
    9004:	1007883a 	mov	r3,r2
    9008:	00800074 	movhi	r2,1
    900c:	10a67e04 	addi	r2,r2,-26120
    9010:	1885883a 	add	r2,r3,r2
    9014:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9018:	e0fffc17 	ldw	r3,-16(fp)
    901c:	00900034 	movhi	r2,16384
    9020:	10bfffc4 	addi	r2,r2,-1
    9024:	1886703a 	and	r3,r3,r2
    9028:	e0bff917 	ldw	r2,-28(fp)
    902c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9030:	e0bff617 	ldw	r2,-40(fp)
    9034:	1004c03a 	cmpne	r2,r2,zero
    9038:	1000061e 	bne	r2,zero,9054 <open+0xf0>
    903c:	e13ff917 	ldw	r4,-28(fp)
    9040:	0008e6c0 	call	8e6c <alt_file_locked>
    9044:	e0bff715 	stw	r2,-36(fp)
    9048:	e0bff717 	ldw	r2,-36(fp)
    904c:	1004803a 	cmplt	r2,r2,zero
    9050:	1000131e 	bne	r2,zero,90a0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9054:	e0bffa17 	ldw	r2,-24(fp)
    9058:	10800317 	ldw	r2,12(r2)
    905c:	1005003a 	cmpeq	r2,r2,zero
    9060:	1000091e 	bne	r2,zero,9088 <open+0x124>
    9064:	e0bffa17 	ldw	r2,-24(fp)
    9068:	10800317 	ldw	r2,12(r2)
    906c:	e13ff917 	ldw	r4,-28(fp)
    9070:	e17ffb17 	ldw	r5,-20(fp)
    9074:	e1bffc17 	ldw	r6,-16(fp)
    9078:	e1fffd17 	ldw	r7,-12(fp)
    907c:	103ee83a 	callr	r2
    9080:	e0bfff15 	stw	r2,-4(fp)
    9084:	00000106 	br	908c <open+0x128>
    9088:	e03fff15 	stw	zero,-4(fp)
    908c:	e0bfff17 	ldw	r2,-4(fp)
    9090:	e0bff715 	stw	r2,-36(fp)
    9094:	00000206 	br	90a0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9098:	00bffb44 	movi	r2,-19
    909c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    90a0:	e0bff717 	ldw	r2,-36(fp)
    90a4:	1004403a 	cmpge	r2,r2,zero
    90a8:	1000091e 	bne	r2,zero,90d0 <open+0x16c>
  {
    alt_release_fd (index);  
    90ac:	e13ff817 	ldw	r4,-32(fp)
    90b0:	00091500 	call	9150 <alt_release_fd>
    ALT_ERRNO = -status;
    90b4:	00090f00 	call	90f0 <alt_get_errno>
    90b8:	e0fff717 	ldw	r3,-36(fp)
    90bc:	00c7c83a 	sub	r3,zero,r3
    90c0:	10c00015 	stw	r3,0(r2)
    return -1;
    90c4:	00bfffc4 	movi	r2,-1
    90c8:	e0bffe15 	stw	r2,-8(fp)
    90cc:	00000206 	br	90d8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    90d0:	e0bff817 	ldw	r2,-32(fp)
    90d4:	e0bffe15 	stw	r2,-8(fp)
    90d8:	e0bffe17 	ldw	r2,-8(fp)
}
    90dc:	e037883a 	mov	sp,fp
    90e0:	dfc00117 	ldw	ra,4(sp)
    90e4:	df000017 	ldw	fp,0(sp)
    90e8:	dec00204 	addi	sp,sp,8
    90ec:	f800283a 	ret

000090f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    90f0:	defffd04 	addi	sp,sp,-12
    90f4:	dfc00215 	stw	ra,8(sp)
    90f8:	df000115 	stw	fp,4(sp)
    90fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9100:	00800074 	movhi	r2,1
    9104:	10a71b04 	addi	r2,r2,-25492
    9108:	10800017 	ldw	r2,0(r2)
    910c:	1005003a 	cmpeq	r2,r2,zero
    9110:	1000061e 	bne	r2,zero,912c <alt_get_errno+0x3c>
    9114:	00800074 	movhi	r2,1
    9118:	10a71b04 	addi	r2,r2,-25492
    911c:	10800017 	ldw	r2,0(r2)
    9120:	103ee83a 	callr	r2
    9124:	e0bfff15 	stw	r2,-4(fp)
    9128:	00000306 	br	9138 <alt_get_errno+0x48>
    912c:	00800074 	movhi	r2,1
    9130:	10a7df04 	addi	r2,r2,-24708
    9134:	e0bfff15 	stw	r2,-4(fp)
    9138:	e0bfff17 	ldw	r2,-4(fp)
}
    913c:	e037883a 	mov	sp,fp
    9140:	dfc00117 	ldw	ra,4(sp)
    9144:	df000017 	ldw	fp,0(sp)
    9148:	dec00204 	addi	sp,sp,8
    914c:	f800283a 	ret

00009150 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9150:	defffc04 	addi	sp,sp,-16
    9154:	dfc00315 	stw	ra,12(sp)
    9158:	df000215 	stw	fp,8(sp)
    915c:	dc000115 	stw	r16,4(sp)
    9160:	df000104 	addi	fp,sp,4
    9164:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9168:	e0bfff17 	ldw	r2,-4(fp)
    916c:	108000d0 	cmplti	r2,r2,3
    9170:	10000f1e 	bne	r2,zero,91b0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9174:	e13fff17 	ldw	r4,-4(fp)
    9178:	04000074 	movhi	r16,1
    917c:	84267e04 	addi	r16,r16,-26120
    9180:	01400304 	movi	r5,12
    9184:	00098dc0 	call	98dc <__mulsi3>
    9188:	1405883a 	add	r2,r2,r16
    918c:	10800204 	addi	r2,r2,8
    9190:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9194:	e13fff17 	ldw	r4,-4(fp)
    9198:	04000074 	movhi	r16,1
    919c:	84267e04 	addi	r16,r16,-26120
    91a0:	01400304 	movi	r5,12
    91a4:	00098dc0 	call	98dc <__mulsi3>
    91a8:	1405883a 	add	r2,r2,r16
    91ac:	10000015 	stw	zero,0(r2)
  }
}
    91b0:	e037883a 	mov	sp,fp
    91b4:	dfc00217 	ldw	ra,8(sp)
    91b8:	df000117 	ldw	fp,4(sp)
    91bc:	dc000017 	ldw	r16,0(sp)
    91c0:	dec00304 	addi	sp,sp,12
    91c4:	f800283a 	ret

000091c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    91c8:	defffa04 	addi	sp,sp,-24
    91cc:	df000515 	stw	fp,20(sp)
    91d0:	df000504 	addi	fp,sp,20
    91d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91d8:	0005303a 	rdctl	r2,status
    91dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91e0:	e0fffd17 	ldw	r3,-12(fp)
    91e4:	00bfff84 	movi	r2,-2
    91e8:	1884703a 	and	r2,r3,r2
    91ec:	1001703a 	wrctl	status,r2
  
  return context;
    91f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    91f4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    91f8:	e0bfff17 	ldw	r2,-4(fp)
    91fc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9200:	e0bffc17 	ldw	r2,-16(fp)
    9204:	10c00017 	ldw	r3,0(r2)
    9208:	e0bffc17 	ldw	r2,-16(fp)
    920c:	10800117 	ldw	r2,4(r2)
    9210:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    9214:	e0bffc17 	ldw	r2,-16(fp)
    9218:	10c00117 	ldw	r3,4(r2)
    921c:	e0bffc17 	ldw	r2,-16(fp)
    9220:	10800017 	ldw	r2,0(r2)
    9224:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9228:	e0fffc17 	ldw	r3,-16(fp)
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    9234:	e0fffc17 	ldw	r3,-16(fp)
    9238:	e0bffc17 	ldw	r2,-16(fp)
    923c:	18800015 	stw	r2,0(r3)
    9240:	e0bffe17 	ldw	r2,-8(fp)
    9244:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9248:	e0bffb17 	ldw	r2,-20(fp)
    924c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9250:	e037883a 	mov	sp,fp
    9254:	df000017 	ldw	fp,0(sp)
    9258:	dec00104 	addi	sp,sp,4
    925c:	f800283a 	ret

00009260 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9260:	defffb04 	addi	sp,sp,-20
    9264:	dfc00415 	stw	ra,16(sp)
    9268:	df000315 	stw	fp,12(sp)
    926c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9270:	d0a00717 	ldw	r2,-32740(gp)
    9274:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9278:	d0a0c817 	ldw	r2,-31968(gp)
    927c:	10800044 	addi	r2,r2,1
    9280:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9284:	00003106 	br	934c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    9288:	e0bffe17 	ldw	r2,-8(fp)
    928c:	10800017 	ldw	r2,0(r2)
    9290:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9294:	e0bffe17 	ldw	r2,-8(fp)
    9298:	10800403 	ldbu	r2,16(r2)
    929c:	10803fcc 	andi	r2,r2,255
    92a0:	1005003a 	cmpeq	r2,r2,zero
    92a4:	1000051e 	bne	r2,zero,92bc <alt_tick+0x5c>
    92a8:	d0a0c817 	ldw	r2,-31968(gp)
    92ac:	1004c03a 	cmpne	r2,r2,zero
    92b0:	1000021e 	bne	r2,zero,92bc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    92b4:	e0bffe17 	ldw	r2,-8(fp)
    92b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    92bc:	e0bffe17 	ldw	r2,-8(fp)
    92c0:	10c00217 	ldw	r3,8(r2)
    92c4:	d0a0c817 	ldw	r2,-31968(gp)
    92c8:	10c01e36 	bltu	r2,r3,9344 <alt_tick+0xe4>
    92cc:	e0bffe17 	ldw	r2,-8(fp)
    92d0:	10800403 	ldbu	r2,16(r2)
    92d4:	10803fcc 	andi	r2,r2,255
    92d8:	1004c03a 	cmpne	r2,r2,zero
    92dc:	1000191e 	bne	r2,zero,9344 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    92e0:	e0bffe17 	ldw	r2,-8(fp)
    92e4:	10c00317 	ldw	r3,12(r2)
    92e8:	e0bffe17 	ldw	r2,-8(fp)
    92ec:	11000517 	ldw	r4,20(r2)
    92f0:	183ee83a 	callr	r3
    92f4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    92f8:	e0bffd17 	ldw	r2,-12(fp)
    92fc:	1004c03a 	cmpne	r2,r2,zero
    9300:	1000031e 	bne	r2,zero,9310 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    9304:	e13ffe17 	ldw	r4,-8(fp)
    9308:	00091c80 	call	91c8 <alt_alarm_stop>
    930c:	00000d06 	br	9344 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    9310:	e0bffe17 	ldw	r2,-8(fp)
    9314:	10c00217 	ldw	r3,8(r2)
    9318:	e0bffd17 	ldw	r2,-12(fp)
    931c:	1887883a 	add	r3,r3,r2
    9320:	e0bffe17 	ldw	r2,-8(fp)
    9324:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9328:	e0bffe17 	ldw	r2,-8(fp)
    932c:	10c00217 	ldw	r3,8(r2)
    9330:	d0a0c817 	ldw	r2,-31968(gp)
    9334:	1880032e 	bgeu	r3,r2,9344 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    9338:	e0fffe17 	ldw	r3,-8(fp)
    933c:	00800044 	movi	r2,1
    9340:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    9344:	e0bfff17 	ldw	r2,-4(fp)
    9348:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    934c:	d0e00704 	addi	r3,gp,-32740
    9350:	e0bffe17 	ldw	r2,-8(fp)
    9354:	10ffcc1e 	bne	r2,r3,9288 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    936c:	deffff04 	addi	sp,sp,-4
    9370:	df000015 	stw	fp,0(sp)
    9374:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9378:	000170fa 	wrctl	ienable,zero
}
    937c:	e037883a 	mov	sp,fp
    9380:	df000017 	ldw	fp,0(sp)
    9384:	dec00104 	addi	sp,sp,4
    9388:	f800283a 	ret

0000938c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    938c:	defff904 	addi	sp,sp,-28
    9390:	dfc00615 	stw	ra,24(sp)
    9394:	df000515 	stw	fp,20(sp)
    9398:	df000504 	addi	fp,sp,20
    939c:	e13ffd15 	stw	r4,-12(fp)
    93a0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    93a4:	e0bffe17 	ldw	r2,-8(fp)
    93a8:	10800017 	ldw	r2,0(r2)
    93ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    93b0:	e13ffd17 	ldw	r4,-12(fp)
    93b4:	00096fc0 	call	96fc <strlen>
    93b8:	10800044 	addi	r2,r2,1
    93bc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    93c0:	00000d06 	br	93f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    93c4:	e0bffc17 	ldw	r2,-16(fp)
    93c8:	11000217 	ldw	r4,8(r2)
    93cc:	e1bffb17 	ldw	r6,-20(fp)
    93d0:	e17ffd17 	ldw	r5,-12(fp)
    93d4:	00096c00 	call	96c0 <memcmp>
    93d8:	1004c03a 	cmpne	r2,r2,zero
    93dc:	1000031e 	bne	r2,zero,93ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    93e0:	e0bffc17 	ldw	r2,-16(fp)
    93e4:	e0bfff15 	stw	r2,-4(fp)
    93e8:	00000706 	br	9408 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    93ec:	e0bffc17 	ldw	r2,-16(fp)
    93f0:	10800017 	ldw	r2,0(r2)
    93f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    93f8:	e0fffe17 	ldw	r3,-8(fp)
    93fc:	e0bffc17 	ldw	r2,-16(fp)
    9400:	10fff01e 	bne	r2,r3,93c4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9404:	e03fff15 	stw	zero,-4(fp)
    9408:	e0bfff17 	ldw	r2,-4(fp)
}
    940c:	e037883a 	mov	sp,fp
    9410:	dfc00117 	ldw	ra,4(sp)
    9414:	df000017 	ldw	fp,0(sp)
    9418:	dec00204 	addi	sp,sp,8
    941c:	f800283a 	ret

00009420 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9420:	defffa04 	addi	sp,sp,-24
    9424:	dfc00515 	stw	ra,20(sp)
    9428:	df000415 	stw	fp,16(sp)
    942c:	df000404 	addi	fp,sp,16
    9430:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9434:	00800074 	movhi	r2,1
    9438:	10a71604 	addi	r2,r2,-25512
    943c:	10800017 	ldw	r2,0(r2)
    9440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9444:	00003306 	br	9514 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9448:	e0bffd17 	ldw	r2,-12(fp)
    944c:	11000217 	ldw	r4,8(r2)
    9450:	00096fc0 	call	96fc <strlen>
    9454:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9458:	e0bffd17 	ldw	r2,-12(fp)
    945c:	10c00217 	ldw	r3,8(r2)
    9460:	e0bffc17 	ldw	r2,-16(fp)
    9464:	1885883a 	add	r2,r3,r2
    9468:	10bfffc4 	addi	r2,r2,-1
    946c:	10800003 	ldbu	r2,0(r2)
    9470:	10803fcc 	andi	r2,r2,255
    9474:	1080201c 	xori	r2,r2,128
    9478:	10bfe004 	addi	r2,r2,-128
    947c:	10800bd8 	cmpnei	r2,r2,47
    9480:	1000031e 	bne	r2,zero,9490 <alt_find_file+0x70>
    {
      len -= 1;
    9484:	e0bffc17 	ldw	r2,-16(fp)
    9488:	10bfffc4 	addi	r2,r2,-1
    948c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9490:	e0bffc17 	ldw	r2,-16(fp)
    9494:	1007883a 	mov	r3,r2
    9498:	e0bffe17 	ldw	r2,-8(fp)
    949c:	1885883a 	add	r2,r3,r2
    94a0:	10800003 	ldbu	r2,0(r2)
    94a4:	10803fcc 	andi	r2,r2,255
    94a8:	1080201c 	xori	r2,r2,128
    94ac:	10bfe004 	addi	r2,r2,-128
    94b0:	10800be0 	cmpeqi	r2,r2,47
    94b4:	10000a1e 	bne	r2,zero,94e0 <alt_find_file+0xc0>
    94b8:	e0bffc17 	ldw	r2,-16(fp)
    94bc:	1007883a 	mov	r3,r2
    94c0:	e0bffe17 	ldw	r2,-8(fp)
    94c4:	1885883a 	add	r2,r3,r2
    94c8:	10800003 	ldbu	r2,0(r2)
    94cc:	10803fcc 	andi	r2,r2,255
    94d0:	1080201c 	xori	r2,r2,128
    94d4:	10bfe004 	addi	r2,r2,-128
    94d8:	1004c03a 	cmpne	r2,r2,zero
    94dc:	10000a1e 	bne	r2,zero,9508 <alt_find_file+0xe8>
    94e0:	e0bffd17 	ldw	r2,-12(fp)
    94e4:	11000217 	ldw	r4,8(r2)
    94e8:	e1bffc17 	ldw	r6,-16(fp)
    94ec:	e17ffe17 	ldw	r5,-8(fp)
    94f0:	00096c00 	call	96c0 <memcmp>
    94f4:	1004c03a 	cmpne	r2,r2,zero
    94f8:	1000031e 	bne	r2,zero,9508 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    94fc:	e0bffd17 	ldw	r2,-12(fp)
    9500:	e0bfff15 	stw	r2,-4(fp)
    9504:	00000806 	br	9528 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	10800017 	ldw	r2,0(r2)
    9510:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9514:	00c00074 	movhi	r3,1
    9518:	18e71604 	addi	r3,r3,-25512
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	10ffc91e 	bne	r2,r3,9448 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9524:	e03fff15 	stw	zero,-4(fp)
    9528:	e0bfff17 	ldw	r2,-4(fp)
}
    952c:	e037883a 	mov	sp,fp
    9530:	dfc00117 	ldw	ra,4(sp)
    9534:	df000017 	ldw	fp,0(sp)
    9538:	dec00204 	addi	sp,sp,8
    953c:	f800283a 	ret

00009540 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9540:	defffa04 	addi	sp,sp,-24
    9544:	dfc00515 	stw	ra,20(sp)
    9548:	df000415 	stw	fp,16(sp)
    954c:	dc000315 	stw	r16,12(sp)
    9550:	df000304 	addi	fp,sp,12
    9554:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9558:	00bffa04 	movi	r2,-24
    955c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9560:	e03ffe15 	stw	zero,-8(fp)
    9564:	00002006 	br	95e8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    9568:	e13ffe17 	ldw	r4,-8(fp)
    956c:	04000074 	movhi	r16,1
    9570:	84267e04 	addi	r16,r16,-26120
    9574:	01400304 	movi	r5,12
    9578:	00098dc0 	call	98dc <__mulsi3>
    957c:	1405883a 	add	r2,r2,r16
    9580:	10800017 	ldw	r2,0(r2)
    9584:	1004c03a 	cmpne	r2,r2,zero
    9588:	1000141e 	bne	r2,zero,95dc <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    958c:	e13ffe17 	ldw	r4,-8(fp)
    9590:	04000074 	movhi	r16,1
    9594:	84267e04 	addi	r16,r16,-26120
    9598:	01400304 	movi	r5,12
    959c:	00098dc0 	call	98dc <__mulsi3>
    95a0:	1407883a 	add	r3,r2,r16
    95a4:	e0bfff17 	ldw	r2,-4(fp)
    95a8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    95ac:	00800074 	movhi	r2,1
    95b0:	10a71a04 	addi	r2,r2,-25496
    95b4:	10c00017 	ldw	r3,0(r2)
    95b8:	e0bffe17 	ldw	r2,-8(fp)
    95bc:	1880040e 	bge	r3,r2,95d0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    95c0:	00c00074 	movhi	r3,1
    95c4:	18e71a04 	addi	r3,r3,-25496
    95c8:	e0bffe17 	ldw	r2,-8(fp)
    95cc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    95d0:	e0bffe17 	ldw	r2,-8(fp)
    95d4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    95d8:	00000606 	br	95f4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    95dc:	e0bffe17 	ldw	r2,-8(fp)
    95e0:	10800044 	addi	r2,r2,1
    95e4:	e0bffe15 	stw	r2,-8(fp)
    95e8:	e0bffe17 	ldw	r2,-8(fp)
    95ec:	10800810 	cmplti	r2,r2,32
    95f0:	103fdd1e 	bne	r2,zero,9568 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    95f4:	e0bffd17 	ldw	r2,-12(fp)
}
    95f8:	e037883a 	mov	sp,fp
    95fc:	dfc00217 	ldw	ra,8(sp)
    9600:	df000117 	ldw	fp,4(sp)
    9604:	dc000017 	ldw	r16,0(sp)
    9608:	dec00304 	addi	sp,sp,12
    960c:	f800283a 	ret

00009610 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9610:	defffb04 	addi	sp,sp,-20
    9614:	df000415 	stw	fp,16(sp)
    9618:	df000404 	addi	fp,sp,16
    961c:	e13ffe15 	stw	r4,-8(fp)
    9620:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    9624:	e0bfff17 	ldw	r2,-4(fp)
    9628:	10820070 	cmpltui	r2,r2,2049
    962c:	1000021e 	bne	r2,zero,9638 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    9630:	00820004 	movi	r2,2048
    9634:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    9638:	e0fffe17 	ldw	r3,-8(fp)
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	1885883a 	add	r2,r3,r2
    9644:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9648:	e0bffe17 	ldw	r2,-8(fp)
    964c:	e0bffd15 	stw	r2,-12(fp)
    9650:	00000506 	br	9668 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9654:	e0bffd17 	ldw	r2,-12(fp)
    9658:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    965c:	e0bffd17 	ldw	r2,-12(fp)
    9660:	10800804 	addi	r2,r2,32
    9664:	e0bffd15 	stw	r2,-12(fp)
    9668:	e0fffd17 	ldw	r3,-12(fp)
    966c:	e0bffc17 	ldw	r2,-16(fp)
    9670:	18bff836 	bltu	r3,r2,9654 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9674:	e0bffe17 	ldw	r2,-8(fp)
    9678:	108007cc 	andi	r2,r2,31
    967c:	1005003a 	cmpeq	r2,r2,zero
    9680:	1000021e 	bne	r2,zero,968c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9684:	e0bffd17 	ldw	r2,-12(fp)
    9688:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    968c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9690:	e037883a 	mov	sp,fp
    9694:	df000017 	ldw	fp,0(sp)
    9698:	dec00104 	addi	sp,sp,4
    969c:	f800283a 	ret

000096a0 <exit>:
    96a0:	defffe04 	addi	sp,sp,-8
    96a4:	dc400015 	stw	r17,0(sp)
    96a8:	000b883a 	mov	r5,zero
    96ac:	2023883a 	mov	r17,r4
    96b0:	dfc00115 	stw	ra,4(sp)
    96b4:	00097200 	call	9720 <__call_exitprocs>
    96b8:	8809883a 	mov	r4,r17
    96bc:	00099540 	call	9954 <_exit>

000096c0 <memcmp>:
    96c0:	31ffffc4 	addi	r7,r6,-1
    96c4:	3000061e 	bne	r6,zero,96e0 <memcmp+0x20>
    96c8:	00000a06 	br	96f4 <memcmp+0x34>
    96cc:	39ffffc4 	addi	r7,r7,-1
    96d0:	00bfffc4 	movi	r2,-1
    96d4:	21000044 	addi	r4,r4,1
    96d8:	29400044 	addi	r5,r5,1
    96dc:	38800526 	beq	r7,r2,96f4 <memcmp+0x34>
    96e0:	20c00003 	ldbu	r3,0(r4)
    96e4:	28800003 	ldbu	r2,0(r5)
    96e8:	18bff826 	beq	r3,r2,96cc <memcmp+0xc>
    96ec:	1885c83a 	sub	r2,r3,r2
    96f0:	f800283a 	ret
    96f4:	0005883a 	mov	r2,zero
    96f8:	f800283a 	ret

000096fc <strlen>:
    96fc:	20800007 	ldb	r2,0(r4)
    9700:	10000526 	beq	r2,zero,9718 <strlen+0x1c>
    9704:	2007883a 	mov	r3,r4
    9708:	18c00044 	addi	r3,r3,1
    970c:	18800007 	ldb	r2,0(r3)
    9710:	103ffd1e 	bne	r2,zero,9708 <strlen+0xc>
    9714:	1905c83a 	sub	r2,r3,r4
    9718:	f800283a 	ret

0000971c <register_fini>:
    971c:	f800283a 	ret

00009720 <__call_exitprocs>:
    9720:	defff304 	addi	sp,sp,-52
    9724:	00800074 	movhi	r2,1
    9728:	10a72004 	addi	r2,r2,-25472
    972c:	df000b15 	stw	fp,44(sp)
    9730:	17000017 	ldw	fp,0(r2)
    9734:	00800034 	movhi	r2,0
    9738:	10800004 	addi	r2,r2,0
    973c:	1005003a 	cmpeq	r2,r2,zero
    9740:	d8800215 	stw	r2,8(sp)
    9744:	e0800c04 	addi	r2,fp,48
    9748:	dd800915 	stw	r22,36(sp)
    974c:	dd400815 	stw	r21,32(sp)
    9750:	dfc00c15 	stw	ra,48(sp)
    9754:	ddc00a15 	stw	r23,40(sp)
    9758:	dd000715 	stw	r20,28(sp)
    975c:	dcc00615 	stw	r19,24(sp)
    9760:	dc800515 	stw	r18,20(sp)
    9764:	dc400415 	stw	r17,16(sp)
    9768:	dc000315 	stw	r16,12(sp)
    976c:	282d883a 	mov	r22,r5
    9770:	d9000115 	stw	r4,4(sp)
    9774:	d8800015 	stw	r2,0(sp)
    9778:	282b003a 	cmpeq	r21,r5,zero
    977c:	e4400c17 	ldw	r17,48(fp)
    9780:	88001226 	beq	r17,zero,97cc <__call_exitprocs+0xac>
    9784:	ddc00017 	ldw	r23,0(sp)
    9788:	88800117 	ldw	r2,4(r17)
    978c:	8c802217 	ldw	r18,136(r17)
    9790:	143fffc4 	addi	r16,r2,-1
    9794:	80000b16 	blt	r16,zero,97c4 <__call_exitprocs+0xa4>
    9798:	9027003a 	cmpeq	r19,r18,zero
    979c:	a800171e 	bne	r21,zero,97fc <__call_exitprocs+0xdc>
    97a0:	9800051e 	bne	r19,zero,97b8 <__call_exitprocs+0x98>
    97a4:	8409883a 	add	r4,r16,r16
    97a8:	2105883a 	add	r2,r4,r4
    97ac:	1485883a 	add	r2,r2,r18
    97b0:	10c02017 	ldw	r3,128(r2)
    97b4:	b0c01226 	beq	r22,r3,9800 <__call_exitprocs+0xe0>
    97b8:	843fffc4 	addi	r16,r16,-1
    97bc:	00bfffc4 	movi	r2,-1
    97c0:	80bff61e 	bne	r16,r2,979c <__call_exitprocs+0x7c>
    97c4:	d8800217 	ldw	r2,8(sp)
    97c8:	10003226 	beq	r2,zero,9894 <__call_exitprocs+0x174>
    97cc:	dfc00c17 	ldw	ra,48(sp)
    97d0:	df000b17 	ldw	fp,44(sp)
    97d4:	ddc00a17 	ldw	r23,40(sp)
    97d8:	dd800917 	ldw	r22,36(sp)
    97dc:	dd400817 	ldw	r21,32(sp)
    97e0:	dd000717 	ldw	r20,28(sp)
    97e4:	dcc00617 	ldw	r19,24(sp)
    97e8:	dc800517 	ldw	r18,20(sp)
    97ec:	dc400417 	ldw	r17,16(sp)
    97f0:	dc000317 	ldw	r16,12(sp)
    97f4:	dec00d04 	addi	sp,sp,52
    97f8:	f800283a 	ret
    97fc:	8409883a 	add	r4,r16,r16
    9800:	88c00117 	ldw	r3,4(r17)
    9804:	2105883a 	add	r2,r4,r4
    9808:	1445883a 	add	r2,r2,r17
    980c:	18ffffc4 	addi	r3,r3,-1
    9810:	11800217 	ldw	r6,8(r2)
    9814:	1c001826 	beq	r3,r16,9878 <__call_exitprocs+0x158>
    9818:	10000215 	stw	zero,8(r2)
    981c:	303fe626 	beq	r6,zero,97b8 <__call_exitprocs+0x98>
    9820:	8d000117 	ldw	r20,4(r17)
    9824:	9800121e 	bne	r19,zero,9870 <__call_exitprocs+0x150>
    9828:	00c00044 	movi	r3,1
    982c:	1c06983a 	sll	r3,r3,r16
    9830:	90804017 	ldw	r2,256(r18)
    9834:	1884703a 	and	r2,r3,r2
    9838:	10000d26 	beq	r2,zero,9870 <__call_exitprocs+0x150>
    983c:	90804117 	ldw	r2,260(r18)
    9840:	1884703a 	and	r2,r3,r2
    9844:	10000e1e 	bne	r2,zero,9880 <__call_exitprocs+0x160>
    9848:	2105883a 	add	r2,r4,r4
    984c:	1485883a 	add	r2,r2,r18
    9850:	11400017 	ldw	r5,0(r2)
    9854:	d9000117 	ldw	r4,4(sp)
    9858:	303ee83a 	callr	r6
    985c:	88800117 	ldw	r2,4(r17)
    9860:	a0bfc61e 	bne	r20,r2,977c <__call_exitprocs+0x5c>
    9864:	b8800017 	ldw	r2,0(r23)
    9868:	147fd326 	beq	r2,r17,97b8 <__call_exitprocs+0x98>
    986c:	003fc306 	br	977c <__call_exitprocs+0x5c>
    9870:	303ee83a 	callr	r6
    9874:	003ff906 	br	985c <__call_exitprocs+0x13c>
    9878:	8c000115 	stw	r16,4(r17)
    987c:	003fe706 	br	981c <__call_exitprocs+0xfc>
    9880:	2105883a 	add	r2,r4,r4
    9884:	1485883a 	add	r2,r2,r18
    9888:	11000017 	ldw	r4,0(r2)
    988c:	303ee83a 	callr	r6
    9890:	003ff206 	br	985c <__call_exitprocs+0x13c>
    9894:	88800117 	ldw	r2,4(r17)
    9898:	10000b1e 	bne	r2,zero,98c8 <__call_exitprocs+0x1a8>
    989c:	89000017 	ldw	r4,0(r17)
    98a0:	20000a26 	beq	r4,zero,98cc <__call_exitprocs+0x1ac>
    98a4:	b9000015 	stw	r4,0(r23)
    98a8:	90000226 	beq	r18,zero,98b4 <__call_exitprocs+0x194>
    98ac:	9009883a 	mov	r4,r18
    98b0:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    98b4:	8809883a 	mov	r4,r17
    98b8:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    98bc:	bc400017 	ldw	r17,0(r23)
    98c0:	883fb11e 	bne	r17,zero,9788 <__call_exitprocs+0x68>
    98c4:	003fc106 	br	97cc <__call_exitprocs+0xac>
    98c8:	89000017 	ldw	r4,0(r17)
    98cc:	882f883a 	mov	r23,r17
    98d0:	2023883a 	mov	r17,r4
    98d4:	883fac1e 	bne	r17,zero,9788 <__call_exitprocs+0x68>
    98d8:	003fbc06 	br	97cc <__call_exitprocs+0xac>

000098dc <__mulsi3>:
    98dc:	20000a26 	beq	r4,zero,9908 <__mulsi3+0x2c>
    98e0:	0007883a 	mov	r3,zero
    98e4:	2080004c 	andi	r2,r4,1
    98e8:	1005003a 	cmpeq	r2,r2,zero
    98ec:	2008d07a 	srli	r4,r4,1
    98f0:	1000011e 	bne	r2,zero,98f8 <__mulsi3+0x1c>
    98f4:	1947883a 	add	r3,r3,r5
    98f8:	294b883a 	add	r5,r5,r5
    98fc:	203ff91e 	bne	r4,zero,98e4 <__mulsi3+0x8>
    9900:	1805883a 	mov	r2,r3
    9904:	f800283a 	ret
    9908:	0007883a 	mov	r3,zero
    990c:	1805883a 	mov	r2,r3
    9910:	f800283a 	ret

00009914 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    9914:	defffd04 	addi	sp,sp,-12
    9918:	df000215 	stw	fp,8(sp)
    991c:	df000204 	addi	fp,sp,8
    9920:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    9924:	e0bfff17 	ldw	r2,-4(fp)
    9928:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    992c:	e0bffe17 	ldw	r2,-8(fp)
    9930:	1005003a 	cmpeq	r2,r2,zero
    9934:	1000021e 	bne	r2,zero,9940 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    9938:	002af070 	cmpltui	zero,zero,43969
    993c:	00000106 	br	9944 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    9940:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    9944:	e037883a 	mov	sp,fp
    9948:	df000017 	ldw	fp,0(sp)
    994c:	dec00104 	addi	sp,sp,4
    9950:	f800283a 	ret

00009954 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9954:	defffd04 	addi	sp,sp,-12
    9958:	dfc00215 	stw	ra,8(sp)
    995c:	df000115 	stw	fp,4(sp)
    9960:	df000104 	addi	fp,sp,4
    9964:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9968:	e13fff17 	ldw	r4,-4(fp)
    996c:	00099140 	call	9914 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9970:	003fff06 	br	9970 <_exit+0x1c>
    9974:	0000971c 	xori	zero,zero,604
