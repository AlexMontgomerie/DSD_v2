
task_3.elf:     file format elf32-littlenios2
task_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000098e8 memsz 0x000098e8 flags r-x
    LOAD off    0x0000a908 vaddr 0x00809908 paddr 0x00809bec align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000aed0 vaddr 0x00809ed0 paddr 0x00809ed0 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009444  008001c0  008001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000304  00809604  00809604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00809908  00809bec  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00809ed0  00809ed0  0000aed0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00809ff4  00809ff4  0000abec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000abec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b10  00000000  00000000  0000ac10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001221e  00000000  00000000  0000b720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b9c  00000000  00000000  0001d93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fa2  00000000  00000000  000234da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001708  00000000  00000000  0002a47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000286d  00000000  00000000  0002bb84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dbc7  00000000  00000000  0002e3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003bfb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001168  00000000  00000000  0003bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f5da  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f5dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f5e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f5e1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f5e2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f5e6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f5ea  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f5ee  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f5f7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f600  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0003f609  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000009  00000000  00000000  0003f61b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  0003f624  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003419e  00000000  00000000  000445d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001c0 l    d  .text	00000000 .text
00809604 l    d  .rodata	00000000 .rodata
00809908 l    d  .rwdata	00000000 .rwdata
00809ed0 l    d  .bss	00000000 .bss
00809ff4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task_3_bsp//obj/HAL/src/crt0.o
008001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
00809908 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00801848 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ecvtbuf.c
00801dfc l     F .text	000001e4 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
008097a4 l     O .rodata	0000000c p05.2796
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
00803bb0 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 alt_load.c
00807c5c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00809bc4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00807ea8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00807f80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008080d0 l     F .text	00000038 alt_dev_reg
008099e8 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008083d0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
008084d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080861c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00808648 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00808a40 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00808ba0 l     F .text	00000050 alt_get_errno
00808bf0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080521c g     F .text	0000001c _malloc_usable_size_r
00803750 g     F .text	00000068 _mprec_log10
00803810 g     F .text	00000070 __any_on
008097b0 g     O .rodata	00000028 __mprec_tinytens
00807d48 g     F .text	0000006c alt_main
00803b2c g     F .text	0000002c strcpy
00801798 g     F .text	00000080 _puts_r
00809ef4 g     O .bss	00000100 alt_irq
00809bec g       *ABS*	00000000 __flash_rwdata_start
00806668 g     F .text	00000088 .hidden __eqdf2
00809ff4 g       *ABS*	00000000 __alt_heap_start
0080174c g     F .text	0000004c printf
00801fe0 g     F .text	0000016c fcvtbuf
00800af8 g     F .text	00000440 .hidden __divsf3
00802870 g     F .text	000000e4 _Balloc
00801368 g     F .text	00000070 .hidden __fixsfsi
00807db4 g     F .text	00000044 alt_putstr
008066f0 g     F .text	000000dc .hidden __gtdf2
00800000 g     F .entry	0000001c __reset
00807ef8 g     F .text	00000088 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809ed8 g     O .bss	00000004 errno
00809ee0 g     O .bss	00000004 alt_argv
00811bbc g       *ABS*	00000000 _gp
00809a3c g     O .rwdata	00000180 alt_fd_list
00809090 g     F .text	00000090 alt_find_dev
008050f0 g     F .text	00000028 memcpy
008013d8 g     F .text	000000dc .hidden __floatsidf
00808b24 g     F .text	0000007c alt_io_redirect
008067cc g     F .text	000000f4 .hidden __ltdf2
00801818 g     F .text	00000014 puts
008036ac g     F .text	000000a4 __ratio
00808250 g     F .text	000000ec altera_avalon_jtag_uart_read
008050c8 g     F .text	00000014 malloc
00801710 g     F .text	0000003c _printf_r
00805330 g     F .text	00000064 .hidden __udivsi3
00809800 g     O .rodata	000000c8 __mprec_tens
008016d0 g     F .text	00000040 gcvtf
00809308 g     F .text	00000090 alt_icache_flush
00802d14 g     F .text	0000003c __i2b
00803adc g     F .text	00000050 _sbrk_r
00809bd8 g     O .rwdata	00000004 alt_max_fd
00807b4c g     F .text	00000110 .hidden __extendsfdf2
008053ec g     F .text	000008ac .hidden __adddf3
00803468 g     F .text	00000104 __b2d
00809bbc g     O .rwdata	00000004 _global_impure_ptr
00803a38 g     F .text	000000a4 _realloc_r
00809ff4 g       *ABS*	00000000 __bss_end
00808950 g     F .text	000000f0 alt_iic_isr_register
00808f64 g     F .text	00000108 alt_tick
008097d8 g     O .rodata	00000028 __mprec_bigtens
00802af8 g     F .text	00000104 __s2b
00807aa4 g     F .text	000000a8 .hidden __floatunsidf
00803244 g     F .text	0000005c __mcmp
00808904 g     F .text	0000004c alt_ic_irq_enabled
00808ec8 g     F .text	0000009c alt_alarm_stop
00809ee8 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000d4 alt_irq_handler
00809a14 g     O .rwdata	00000028 alt_dev_null
008085fc g     F .text	00000020 alt_dcache_flush_all
00802bfc g     F .text	00000068 __hi0bits
00807a24 g     F .text	00000080 .hidden __fixdfsi
00809bec g       *ABS*	00000000 __ram_rwdata_end
00809bd0 g     O .rwdata	00000008 alt_dev_list
00807fd0 g     F .text	00000100 write
00809908 g       *ABS*	00000000 __ram_rodata_end
008067cc g     F .text	000000f4 .hidden __ledf2
00802fc8 g     F .text	00000134 __pow5mult
00805394 g     F .text	00000058 .hidden __umodsi3
00809ff4 g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080254c g     F .text	0000026c _dcvt
00808448 g     F .text	0000008c alt_avalon_timer_sc_init
008014b4 g     F .text	00000064 .hidden __clzsi2
0080833c g     F .text	00000094 altera_avalon_jtag_uart_write
008018b4 g     F .text	0000052c ___vfprintf_internal_r
00805138 g     F .text	000000e4 _free_r
00809440 g     F .text	00000190 __call_exitprocs
008001c0 g     F .text	0000003c _start
00809eec g     O .bss	00000004 _alt_tick_rate
00802254 g     F .text	000002f8 _gcvt
008030fc g     F .text	00000148 __lshift
00809ef0 g     O .bss	00000004 _alt_nticks
00808140 g     F .text	00000050 alt_sys_init
00802d50 g     F .text	00000278 __multiply
00801518 g     F .text	00000028 .hidden __mulsi3
00809908 g       *ABS*	00000000 __ram_rwdata_start
00809604 g       *ABS*	00000000 __ram_rodata_start
0080356c g     F .text	00000140 __d2b
00808190 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00809234 g     F .text	000000d4 alt_get_fd
008001fc g     F .text	000000c0 generateVector
00809410 g     F .text	00000030 memcmp
00809ff4 g       *ABS*	00000000 __alt_stack_base
00805c98 g     F .text	000009d0 .hidden __divdf3
008037b8 g     F .text	00000058 __copybits
008068c0 g     F .text	00000868 .hidden __muldf3
00809120 g     F .text	00000114 alt_find_file
00808698 g     F .text	000000a4 alt_dev_llist_insert
00807df8 g     F .text	000000b0 sbrk
00803880 g     F .text	00000060 _calloc_r
008027b8 g     F .text	000000b8 __sfvwrite_small_dev
00809ed0 g       *ABS*	00000000 __bss_start
00805118 g     F .text	00000020 memset
008003cc g     F .text	00000264 main
00801540 g     F .text	00000024 fcvt
00809ee4 g     O .bss	00000004 alt_envp
008081f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080214c g     F .text	00000108 ecvtbuf
01000000 g       *ABS*	00000000 __alt_heap_limit
00803dd0 g     F .text	000012f8 _dtoa_r
008038e0 g     F .text	00000158 _malloc_r
00809bdc g     O .rwdata	00000004 alt_errno
008015dc g     F .text	00000054 ecvtf
00805238 g     F .text	00000084 .hidden __divsi3
00800f38 g     F .text	00000430 .hidden __mulsf3
00809604 g       *ABS*	00000000 __flash_rodata_start
00806668 g     F .text	00000088 .hidden __nedf2
00808108 g     F .text	00000038 alt_irq_init
00808e44 g     F .text	00000084 alt_release_fd
0080969d g     O .rodata	00000100 .hidden __clz_tab
008002bc g     F .text	00000110 sumVector
00803b58 g     F .text	00000058 _write_r
00809bc0 g     O .rwdata	00000004 _impure_ptr
00809edc g     O .bss	00000004 alt_argc
00800020 g       .exceptions	00000000 alt_irq_entry
00803414 g     F .text	00000054 __ulp
008015b8 g     F .text	00000024 ecvt
00809bc8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808770 g     F .text	00000050 alt_ic_isr_register
00809bec g       *ABS*	00000000 _edata
00809ff4 g       *ABS*	00000000 _end
008001c0 g       *ABS*	00000000 __ram_exceptions_end
00808860 g     F .text	000000a4 alt_ic_irq_disable
00801564 g     F .text	00000054 fcvtf
0080906c g     F .text	00000024 altera_nios2_qsys_irq_init
00809398 g     F .text	00000020 exit
008032a0 g     F .text	00000174 __mdiff
008052bc g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801630 g     F .text	000000a0 gcvt
008095d0 g     F .text	00000034 _exit
0080182c g     F .text	0000001c strlen
00808ce4 g     F .text	00000160 open
008066f0 g     F .text	000000dc .hidden __gedf2
00809ed0 g     O .bss	00000004 __malloc_sbrk_start
0080873c g     F .text	00000034 alt_icache_flush_all
008093b8 g     F .text	00000058 fputs
00809be0 g     O .rwdata	00000004 alt_priority_mask
00809ed4 g     O .bss	00000004 __malloc_free_list
008087c0 g     F .text	000000a0 alt_ic_irq_enable
00801de0 g     F .text	0000001c __vfprintf_internal
00807128 g     F .text	000008fc .hidden __subdf3
00802c64 g     F .text	000000b0 __lo0bits
00809be4 g     O .rwdata	00000008 alt_alarm_list
00808524 g     F .text	000000d8 close
00800630 g     F .text	000004c8 .hidden __addsf3
00807cc4 g     F .text	00000084 alt_load
008050dc g     F .text	00000014 free
008029cc g     F .text	0000012c __multadd
00802954 g     F .text	00000078 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08407014 	ori	at,at,448
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001426 	beq	r2,zero,80017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00802074 	movhi	r2,129
  800130:	10a7bd04 	addi	r2,r2,-24844
  800134:	e0fffd17 	ldw	r3,-12(fp)
  800138:	180690fa 	slli	r3,r3,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	10c00017 	ldw	r3,0(r2)
  800144:	00802074 	movhi	r2,129
  800148:	10a7bd04 	addi	r2,r2,-24844
  80014c:	e13ffd17 	ldw	r4,-12(fp)
  800150:	200890fa 	slli	r4,r4,3
  800154:	1105883a 	add	r2,r2,r4
  800158:	10800104 	addi	r2,r2,4
  80015c:	10800017 	ldw	r2,0(r2)
  800160:	1009883a 	mov	r4,r2
  800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	00000706 	br	800198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80017c:	e0bffc17 	ldw	r2,-16(fp)
  800180:	1085883a 	add	r2,r2,r2
  800184:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800188:	e0bffd17 	ldw	r2,-12(fp)
  80018c:	10800044 	addi	r2,r2,1
  800190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  800194:	003fe106 	br	80011c <__alt_data_end+0xff80011c>

    active = alt_irq_pending ();
  800198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80019c:	e0bffb17 	ldw	r2,-20(fp)
  8001a0:	103fdb1e 	bne	r2,zero,800110 <__alt_data_end+0xff800110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a4:	0001883a 	nop
}
  8001a8:	0001883a 	nop
  8001ac:	e037883a 	mov	sp,fp
  8001b0:	dfc00117 	ldw	ra,4(sp)
  8001b4:	df000017 	ldw	fp,0(sp)
  8001b8:	dec00204 	addi	sp,sp,8
  8001bc:	f800283a 	ret

Disassembly of section .text:

008001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001c8:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001cc:	d686ef14 	ori	gp,gp,7100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d0:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d4:	10a7b414 	ori	r2,r2,40656

    movhi r3, %hi(__bss_end)
  8001d8:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001dc:	18e7fd14 	ori	r3,r3,40948

    beq r2, r3, 1f
  8001e0:	10c00326 	beq	r2,r3,8001f0 <_start+0x30>

0:
    stw zero, (r2)
  8001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ec:	10fffd36 	bltu	r2,r3,8001e4 <__alt_data_end+0xff8001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f0:	0807cc40 	call	807cc4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f4:	0807d480 	call	807d48 <alt_main>

008001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f8:	003fff06 	br	8001f8 <__alt_data_end+0xff8001f8>

008001fc <generateVector>:
#define step 0.001
#define N 255001


void generateVector(float x[N])
{
  8001fc:	defffb04 	addi	sp,sp,-20
  800200:	dfc00415 	stw	ra,16(sp)
  800204:	df000315 	stw	fp,12(sp)
  800208:	dc000215 	stw	r16,8(sp)
  80020c:	df000304 	addi	fp,sp,12
  800210:	e13ffe15 	stw	r4,-8(fp)
	int i;
	x[0] = 0;
  800214:	e0bffe17 	ldw	r2,-8(fp)
  800218:	10000015 	stw	zero,0(r2)

	for(i=1;i<N;i++) {
  80021c:	00800044 	movi	r2,1
  800220:	e0bffd15 	stw	r2,-12(fp)
  800224:	00001a06 	br	800290 <generateVector+0x94>
		x[i] = x[i-1] + (float) step;
  800228:	e0bffd17 	ldw	r2,-12(fp)
  80022c:	1085883a 	add	r2,r2,r2
  800230:	1085883a 	add	r2,r2,r2
  800234:	1007883a 	mov	r3,r2
  800238:	e0bffe17 	ldw	r2,-8(fp)
  80023c:	10e1883a 	add	r16,r2,r3
  800240:	e0fffd17 	ldw	r3,-12(fp)
  800244:	00900034 	movhi	r2,16384
  800248:	10bfffc4 	addi	r2,r2,-1
  80024c:	1885883a 	add	r2,r3,r2
  800250:	1085883a 	add	r2,r2,r2
  800254:	1085883a 	add	r2,r2,r2
  800258:	1007883a 	mov	r3,r2
  80025c:	e0bffe17 	ldw	r2,-8(fp)
  800260:	10c5883a 	add	r2,r2,r3
  800264:	10c00017 	ldw	r3,0(r2)
  800268:	014ea0f4 	movhi	r5,14979
  80026c:	29449bc4 	addi	r5,r5,4719
  800270:	1809883a 	mov	r4,r3
  800274:	08006300 	call	800630 <__addsf3>
  800278:	1007883a 	mov	r3,r2
  80027c:	1805883a 	mov	r2,r3
  800280:	80800015 	stw	r2,0(r16)
void generateVector(float x[N])
{
	int i;
	x[0] = 0;

	for(i=1;i<N;i++) {
  800284:	e0bffd17 	ldw	r2,-12(fp)
  800288:	10800044 	addi	r2,r2,1
  80028c:	e0bffd15 	stw	r2,-12(fp)
  800290:	e0fffd17 	ldw	r3,-12(fp)
  800294:	00800134 	movhi	r2,4
  800298:	10b90604 	addi	r2,r2,-7144
  80029c:	10ffe20e 	bge	r2,r3,800228 <__alt_data_end+0xff800228>
		x[i] = x[i-1] + (float) step;
	}
	return;
  8002a0:	0001883a 	nop
}
  8002a4:	e6ffff04 	addi	sp,fp,-4
  8002a8:	dfc00217 	ldw	ra,8(sp)
  8002ac:	df000117 	ldw	fp,4(sp)
  8002b0:	dc000017 	ldw	r16,0(sp)
  8002b4:	dec00304 	addi	sp,sp,12
  8002b8:	f800283a 	ret

008002bc <sumVector>:

float sumVector(float x[], int M)
{
  8002bc:	defff904 	addi	sp,sp,-28
  8002c0:	dfc00615 	stw	ra,24(sp)
  8002c4:	df000515 	stw	fp,20(sp)
  8002c8:	dc000415 	stw	r16,16(sp)
  8002cc:	df000504 	addi	fp,sp,20
  8002d0:	e13ffd15 	stw	r4,-12(fp)
  8002d4:	e17ffe15 	stw	r5,-8(fp)
	int i;
	float y = 0.0;
  8002d8:	e03ffc15 	stw	zero,-16(fp)

	if(M>N)
  8002dc:	e0fffe17 	ldw	r3,-8(fp)
  8002e0:	00800134 	movhi	r2,4
  8002e4:	10b90644 	addi	r2,r2,-7143
  8002e8:	10c0030e 	bge	r2,r3,8002f8 <sumVector+0x3c>
		M = N;
  8002ec:	00800134 	movhi	r2,4
  8002f0:	10b90644 	addi	r2,r2,-7143
  8002f4:	e0bffe15 	stw	r2,-8(fp)

	for(i=0;i<M;i++)
  8002f8:	e03ffb15 	stw	zero,-20(fp)
  8002fc:	00002706 	br	80039c <sumVector+0xe0>
		y += x[i] + x[i]*x[i];
  800300:	e0bffb17 	ldw	r2,-20(fp)
  800304:	1085883a 	add	r2,r2,r2
  800308:	1085883a 	add	r2,r2,r2
  80030c:	1007883a 	mov	r3,r2
  800310:	e0bffd17 	ldw	r2,-12(fp)
  800314:	10c5883a 	add	r2,r2,r3
  800318:	14000017 	ldw	r16,0(r2)
  80031c:	e0bffb17 	ldw	r2,-20(fp)
  800320:	1085883a 	add	r2,r2,r2
  800324:	1085883a 	add	r2,r2,r2
  800328:	1007883a 	mov	r3,r2
  80032c:	e0bffd17 	ldw	r2,-12(fp)
  800330:	10c5883a 	add	r2,r2,r3
  800334:	10c00017 	ldw	r3,0(r2)
  800338:	e0bffb17 	ldw	r2,-20(fp)
  80033c:	1085883a 	add	r2,r2,r2
  800340:	1085883a 	add	r2,r2,r2
  800344:	1009883a 	mov	r4,r2
  800348:	e0bffd17 	ldw	r2,-12(fp)
  80034c:	1105883a 	add	r2,r2,r4
  800350:	11000017 	ldw	r4,0(r2)
  800354:	200b883a 	mov	r5,r4
  800358:	1809883a 	mov	r4,r3
  80035c:	0800f380 	call	800f38 <__mulsf3>
  800360:	1007883a 	mov	r3,r2
  800364:	1805883a 	mov	r2,r3
  800368:	100b883a 	mov	r5,r2
  80036c:	8009883a 	mov	r4,r16
  800370:	08006300 	call	800630 <__addsf3>
  800374:	1007883a 	mov	r3,r2
  800378:	1805883a 	mov	r2,r3
  80037c:	100b883a 	mov	r5,r2
  800380:	e13ffc17 	ldw	r4,-16(fp)
  800384:	08006300 	call	800630 <__addsf3>
  800388:	1007883a 	mov	r3,r2
  80038c:	e0fffc15 	stw	r3,-16(fp)
	float y = 0.0;

	if(M>N)
		M = N;

	for(i=0;i<M;i++)
  800390:	e0bffb17 	ldw	r2,-20(fp)
  800394:	10800044 	addi	r2,r2,1
  800398:	e0bffb15 	stw	r2,-20(fp)
  80039c:	e0fffb17 	ldw	r3,-20(fp)
  8003a0:	e0bffe17 	ldw	r2,-8(fp)
  8003a4:	18bfd616 	blt	r3,r2,800300 <__alt_data_end+0xff800300>
		y += x[i] + x[i]*x[i];

	return y;
  8003a8:	e0bffc17 	ldw	r2,-16(fp)
  8003ac:	1007883a 	mov	r3,r2
}
  8003b0:	1805883a 	mov	r2,r3
  8003b4:	e6ffff04 	addi	sp,fp,-4
  8003b8:	dfc00217 	ldw	ra,8(sp)
  8003bc:	df000117 	ldw	fp,4(sp)
  8003c0:	dc000017 	ldw	r16,0(sp)
  8003c4:	dec00304 	addi	sp,sp,12
  8003c8:	f800283a 	ret

008003cc <main>:

int main()
{
  8003cc:	defffe04 	addi	sp,sp,-8
  8003d0:	dfc00115 	stw	ra,4(sp)
  8003d4:	df000015 	stw	fp,0(sp)
  8003d8:	d839883a 	mov	fp,sp
  8003dc:	023ffc34 	movhi	r8,65520
  8003e0:	421bd604 	addi	r8,r8,28504
  8003e4:	da37883a 	add	sp,sp,r8
  printf("Task 2!\n");
  8003e8:	01002074 	movhi	r4,129
  8003ec:	21258104 	addi	r4,r4,-27132
  8003f0:	08018180 	call	801818 <puts>
  float x[(int) N];
  float y;
  clock_t exec_t1, exec_t2;


  printf("generating vector...\n");
  8003f4:	01002074 	movhi	r4,129
  8003f8:	21258304 	addi	r4,r4,-27124
  8003fc:	08018180 	call	801818 <puts>

  exec_t1 = times(NULL);
  800400:	0009883a 	mov	r4,zero
  800404:	0807ef80 	call	807ef8 <times>
  800408:	00fffc34 	movhi	r3,65520
  80040c:	18dbd804 	addi	r3,r3,28512
  800410:	1f07883a 	add	r3,r3,fp
  800414:	18800015 	stw	r2,0(r3)
  generateVector(x);
  800418:	013ffc34 	movhi	r4,65520
  80041c:	211bda04 	addi	r4,r4,28520
  800420:	e105883a 	add	r2,fp,r4
  800424:	1009883a 	mov	r4,r2
  800428:	08001fc0 	call	8001fc <generateVector>
  exec_t2 = times(NULL);
  80042c:	0009883a 	mov	r4,zero
  800430:	0807ef80 	call	807ef8 <times>
  800434:	00fffc34 	movhi	r3,65520
  800438:	18dbd904 	addi	r3,r3,28516
  80043c:	1f07883a 	add	r3,r3,fp
  800440:	18800015 	stw	r2,0(r3)

  printf("time elapsed(gen): %d ticks\n", (int) (exec_t2 - exec_t1));
  800444:	013ffc34 	movhi	r4,65520
  800448:	211bd904 	addi	r4,r4,28516
  80044c:	2709883a 	add	r4,r4,fp
  800450:	20c00017 	ldw	r3,0(r4)
  800454:	013ffc34 	movhi	r4,65520
  800458:	211bd804 	addi	r4,r4,28512
  80045c:	2709883a 	add	r4,r4,fp
  800460:	20800017 	ldw	r2,0(r4)
  800464:	1885c83a 	sub	r2,r3,r2
  800468:	100b883a 	mov	r5,r2
  80046c:	01002074 	movhi	r4,129
  800470:	21258904 	addi	r4,r4,-27100
  800474:	080174c0 	call	80174c <printf>
  char buf[50];
  printf("time starts now...");
  800478:	01002074 	movhi	r4,129
  80047c:	21259104 	addi	r4,r4,-27068
  800480:	080174c0 	call	80174c <printf>

  exec_t1 = times(NULL);
  800484:	0009883a 	mov	r4,zero
  800488:	0807ef80 	call	807ef8 <times>
  80048c:	00fffc34 	movhi	r3,65520
  800490:	18dbd804 	addi	r3,r3,28512
  800494:	1f07883a 	add	r3,r3,fp
  800498:	18800015 	stw	r2,0(r3)
  y = sumVector(x, N);
  80049c:	013ffc34 	movhi	r4,65520
  8004a0:	211bda04 	addi	r4,r4,28520
  8004a4:	e105883a 	add	r2,fp,r4
  8004a8:	01400134 	movhi	r5,4
  8004ac:	29790644 	addi	r5,r5,-7143
  8004b0:	1009883a 	mov	r4,r2
  8004b4:	08002bc0 	call	8002bc <sumVector>
  8004b8:	00fffc34 	movhi	r3,65520
  8004bc:	18dbd604 	addi	r3,r3,28504
  8004c0:	1f07883a 	add	r3,r3,fp
  8004c4:	18800015 	stw	r2,0(r3)
  exec_t2 = times(NULL);
  8004c8:	0009883a 	mov	r4,zero
  8004cc:	0807ef80 	call	807ef8 <times>
  8004d0:	013ffc34 	movhi	r4,65520
  8004d4:	211bd904 	addi	r4,r4,28516
  8004d8:	2709883a 	add	r4,r4,fp
  8004dc:	20800015 	stw	r2,0(r4)

  printf("done.\n");
  8004e0:	01002074 	movhi	r4,129
  8004e4:	21259604 	addi	r4,r4,-27048
  8004e8:	08018180 	call	801818 <puts>

  //gcvt((exec_t2 - exec_t1), 10, buf);
  //alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");

  printf("time elapsed(sum): %d ticks\n", (int) (exec_t2 - exec_t1));
  8004ec:	00bffc34 	movhi	r2,65520
  8004f0:	109bd904 	addi	r2,r2,28516
  8004f4:	1705883a 	add	r2,r2,fp
  8004f8:	10c00017 	ldw	r3,0(r2)
  8004fc:	013ffc34 	movhi	r4,65520
  800500:	211bd804 	addi	r4,r4,28512
  800504:	2709883a 	add	r4,r4,fp
  800508:	20800017 	ldw	r2,0(r4)
  80050c:	1885c83a 	sub	r2,r3,r2
  800510:	100b883a 	mov	r5,r2
  800514:	01002074 	movhi	r4,129
  800518:	21259804 	addi	r4,r4,-27040
  80051c:	080174c0 	call	80174c <printf>
  int i;
  for(i=0;i<10;i++)
  800520:	00bffc34 	movhi	r2,65520
  800524:	109bd704 	addi	r2,r2,28508
  800528:	1705883a 	add	r2,r2,fp
  80052c:	10000015 	stw	zero,0(r2)
  800530:	00001406 	br	800584 <main+0x1b8>
	  y /= 2.0;
  800534:	01500034 	movhi	r5,16384
  800538:	00fffc34 	movhi	r3,65520
  80053c:	18dbd604 	addi	r3,r3,28504
  800540:	1f07883a 	add	r3,r3,fp
  800544:	19000017 	ldw	r4,0(r3)
  800548:	0800af80 	call	800af8 <__divsf3>
  80054c:	1007883a 	mov	r3,r2
  800550:	013ffc34 	movhi	r4,65520
  800554:	211bd604 	addi	r4,r4,28504
  800558:	2709883a 	add	r4,r4,fp
  80055c:	20c00015 	stw	r3,0(r4)
  //gcvt((exec_t2 - exec_t1), 10, buf);
  //alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");

  printf("time elapsed(sum): %d ticks\n", (int) (exec_t2 - exec_t1));
  int i;
  for(i=0;i<10;i++)
  800560:	00fffc34 	movhi	r3,65520
  800564:	18dbd704 	addi	r3,r3,28508
  800568:	1f07883a 	add	r3,r3,fp
  80056c:	18800017 	ldw	r2,0(r3)
  800570:	10800044 	addi	r2,r2,1
  800574:	013ffc34 	movhi	r4,65520
  800578:	211bd704 	addi	r4,r4,28508
  80057c:	2709883a 	add	r4,r4,fp
  800580:	20800015 	stw	r2,0(r4)
  800584:	00fffc34 	movhi	r3,65520
  800588:	18dbd704 	addi	r3,r3,28508
  80058c:	1f07883a 	add	r3,r3,fp
  800590:	18800017 	ldw	r2,0(r3)
  800594:	10800290 	cmplti	r2,r2,10
  800598:	103fe61e 	bne	r2,zero,800534 <__alt_data_end+0xff800534>
	  y /= 2.0;

  gcvt(((int) y), 10, buf);
  80059c:	00bffc34 	movhi	r2,65520
  8005a0:	109bd604 	addi	r2,r2,28504
  8005a4:	1705883a 	add	r2,r2,fp
  8005a8:	11000017 	ldw	r4,0(r2)
  8005ac:	08013680 	call	801368 <__fixsfsi>
  8005b0:	1009883a 	mov	r4,r2
  8005b4:	08013d80 	call	8013d8 <__floatsidf>
  8005b8:	1011883a 	mov	r8,r2
  8005bc:	1813883a 	mov	r9,r3
  8005c0:	00800434 	movhi	r2,16
  8005c4:	10a41d04 	addi	r2,r2,-28556
  8005c8:	00fffc34 	movhi	r3,65520
  8005cc:	18dbd604 	addi	r3,r3,28504
  8005d0:	1f07883a 	add	r3,r3,fp
  8005d4:	1885883a 	add	r2,r3,r2
  8005d8:	100f883a 	mov	r7,r2
  8005dc:	01800284 	movi	r6,10
  8005e0:	4009883a 	mov	r4,r8
  8005e4:	480b883a 	mov	r5,r9
  8005e8:	08016300 	call	801630 <gcvt>
  alt_putstr(" Result (divided by 1024) = "); alt_putstr(buf);
  8005ec:	01002074 	movhi	r4,129
  8005f0:	2125a004 	addi	r4,r4,-27008
  8005f4:	0807db40 	call	807db4 <alt_putstr>
  8005f8:	00800434 	movhi	r2,16
  8005fc:	10a41d04 	addi	r2,r2,-28556
  800600:	013ffc34 	movhi	r4,65520
  800604:	211bd604 	addi	r4,r4,28504
  800608:	2709883a 	add	r4,r4,fp
  80060c:	2085883a 	add	r2,r4,r2
  800610:	1009883a 	mov	r4,r2
  800614:	0807db40 	call	807db4 <alt_putstr>


  return 0;
  800618:	0005883a 	mov	r2,zero
}
  80061c:	e037883a 	mov	sp,fp
  800620:	dfc00117 	ldw	ra,4(sp)
  800624:	df000017 	ldw	fp,0(sp)
  800628:	dec00204 	addi	sp,sp,8
  80062c:	f800283a 	ret

00800630 <__addsf3>:
  800630:	defffc04 	addi	sp,sp,-16
  800634:	2004d7fa 	srli	r2,r4,31
  800638:	280cd5fa 	srli	r6,r5,23
  80063c:	dc000015 	stw	r16,0(sp)
  800640:	00c02034 	movhi	r3,128
  800644:	2020d5fa 	srli	r16,r4,23
  800648:	280ed7fa 	srli	r7,r5,31
  80064c:	18ffffc4 	addi	r3,r3,-1
  800650:	dc400115 	stw	r17,4(sp)
  800654:	1908703a 	and	r4,r3,r4
  800658:	194a703a 	and	r5,r3,r5
  80065c:	dfc00315 	stw	ra,12(sp)
  800660:	dc800215 	stw	r18,8(sp)
  800664:	14403fcc 	andi	r17,r2,255
  800668:	84003fcc 	andi	r16,r16,255
  80066c:	200890fa 	slli	r4,r4,3
  800670:	31803fcc 	andi	r6,r6,255
  800674:	280a90fa 	slli	r5,r5,3
  800678:	89c05026 	beq	r17,r7,8007bc <__addsf3+0x18c>
  80067c:	8185c83a 	sub	r2,r16,r6
  800680:	00807a0e 	bge	zero,r2,80086c <__addsf3+0x23c>
  800684:	30001e1e 	bne	r6,zero,800700 <__addsf3+0xd0>
  800688:	28006d1e 	bne	r5,zero,800840 <__addsf3+0x210>
  80068c:	208001cc 	andi	r2,r4,7
  800690:	10000426 	beq	r2,zero,8006a4 <__addsf3+0x74>
  800694:	208003cc 	andi	r2,r4,15
  800698:	00c00104 	movi	r3,4
  80069c:	10c00126 	beq	r2,r3,8006a4 <__addsf3+0x74>
  8006a0:	20c9883a 	add	r4,r4,r3
  8006a4:	2081002c 	andhi	r2,r4,1024
  8006a8:	10003926 	beq	r2,zero,800790 <__addsf3+0x160>
  8006ac:	84000044 	addi	r16,r16,1
  8006b0:	00803fc4 	movi	r2,255
  8006b4:	80807826 	beq	r16,r2,800898 <__addsf3+0x268>
  8006b8:	200891ba 	slli	r4,r4,6
  8006bc:	8805883a 	mov	r2,r17
  8006c0:	2008d27a 	srli	r4,r4,9
  8006c4:	84003fcc 	andi	r16,r16,255
  8006c8:	800695fa 	slli	r3,r16,23
  8006cc:	10803fcc 	andi	r2,r2,255
  8006d0:	04002034 	movhi	r16,128
  8006d4:	843fffc4 	addi	r16,r16,-1
  8006d8:	100497fa 	slli	r2,r2,31
  8006dc:	2408703a 	and	r4,r4,r16
  8006e0:	20e0b03a 	or	r16,r4,r3
  8006e4:	8084b03a 	or	r2,r16,r2
  8006e8:	dfc00317 	ldw	ra,12(sp)
  8006ec:	dc800217 	ldw	r18,8(sp)
  8006f0:	dc400117 	ldw	r17,4(sp)
  8006f4:	dc000017 	ldw	r16,0(sp)
  8006f8:	dec00404 	addi	sp,sp,16
  8006fc:	f800283a 	ret
  800700:	00c03fc4 	movi	r3,255
  800704:	80ffe126 	beq	r16,r3,80068c <__alt_data_end+0xff80068c>
  800708:	29410034 	orhi	r5,r5,1024
  80070c:	00c006c4 	movi	r3,27
  800710:	18807516 	blt	r3,r2,8008e8 <__addsf3+0x2b8>
  800714:	00c00804 	movi	r3,32
  800718:	1887c83a 	sub	r3,r3,r2
  80071c:	28c6983a 	sll	r3,r5,r3
  800720:	288ad83a 	srl	r5,r5,r2
  800724:	1804c03a 	cmpne	r2,r3,zero
  800728:	288ab03a 	or	r5,r5,r2
  80072c:	2149c83a 	sub	r4,r4,r5
  800730:	2081002c 	andhi	r2,r4,1024
  800734:	10001426 	beq	r2,zero,800788 <__addsf3+0x158>
  800738:	04810034 	movhi	r18,1024
  80073c:	94bfffc4 	addi	r18,r18,-1
  800740:	24a4703a 	and	r18,r4,r18
  800744:	9009883a 	mov	r4,r18
  800748:	08014b40 	call	8014b4 <__clzsi2>
  80074c:	10bffec4 	addi	r2,r2,-5
  800750:	90a4983a 	sll	r18,r18,r2
  800754:	14005416 	blt	r2,r16,8008a8 <__addsf3+0x278>
  800758:	1405c83a 	sub	r2,r2,r16
  80075c:	11000044 	addi	r4,r2,1
  800760:	00800804 	movi	r2,32
  800764:	1105c83a 	sub	r2,r2,r4
  800768:	9084983a 	sll	r2,r18,r2
  80076c:	9124d83a 	srl	r18,r18,r4
  800770:	0021883a 	mov	r16,zero
  800774:	1008c03a 	cmpne	r4,r2,zero
  800778:	9108b03a 	or	r4,r18,r4
  80077c:	003fc306 	br	80068c <__alt_data_end+0xff80068c>
  800780:	1000db26 	beq	r2,zero,800af0 <__addsf3+0x4c0>
  800784:	1009883a 	mov	r4,r2
  800788:	208001cc 	andi	r2,r4,7
  80078c:	103fc11e 	bne	r2,zero,800694 <__alt_data_end+0xff800694>
  800790:	2006d0fa 	srli	r3,r4,3
  800794:	01003fc4 	movi	r4,255
  800798:	8805883a 	mov	r2,r17
  80079c:	8100241e 	bne	r16,r4,800830 <__addsf3+0x200>
  8007a0:	18006e26 	beq	r3,zero,80095c <__addsf3+0x32c>
  8007a4:	19001034 	orhi	r4,r3,64
  8007a8:	00c02034 	movhi	r3,128
  8007ac:	18ffffc4 	addi	r3,r3,-1
  8007b0:	043fffc4 	movi	r16,-1
  8007b4:	20c8703a 	and	r4,r4,r3
  8007b8:	003fc206 	br	8006c4 <__alt_data_end+0xff8006c4>
  8007bc:	8187c83a 	sub	r3,r16,r6
  8007c0:	00c03e0e 	bge	zero,r3,8008bc <__addsf3+0x28c>
  8007c4:	30002326 	beq	r6,zero,800854 <__addsf3+0x224>
  8007c8:	01803fc4 	movi	r6,255
  8007cc:	81bfaf26 	beq	r16,r6,80068c <__alt_data_end+0xff80068c>
  8007d0:	29410034 	orhi	r5,r5,1024
  8007d4:	018006c4 	movi	r6,27
  8007d8:	30c07416 	blt	r6,r3,8009ac <__addsf3+0x37c>
  8007dc:	01800804 	movi	r6,32
  8007e0:	30cdc83a 	sub	r6,r6,r3
  8007e4:	298c983a 	sll	r6,r5,r6
  8007e8:	28cad83a 	srl	r5,r5,r3
  8007ec:	3006c03a 	cmpne	r3,r6,zero
  8007f0:	28cab03a 	or	r5,r5,r3
  8007f4:	2149883a 	add	r4,r4,r5
  8007f8:	20c1002c 	andhi	r3,r4,1024
  8007fc:	183fe226 	beq	r3,zero,800788 <__alt_data_end+0xff800788>
  800800:	84000044 	addi	r16,r16,1
  800804:	00c03fc4 	movi	r3,255
  800808:	80c05426 	beq	r16,r3,80095c <__addsf3+0x32c>
  80080c:	00bf0034 	movhi	r2,64512
  800810:	10bfffc4 	addi	r2,r2,-1
  800814:	20c0004c 	andi	r3,r4,1
  800818:	2088703a 	and	r4,r4,r2
  80081c:	2008d07a 	srli	r4,r4,1
  800820:	20c8b03a 	or	r4,r4,r3
  800824:	003f9906 	br	80068c <__alt_data_end+0xff80068c>
  800828:	0007883a 	mov	r3,zero
  80082c:	0005883a 	mov	r2,zero
  800830:	01002034 	movhi	r4,128
  800834:	213fffc4 	addi	r4,r4,-1
  800838:	1908703a 	and	r4,r3,r4
  80083c:	003fa106 	br	8006c4 <__alt_data_end+0xff8006c4>
  800840:	10bfffc4 	addi	r2,r2,-1
  800844:	103fb926 	beq	r2,zero,80072c <__alt_data_end+0xff80072c>
  800848:	00c03fc4 	movi	r3,255
  80084c:	80ffaf1e 	bne	r16,r3,80070c <__alt_data_end+0xff80070c>
  800850:	003f8e06 	br	80068c <__alt_data_end+0xff80068c>
  800854:	283f8d26 	beq	r5,zero,80068c <__alt_data_end+0xff80068c>
  800858:	18ffffc4 	addi	r3,r3,-1
  80085c:	183fe526 	beq	r3,zero,8007f4 <__alt_data_end+0xff8007f4>
  800860:	01803fc4 	movi	r6,255
  800864:	81bfdb1e 	bne	r16,r6,8007d4 <__alt_data_end+0xff8007d4>
  800868:	003f8806 	br	80068c <__alt_data_end+0xff80068c>
  80086c:	1000201e 	bne	r2,zero,8008f0 <__addsf3+0x2c0>
  800870:	80800044 	addi	r2,r16,1
  800874:	10803fcc 	andi	r2,r2,255
  800878:	01800044 	movi	r6,1
  80087c:	3080450e 	bge	r6,r2,800994 <__addsf3+0x364>
  800880:	2165c83a 	sub	r18,r4,r5
  800884:	90c1002c 	andhi	r3,r18,1024
  800888:	18002b26 	beq	r3,zero,800938 <__addsf3+0x308>
  80088c:	2925c83a 	sub	r18,r5,r4
  800890:	3823883a 	mov	r17,r7
  800894:	003fab06 	br	800744 <__alt_data_end+0xff800744>
  800898:	8805883a 	mov	r2,r17
  80089c:	043fffc4 	movi	r16,-1
  8008a0:	0009883a 	mov	r4,zero
  8008a4:	003f8706 	br	8006c4 <__alt_data_end+0xff8006c4>
  8008a8:	013f0034 	movhi	r4,64512
  8008ac:	213fffc4 	addi	r4,r4,-1
  8008b0:	80a1c83a 	sub	r16,r16,r2
  8008b4:	9108703a 	and	r4,r18,r4
  8008b8:	003f7406 	br	80068c <__alt_data_end+0xff80068c>
  8008bc:	1800411e 	bne	r3,zero,8009c4 <__addsf3+0x394>
  8008c0:	80c00044 	addi	r3,r16,1
  8008c4:	19c03fcc 	andi	r7,r3,255
  8008c8:	01800044 	movi	r6,1
  8008cc:	31c0260e 	bge	r6,r7,800968 <__addsf3+0x338>
  8008d0:	01803fc4 	movi	r6,255
  8008d4:	19802126 	beq	r3,r6,80095c <__addsf3+0x32c>
  8008d8:	2149883a 	add	r4,r4,r5
  8008dc:	2008d07a 	srli	r4,r4,1
  8008e0:	1821883a 	mov	r16,r3
  8008e4:	003f6906 	br	80068c <__alt_data_end+0xff80068c>
  8008e8:	01400044 	movi	r5,1
  8008ec:	003f8f06 	br	80072c <__alt_data_end+0xff80072c>
  8008f0:	8000151e 	bne	r16,zero,800948 <__addsf3+0x318>
  8008f4:	20002f26 	beq	r4,zero,8009b4 <__addsf3+0x384>
  8008f8:	0084303a 	nor	r2,zero,r2
  8008fc:	10000a26 	beq	r2,zero,800928 <__addsf3+0x2f8>
  800900:	00c03fc4 	movi	r3,255
  800904:	30c02b26 	beq	r6,r3,8009b4 <__addsf3+0x384>
  800908:	00c006c4 	movi	r3,27
  80090c:	18806d16 	blt	r3,r2,800ac4 <__addsf3+0x494>
  800910:	00c00804 	movi	r3,32
  800914:	1887c83a 	sub	r3,r3,r2
  800918:	20c6983a 	sll	r3,r4,r3
  80091c:	2084d83a 	srl	r2,r4,r2
  800920:	1808c03a 	cmpne	r4,r3,zero
  800924:	1108b03a 	or	r4,r2,r4
  800928:	2909c83a 	sub	r4,r5,r4
  80092c:	3021883a 	mov	r16,r6
  800930:	3823883a 	mov	r17,r7
  800934:	003f7e06 	br	800730 <__alt_data_end+0xff800730>
  800938:	903f821e 	bne	r18,zero,800744 <__alt_data_end+0xff800744>
  80093c:	0005883a 	mov	r2,zero
  800940:	0021883a 	mov	r16,zero
  800944:	003fba06 	br	800830 <__alt_data_end+0xff800830>
  800948:	00c03fc4 	movi	r3,255
  80094c:	30c01926 	beq	r6,r3,8009b4 <__addsf3+0x384>
  800950:	0085c83a 	sub	r2,zero,r2
  800954:	21010034 	orhi	r4,r4,1024
  800958:	003feb06 	br	800908 <__alt_data_end+0xff800908>
  80095c:	043fffc4 	movi	r16,-1
  800960:	0009883a 	mov	r4,zero
  800964:	003f5706 	br	8006c4 <__alt_data_end+0xff8006c4>
  800968:	80004a1e 	bne	r16,zero,800a94 <__addsf3+0x464>
  80096c:	20005926 	beq	r4,zero,800ad4 <__addsf3+0x4a4>
  800970:	283f4626 	beq	r5,zero,80068c <__alt_data_end+0xff80068c>
  800974:	2149883a 	add	r4,r4,r5
  800978:	2081002c 	andhi	r2,r4,1024
  80097c:	103f8226 	beq	r2,zero,800788 <__alt_data_end+0xff800788>
  800980:	00bf0034 	movhi	r2,64512
  800984:	10bfffc4 	addi	r2,r2,-1
  800988:	3021883a 	mov	r16,r6
  80098c:	2088703a 	and	r4,r4,r2
  800990:	003f3e06 	br	80068c <__alt_data_end+0xff80068c>
  800994:	8000121e 	bne	r16,zero,8009e0 <__addsf3+0x3b0>
  800998:	2000261e 	bne	r4,zero,800a34 <__addsf3+0x404>
  80099c:	283fa226 	beq	r5,zero,800828 <__alt_data_end+0xff800828>
  8009a0:	2809883a 	mov	r4,r5
  8009a4:	3823883a 	mov	r17,r7
  8009a8:	003f3806 	br	80068c <__alt_data_end+0xff80068c>
  8009ac:	01400044 	movi	r5,1
  8009b0:	003f9006 	br	8007f4 <__alt_data_end+0xff8007f4>
  8009b4:	2809883a 	mov	r4,r5
  8009b8:	3021883a 	mov	r16,r6
  8009bc:	3823883a 	mov	r17,r7
  8009c0:	003f3206 	br	80068c <__alt_data_end+0xff80068c>
  8009c4:	80000c1e 	bne	r16,zero,8009f8 <__addsf3+0x3c8>
  8009c8:	20002f26 	beq	r4,zero,800a88 <__addsf3+0x458>
  8009cc:	00c6303a 	nor	r3,zero,r3
  8009d0:	18002b1e 	bne	r3,zero,800a80 <__addsf3+0x450>
  8009d4:	2149883a 	add	r4,r4,r5
  8009d8:	3021883a 	mov	r16,r6
  8009dc:	003f8606 	br	8007f8 <__alt_data_end+0xff8007f8>
  8009e0:	20001b1e 	bne	r4,zero,800a50 <__addsf3+0x420>
  8009e4:	28003926 	beq	r5,zero,800acc <__addsf3+0x49c>
  8009e8:	2809883a 	mov	r4,r5
  8009ec:	3823883a 	mov	r17,r7
  8009f0:	04003fc4 	movi	r16,255
  8009f4:	003f2506 	br	80068c <__alt_data_end+0xff80068c>
  8009f8:	01c03fc4 	movi	r7,255
  8009fc:	31c02226 	beq	r6,r7,800a88 <__addsf3+0x458>
  800a00:	00c7c83a 	sub	r3,zero,r3
  800a04:	21010034 	orhi	r4,r4,1024
  800a08:	01c006c4 	movi	r7,27
  800a0c:	38c03616 	blt	r7,r3,800ae8 <__addsf3+0x4b8>
  800a10:	01c00804 	movi	r7,32
  800a14:	38cfc83a 	sub	r7,r7,r3
  800a18:	21ce983a 	sll	r7,r4,r7
  800a1c:	20c6d83a 	srl	r3,r4,r3
  800a20:	3808c03a 	cmpne	r4,r7,zero
  800a24:	1906b03a 	or	r3,r3,r4
  800a28:	1949883a 	add	r4,r3,r5
  800a2c:	3021883a 	mov	r16,r6
  800a30:	003f7106 	br	8007f8 <__alt_data_end+0xff8007f8>
  800a34:	283f1526 	beq	r5,zero,80068c <__alt_data_end+0xff80068c>
  800a38:	2145c83a 	sub	r2,r4,r5
  800a3c:	10c1002c 	andhi	r3,r2,1024
  800a40:	183f4f26 	beq	r3,zero,800780 <__alt_data_end+0xff800780>
  800a44:	2909c83a 	sub	r4,r5,r4
  800a48:	3823883a 	mov	r17,r7
  800a4c:	003f0f06 	br	80068c <__alt_data_end+0xff80068c>
  800a50:	28001a26 	beq	r5,zero,800abc <__addsf3+0x48c>
  800a54:	2008d0fa 	srli	r4,r4,3
  800a58:	2080102c 	andhi	r2,r4,64
  800a5c:	10000526 	beq	r2,zero,800a74 <__addsf3+0x444>
  800a60:	280ad0fa 	srli	r5,r5,3
  800a64:	2880102c 	andhi	r2,r5,64
  800a68:	1000021e 	bne	r2,zero,800a74 <__addsf3+0x444>
  800a6c:	2809883a 	mov	r4,r5
  800a70:	3823883a 	mov	r17,r7
  800a74:	200890fa 	slli	r4,r4,3
  800a78:	04003fc4 	movi	r16,255
  800a7c:	003f0306 	br	80068c <__alt_data_end+0xff80068c>
  800a80:	01c03fc4 	movi	r7,255
  800a84:	31ffe01e 	bne	r6,r7,800a08 <__alt_data_end+0xff800a08>
  800a88:	2809883a 	mov	r4,r5
  800a8c:	3021883a 	mov	r16,r6
  800a90:	003efe06 	br	80068c <__alt_data_end+0xff80068c>
  800a94:	20001126 	beq	r4,zero,800adc <__addsf3+0x4ac>
  800a98:	28000826 	beq	r5,zero,800abc <__addsf3+0x48c>
  800a9c:	2008d0fa 	srli	r4,r4,3
  800aa0:	2080102c 	andhi	r2,r4,64
  800aa4:	103ff326 	beq	r2,zero,800a74 <__alt_data_end+0xff800a74>
  800aa8:	280ad0fa 	srli	r5,r5,3
  800aac:	2880102c 	andhi	r2,r5,64
  800ab0:	103ff01e 	bne	r2,zero,800a74 <__alt_data_end+0xff800a74>
  800ab4:	2809883a 	mov	r4,r5
  800ab8:	003fee06 	br	800a74 <__alt_data_end+0xff800a74>
  800abc:	04003fc4 	movi	r16,255
  800ac0:	003ef206 	br	80068c <__alt_data_end+0xff80068c>
  800ac4:	01000044 	movi	r4,1
  800ac8:	003f9706 	br	800928 <__alt_data_end+0xff800928>
  800acc:	0005883a 	mov	r2,zero
  800ad0:	003f3406 	br	8007a4 <__alt_data_end+0xff8007a4>
  800ad4:	2809883a 	mov	r4,r5
  800ad8:	003eec06 	br	80068c <__alt_data_end+0xff80068c>
  800adc:	2809883a 	mov	r4,r5
  800ae0:	04003fc4 	movi	r16,255
  800ae4:	003ee906 	br	80068c <__alt_data_end+0xff80068c>
  800ae8:	00c00044 	movi	r3,1
  800aec:	003fce06 	br	800a28 <__alt_data_end+0xff800a28>
  800af0:	0005883a 	mov	r2,zero
  800af4:	003f4e06 	br	800830 <__alt_data_end+0xff800830>

00800af8 <__divsf3>:
  800af8:	defff504 	addi	sp,sp,-44
  800afc:	2004d5fa 	srli	r2,r4,23
  800b00:	dcc00415 	stw	r19,16(sp)
  800b04:	2026d7fa 	srli	r19,r4,31
  800b08:	01c02034 	movhi	r7,128
  800b0c:	dd800715 	stw	r22,28(sp)
  800b10:	dd000515 	stw	r20,20(sp)
  800b14:	dc800315 	stw	r18,12(sp)
  800b18:	39ffffc4 	addi	r7,r7,-1
  800b1c:	dfc00a15 	stw	ra,40(sp)
  800b20:	df000915 	stw	fp,36(sp)
  800b24:	ddc00815 	stw	r23,32(sp)
  800b28:	dd400615 	stw	r21,24(sp)
  800b2c:	dc400215 	stw	r17,8(sp)
  800b30:	dc000115 	stw	r16,4(sp)
  800b34:	15003fcc 	andi	r20,r2,255
  800b38:	3924703a 	and	r18,r7,r4
  800b3c:	9d803fcc 	andi	r22,r19,255
  800b40:	a0005226 	beq	r20,zero,800c8c <__divsf3+0x194>
  800b44:	00803fc4 	movi	r2,255
  800b48:	a0802e26 	beq	r20,r2,800c04 <__divsf3+0x10c>
  800b4c:	91002034 	orhi	r4,r18,128
  800b50:	202490fa 	slli	r18,r4,3
  800b54:	a53fe044 	addi	r20,r20,-127
  800b58:	0021883a 	mov	r16,zero
  800b5c:	002f883a 	mov	r23,zero
  800b60:	2804d5fa 	srli	r2,r5,23
  800b64:	282ad7fa 	srli	r21,r5,31
  800b68:	01c02034 	movhi	r7,128
  800b6c:	39ffffc4 	addi	r7,r7,-1
  800b70:	10803fcc 	andi	r2,r2,255
  800b74:	3962703a 	and	r17,r7,r5
  800b78:	af003fcc 	andi	fp,r21,255
  800b7c:	10004a26 	beq	r2,zero,800ca8 <__divsf3+0x1b0>
  800b80:	00c03fc4 	movi	r3,255
  800b84:	10c04526 	beq	r2,r3,800c9c <__divsf3+0x1a4>
  800b88:	89402034 	orhi	r5,r17,128
  800b8c:	282290fa 	slli	r17,r5,3
  800b90:	10bfe044 	addi	r2,r2,-127
  800b94:	000b883a 	mov	r5,zero
  800b98:	2c20b03a 	or	r16,r5,r16
  800b9c:	802090ba 	slli	r16,r16,2
  800ba0:	00c02034 	movhi	r3,128
  800ba4:	18c2f104 	addi	r3,r3,3012
  800ba8:	80e1883a 	add	r16,r16,r3
  800bac:	80c00017 	ldw	r3,0(r16)
  800bb0:	9d48f03a 	xor	r4,r19,r21
  800bb4:	200d883a 	mov	r6,r4
  800bb8:	22003fcc 	andi	r8,r4,255
  800bbc:	a085c83a 	sub	r2,r20,r2
  800bc0:	1800683a 	jmp	r3
  800bc4:	00800da8 	cmpgeui	r2,zero,54
  800bc8:	00800c2c 	andhi	r2,zero,48
  800bcc:	00800d9c 	xori	r2,zero,54
  800bd0:	00800c18 	cmpnei	r2,zero,48
  800bd4:	00800d9c 	xori	r2,zero,54
  800bd8:	00800d74 	movhi	r2,53
  800bdc:	00800d9c 	xori	r2,zero,54
  800be0:	00800c18 	cmpnei	r2,zero,48
  800be4:	00800c2c 	andhi	r2,zero,48
  800be8:	00800c2c 	andhi	r2,zero,48
  800bec:	00800d74 	movhi	r2,53
  800bf0:	00800c18 	cmpnei	r2,zero,48
  800bf4:	00800e88 	cmpgei	r2,zero,58
  800bf8:	00800e88 	cmpgei	r2,zero,58
  800bfc:	00800e88 	cmpgei	r2,zero,58
  800c00:	00800e3c 	xorhi	r2,zero,56
  800c04:	9000581e 	bne	r18,zero,800d68 <__divsf3+0x270>
  800c08:	04000204 	movi	r16,8
  800c0c:	05c00084 	movi	r23,2
  800c10:	003fd306 	br	800b60 <__alt_data_end+0xff800b60>
  800c14:	0023883a 	mov	r17,zero
  800c18:	e02d883a 	mov	r22,fp
  800c1c:	282f883a 	mov	r23,r5
  800c20:	00c00084 	movi	r3,2
  800c24:	b8c08f1e 	bne	r23,r3,800e64 <__divsf3+0x36c>
  800c28:	b011883a 	mov	r8,r22
  800c2c:	4180004c 	andi	r6,r8,1
  800c30:	013fffc4 	movi	r4,-1
  800c34:	000f883a 	mov	r7,zero
  800c38:	21003fcc 	andi	r4,r4,255
  800c3c:	200895fa 	slli	r4,r4,23
  800c40:	30803fcc 	andi	r2,r6,255
  800c44:	00c02034 	movhi	r3,128
  800c48:	100497fa 	slli	r2,r2,31
  800c4c:	18ffffc4 	addi	r3,r3,-1
  800c50:	38c6703a 	and	r3,r7,r3
  800c54:	1906b03a 	or	r3,r3,r4
  800c58:	1884b03a 	or	r2,r3,r2
  800c5c:	dfc00a17 	ldw	ra,40(sp)
  800c60:	df000917 	ldw	fp,36(sp)
  800c64:	ddc00817 	ldw	r23,32(sp)
  800c68:	dd800717 	ldw	r22,28(sp)
  800c6c:	dd400617 	ldw	r21,24(sp)
  800c70:	dd000517 	ldw	r20,20(sp)
  800c74:	dcc00417 	ldw	r19,16(sp)
  800c78:	dc800317 	ldw	r18,12(sp)
  800c7c:	dc400217 	ldw	r17,8(sp)
  800c80:	dc000117 	ldw	r16,4(sp)
  800c84:	dec00b04 	addi	sp,sp,44
  800c88:	f800283a 	ret
  800c8c:	90002b1e 	bne	r18,zero,800d3c <__divsf3+0x244>
  800c90:	04000104 	movi	r16,4
  800c94:	05c00044 	movi	r23,1
  800c98:	003fb106 	br	800b60 <__alt_data_end+0xff800b60>
  800c9c:	8800251e 	bne	r17,zero,800d34 <__divsf3+0x23c>
  800ca0:	01400084 	movi	r5,2
  800ca4:	00000206 	br	800cb0 <__divsf3+0x1b8>
  800ca8:	88001a1e 	bne	r17,zero,800d14 <__divsf3+0x21c>
  800cac:	01400044 	movi	r5,1
  800cb0:	8160b03a 	or	r16,r16,r5
  800cb4:	802090ba 	slli	r16,r16,2
  800cb8:	00c02034 	movhi	r3,128
  800cbc:	18c33504 	addi	r3,r3,3284
  800cc0:	80e1883a 	add	r16,r16,r3
  800cc4:	80c00017 	ldw	r3,0(r16)
  800cc8:	9d50f03a 	xor	r8,r19,r21
  800ccc:	a085c83a 	sub	r2,r20,r2
  800cd0:	1800683a 	jmp	r3
  800cd4:	00800c2c 	andhi	r2,zero,48
  800cd8:	00800c2c 	andhi	r2,zero,48
  800cdc:	00800e78 	rdprs	r2,zero,57
  800ce0:	00800c14 	movui	r2,48
  800ce4:	00800e78 	rdprs	r2,zero,57
  800ce8:	00800d74 	movhi	r2,53
  800cec:	00800e78 	rdprs	r2,zero,57
  800cf0:	00800c14 	movui	r2,48
  800cf4:	00800c2c 	andhi	r2,zero,48
  800cf8:	00800c2c 	andhi	r2,zero,48
  800cfc:	00800d74 	movhi	r2,53
  800d00:	00800c14 	movui	r2,48
  800d04:	00800e88 	cmpgei	r2,zero,58
  800d08:	00800e88 	cmpgei	r2,zero,58
  800d0c:	00800e88 	cmpgei	r2,zero,58
  800d10:	00800ea0 	cmpeqi	r2,zero,58
  800d14:	8809883a 	mov	r4,r17
  800d18:	08014b40 	call	8014b4 <__clzsi2>
  800d1c:	10fffec4 	addi	r3,r2,-5
  800d20:	88e2983a 	sll	r17,r17,r3
  800d24:	00ffe284 	movi	r3,-118
  800d28:	1885c83a 	sub	r2,r3,r2
  800d2c:	000b883a 	mov	r5,zero
  800d30:	003f9906 	br	800b98 <__alt_data_end+0xff800b98>
  800d34:	014000c4 	movi	r5,3
  800d38:	003f9706 	br	800b98 <__alt_data_end+0xff800b98>
  800d3c:	9009883a 	mov	r4,r18
  800d40:	d9400015 	stw	r5,0(sp)
  800d44:	08014b40 	call	8014b4 <__clzsi2>
  800d48:	10fffec4 	addi	r3,r2,-5
  800d4c:	053fe284 	movi	r20,-118
  800d50:	90e4983a 	sll	r18,r18,r3
  800d54:	a0a9c83a 	sub	r20,r20,r2
  800d58:	0021883a 	mov	r16,zero
  800d5c:	002f883a 	mov	r23,zero
  800d60:	d9400017 	ldw	r5,0(sp)
  800d64:	003f7e06 	br	800b60 <__alt_data_end+0xff800b60>
  800d68:	04000304 	movi	r16,12
  800d6c:	05c000c4 	movi	r23,3
  800d70:	003f7b06 	br	800b60 <__alt_data_end+0xff800b60>
  800d74:	01c02034 	movhi	r7,128
  800d78:	000d883a 	mov	r6,zero
  800d7c:	39ffffc4 	addi	r7,r7,-1
  800d80:	013fffc4 	movi	r4,-1
  800d84:	003fac06 	br	800c38 <__alt_data_end+0xff800c38>
  800d88:	01400044 	movi	r5,1
  800d8c:	2909c83a 	sub	r4,r5,r4
  800d90:	008006c4 	movi	r2,27
  800d94:	11004b0e 	bge	r2,r4,800ec4 <__divsf3+0x3cc>
  800d98:	414c703a 	and	r6,r8,r5
  800d9c:	0009883a 	mov	r4,zero
  800da0:	000f883a 	mov	r7,zero
  800da4:	003fa406 	br	800c38 <__alt_data_end+0xff800c38>
  800da8:	9006917a 	slli	r3,r18,5
  800dac:	880e917a 	slli	r7,r17,5
  800db0:	19c0372e 	bgeu	r3,r7,800e90 <__divsf3+0x398>
  800db4:	10bfffc4 	addi	r2,r2,-1
  800db8:	010006c4 	movi	r4,27
  800dbc:	000b883a 	mov	r5,zero
  800dc0:	180d883a 	mov	r6,r3
  800dc4:	294b883a 	add	r5,r5,r5
  800dc8:	18c7883a 	add	r3,r3,r3
  800dcc:	30000116 	blt	r6,zero,800dd4 <__divsf3+0x2dc>
  800dd0:	19c00236 	bltu	r3,r7,800ddc <__divsf3+0x2e4>
  800dd4:	19c7c83a 	sub	r3,r3,r7
  800dd8:	29400054 	ori	r5,r5,1
  800ddc:	213fffc4 	addi	r4,r4,-1
  800de0:	203ff71e 	bne	r4,zero,800dc0 <__alt_data_end+0xff800dc0>
  800de4:	1806c03a 	cmpne	r3,r3,zero
  800de8:	1962b03a 	or	r17,r3,r5
  800dec:	11001fc4 	addi	r4,r2,127
  800df0:	013fe50e 	bge	zero,r4,800d88 <__alt_data_end+0xff800d88>
  800df4:	88c001cc 	andi	r3,r17,7
  800df8:	18000426 	beq	r3,zero,800e0c <__divsf3+0x314>
  800dfc:	88c003cc 	andi	r3,r17,15
  800e00:	01400104 	movi	r5,4
  800e04:	19400126 	beq	r3,r5,800e0c <__divsf3+0x314>
  800e08:	8963883a 	add	r17,r17,r5
  800e0c:	88c2002c 	andhi	r3,r17,2048
  800e10:	18000426 	beq	r3,zero,800e24 <__divsf3+0x32c>
  800e14:	11002004 	addi	r4,r2,128
  800e18:	00be0034 	movhi	r2,63488
  800e1c:	10bfffc4 	addi	r2,r2,-1
  800e20:	88a2703a 	and	r17,r17,r2
  800e24:	00803f84 	movi	r2,254
  800e28:	113f8016 	blt	r2,r4,800c2c <__alt_data_end+0xff800c2c>
  800e2c:	880e91ba 	slli	r7,r17,6
  800e30:	4180004c 	andi	r6,r8,1
  800e34:	380ed27a 	srli	r7,r7,9
  800e38:	003f7f06 	br	800c38 <__alt_data_end+0xff800c38>
  800e3c:	9080102c 	andhi	r2,r18,64
  800e40:	10000226 	beq	r2,zero,800e4c <__divsf3+0x354>
  800e44:	8880102c 	andhi	r2,r17,64
  800e48:	10001826 	beq	r2,zero,800eac <__divsf3+0x3b4>
  800e4c:	00802034 	movhi	r2,128
  800e50:	91c01034 	orhi	r7,r18,64
  800e54:	10bfffc4 	addi	r2,r2,-1
  800e58:	980d883a 	mov	r6,r19
  800e5c:	388e703a 	and	r7,r7,r2
  800e60:	003fc706 	br	800d80 <__alt_data_end+0xff800d80>
  800e64:	00c000c4 	movi	r3,3
  800e68:	b8c02d26 	beq	r23,r3,800f20 <__divsf3+0x428>
  800e6c:	00c00044 	movi	r3,1
  800e70:	b011883a 	mov	r8,r22
  800e74:	b8ffdd1e 	bne	r23,r3,800dec <__alt_data_end+0xff800dec>
  800e78:	4180004c 	andi	r6,r8,1
  800e7c:	0009883a 	mov	r4,zero
  800e80:	000f883a 	mov	r7,zero
  800e84:	003f6c06 	br	800c38 <__alt_data_end+0xff800c38>
  800e88:	9023883a 	mov	r17,r18
  800e8c:	003f6406 	br	800c20 <__alt_data_end+0xff800c20>
  800e90:	19c7c83a 	sub	r3,r3,r7
  800e94:	01000684 	movi	r4,26
  800e98:	01400044 	movi	r5,1
  800e9c:	003fc806 	br	800dc0 <__alt_data_end+0xff800dc0>
  800ea0:	9080102c 	andhi	r2,r18,64
  800ea4:	103fe926 	beq	r2,zero,800e4c <__alt_data_end+0xff800e4c>
  800ea8:	0023883a 	mov	r17,zero
  800eac:	00802034 	movhi	r2,128
  800eb0:	89c01034 	orhi	r7,r17,64
  800eb4:	10bfffc4 	addi	r2,r2,-1
  800eb8:	a80d883a 	mov	r6,r21
  800ebc:	388e703a 	and	r7,r7,r2
  800ec0:	003faf06 	br	800d80 <__alt_data_end+0xff800d80>
  800ec4:	00800804 	movi	r2,32
  800ec8:	1105c83a 	sub	r2,r2,r4
  800ecc:	8884983a 	sll	r2,r17,r2
  800ed0:	890ad83a 	srl	r5,r17,r4
  800ed4:	1004c03a 	cmpne	r2,r2,zero
  800ed8:	288ab03a 	or	r5,r5,r2
  800edc:	288001cc 	andi	r2,r5,7
  800ee0:	10000426 	beq	r2,zero,800ef4 <__divsf3+0x3fc>
  800ee4:	288003cc 	andi	r2,r5,15
  800ee8:	00c00104 	movi	r3,4
  800eec:	10c00126 	beq	r2,r3,800ef4 <__divsf3+0x3fc>
  800ef0:	28cb883a 	add	r5,r5,r3
  800ef4:	2881002c 	andhi	r2,r5,1024
  800ef8:	10000426 	beq	r2,zero,800f0c <__divsf3+0x414>
  800efc:	4180004c 	andi	r6,r8,1
  800f00:	01000044 	movi	r4,1
  800f04:	000f883a 	mov	r7,zero
  800f08:	003f4b06 	br	800c38 <__alt_data_end+0xff800c38>
  800f0c:	280a91ba 	slli	r5,r5,6
  800f10:	4180004c 	andi	r6,r8,1
  800f14:	0009883a 	mov	r4,zero
  800f18:	280ed27a 	srli	r7,r5,9
  800f1c:	003f4606 	br	800c38 <__alt_data_end+0xff800c38>
  800f20:	00802034 	movhi	r2,128
  800f24:	89c01034 	orhi	r7,r17,64
  800f28:	10bfffc4 	addi	r2,r2,-1
  800f2c:	b00d883a 	mov	r6,r22
  800f30:	388e703a 	and	r7,r7,r2
  800f34:	003f9206 	br	800d80 <__alt_data_end+0xff800d80>

00800f38 <__mulsf3>:
  800f38:	defff504 	addi	sp,sp,-44
  800f3c:	dc000115 	stw	r16,4(sp)
  800f40:	2020d5fa 	srli	r16,r4,23
  800f44:	dd400615 	stw	r21,24(sp)
  800f48:	202ad7fa 	srli	r21,r4,31
  800f4c:	dc800315 	stw	r18,12(sp)
  800f50:	04802034 	movhi	r18,128
  800f54:	df000915 	stw	fp,36(sp)
  800f58:	dd000515 	stw	r20,20(sp)
  800f5c:	94bfffc4 	addi	r18,r18,-1
  800f60:	dfc00a15 	stw	ra,40(sp)
  800f64:	ddc00815 	stw	r23,32(sp)
  800f68:	dd800715 	stw	r22,28(sp)
  800f6c:	dcc00415 	stw	r19,16(sp)
  800f70:	dc400215 	stw	r17,8(sp)
  800f74:	84003fcc 	andi	r16,r16,255
  800f78:	9124703a 	and	r18,r18,r4
  800f7c:	a829883a 	mov	r20,r21
  800f80:	af003fcc 	andi	fp,r21,255
  800f84:	80005426 	beq	r16,zero,8010d8 <__mulsf3+0x1a0>
  800f88:	00803fc4 	movi	r2,255
  800f8c:	80802f26 	beq	r16,r2,80104c <__mulsf3+0x114>
  800f90:	91002034 	orhi	r4,r18,128
  800f94:	202490fa 	slli	r18,r4,3
  800f98:	843fe044 	addi	r16,r16,-127
  800f9c:	0023883a 	mov	r17,zero
  800fa0:	002f883a 	mov	r23,zero
  800fa4:	2804d5fa 	srli	r2,r5,23
  800fa8:	282cd7fa 	srli	r22,r5,31
  800fac:	01002034 	movhi	r4,128
  800fb0:	213fffc4 	addi	r4,r4,-1
  800fb4:	10803fcc 	andi	r2,r2,255
  800fb8:	2166703a 	and	r19,r4,r5
  800fbc:	b1803fcc 	andi	r6,r22,255
  800fc0:	10004c26 	beq	r2,zero,8010f4 <__mulsf3+0x1bc>
  800fc4:	00c03fc4 	movi	r3,255
  800fc8:	10c04726 	beq	r2,r3,8010e8 <__mulsf3+0x1b0>
  800fcc:	99002034 	orhi	r4,r19,128
  800fd0:	202690fa 	slli	r19,r4,3
  800fd4:	10bfe044 	addi	r2,r2,-127
  800fd8:	0007883a 	mov	r3,zero
  800fdc:	80a1883a 	add	r16,r16,r2
  800fe0:	010003c4 	movi	r4,15
  800fe4:	1c44b03a 	or	r2,r3,r17
  800fe8:	b56af03a 	xor	r21,r22,r21
  800fec:	81c00044 	addi	r7,r16,1
  800ff0:	20806b36 	bltu	r4,r2,8011a0 <__mulsf3+0x268>
  800ff4:	100490ba 	slli	r2,r2,2
  800ff8:	01002034 	movhi	r4,128
  800ffc:	21040304 	addi	r4,r4,4108
  801000:	1105883a 	add	r2,r2,r4
  801004:	10800017 	ldw	r2,0(r2)
  801008:	1000683a 	jmp	r2
  80100c:	008011a0 	cmpeqi	r2,zero,70
  801010:	00801060 	cmpeqi	r2,zero,65
  801014:	00801060 	cmpeqi	r2,zero,65
  801018:	0080105c 	xori	r2,zero,65
  80101c:	00801184 	movi	r2,70
  801020:	00801184 	movi	r2,70
  801024:	00801170 	cmpltui	r2,zero,69
  801028:	0080105c 	xori	r2,zero,65
  80102c:	00801184 	movi	r2,70
  801030:	00801170 	cmpltui	r2,zero,69
  801034:	00801184 	movi	r2,70
  801038:	0080105c 	xori	r2,zero,65
  80103c:	00801190 	cmplti	r2,zero,70
  801040:	00801190 	cmplti	r2,zero,70
  801044:	00801190 	cmplti	r2,zero,70
  801048:	008012a0 	cmpeqi	r2,zero,74
  80104c:	90003b1e 	bne	r18,zero,80113c <__mulsf3+0x204>
  801050:	04400204 	movi	r17,8
  801054:	05c00084 	movi	r23,2
  801058:	003fd206 	br	800fa4 <__alt_data_end+0xff800fa4>
  80105c:	302b883a 	mov	r21,r6
  801060:	00800084 	movi	r2,2
  801064:	18802626 	beq	r3,r2,801100 <__mulsf3+0x1c8>
  801068:	008000c4 	movi	r2,3
  80106c:	1880b826 	beq	r3,r2,801350 <__mulsf3+0x418>
  801070:	00800044 	movi	r2,1
  801074:	1880af1e 	bne	r3,r2,801334 <__mulsf3+0x3fc>
  801078:	a829883a 	mov	r20,r21
  80107c:	0007883a 	mov	r3,zero
  801080:	0009883a 	mov	r4,zero
  801084:	18803fcc 	andi	r2,r3,255
  801088:	100695fa 	slli	r3,r2,23
  80108c:	a0803fcc 	andi	r2,r20,255
  801090:	100a97fa 	slli	r5,r2,31
  801094:	00802034 	movhi	r2,128
  801098:	10bfffc4 	addi	r2,r2,-1
  80109c:	2084703a 	and	r2,r4,r2
  8010a0:	10c4b03a 	or	r2,r2,r3
  8010a4:	1144b03a 	or	r2,r2,r5
  8010a8:	dfc00a17 	ldw	ra,40(sp)
  8010ac:	df000917 	ldw	fp,36(sp)
  8010b0:	ddc00817 	ldw	r23,32(sp)
  8010b4:	dd800717 	ldw	r22,28(sp)
  8010b8:	dd400617 	ldw	r21,24(sp)
  8010bc:	dd000517 	ldw	r20,20(sp)
  8010c0:	dcc00417 	ldw	r19,16(sp)
  8010c4:	dc800317 	ldw	r18,12(sp)
  8010c8:	dc400217 	ldw	r17,8(sp)
  8010cc:	dc000117 	ldw	r16,4(sp)
  8010d0:	dec00b04 	addi	sp,sp,44
  8010d4:	f800283a 	ret
  8010d8:	90000d1e 	bne	r18,zero,801110 <__mulsf3+0x1d8>
  8010dc:	04400104 	movi	r17,4
  8010e0:	05c00044 	movi	r23,1
  8010e4:	003faf06 	br	800fa4 <__alt_data_end+0xff800fa4>
  8010e8:	9806c03a 	cmpne	r3,r19,zero
  8010ec:	18c00084 	addi	r3,r3,2
  8010f0:	003fba06 	br	800fdc <__alt_data_end+0xff800fdc>
  8010f4:	9800141e 	bne	r19,zero,801148 <__mulsf3+0x210>
  8010f8:	00c00044 	movi	r3,1
  8010fc:	003fb706 	br	800fdc <__alt_data_end+0xff800fdc>
  801100:	a829883a 	mov	r20,r21
  801104:	00ffffc4 	movi	r3,-1
  801108:	0009883a 	mov	r4,zero
  80110c:	003fdd06 	br	801084 <__alt_data_end+0xff801084>
  801110:	9009883a 	mov	r4,r18
  801114:	d9400015 	stw	r5,0(sp)
  801118:	08014b40 	call	8014b4 <__clzsi2>
  80111c:	10fffec4 	addi	r3,r2,-5
  801120:	043fe284 	movi	r16,-118
  801124:	90e4983a 	sll	r18,r18,r3
  801128:	80a1c83a 	sub	r16,r16,r2
  80112c:	0023883a 	mov	r17,zero
  801130:	002f883a 	mov	r23,zero
  801134:	d9400017 	ldw	r5,0(sp)
  801138:	003f9a06 	br	800fa4 <__alt_data_end+0xff800fa4>
  80113c:	04400304 	movi	r17,12
  801140:	05c000c4 	movi	r23,3
  801144:	003f9706 	br	800fa4 <__alt_data_end+0xff800fa4>
  801148:	9809883a 	mov	r4,r19
  80114c:	d9800015 	stw	r6,0(sp)
  801150:	08014b40 	call	8014b4 <__clzsi2>
  801154:	10fffec4 	addi	r3,r2,-5
  801158:	98e6983a 	sll	r19,r19,r3
  80115c:	00ffe284 	movi	r3,-118
  801160:	1885c83a 	sub	r2,r3,r2
  801164:	d9800017 	ldw	r6,0(sp)
  801168:	0007883a 	mov	r3,zero
  80116c:	003f9b06 	br	800fdc <__alt_data_end+0xff800fdc>
  801170:	01002034 	movhi	r4,128
  801174:	0029883a 	mov	r20,zero
  801178:	213fffc4 	addi	r4,r4,-1
  80117c:	00ffffc4 	movi	r3,-1
  801180:	003fc006 	br	801084 <__alt_data_end+0xff801084>
  801184:	9027883a 	mov	r19,r18
  801188:	b807883a 	mov	r3,r23
  80118c:	003fb406 	br	801060 <__alt_data_end+0xff801060>
  801190:	9027883a 	mov	r19,r18
  801194:	e02b883a 	mov	r21,fp
  801198:	b807883a 	mov	r3,r23
  80119c:	003fb006 	br	801060 <__alt_data_end+0xff801060>
  8011a0:	9028d43a 	srli	r20,r18,16
  8011a4:	982cd43a 	srli	r22,r19,16
  8011a8:	94bfffcc 	andi	r18,r18,65535
  8011ac:	9cffffcc 	andi	r19,r19,65535
  8011b0:	980b883a 	mov	r5,r19
  8011b4:	9009883a 	mov	r4,r18
  8011b8:	d9c00015 	stw	r7,0(sp)
  8011bc:	08015180 	call	801518 <__mulsi3>
  8011c0:	a00b883a 	mov	r5,r20
  8011c4:	9809883a 	mov	r4,r19
  8011c8:	1023883a 	mov	r17,r2
  8011cc:	08015180 	call	801518 <__mulsi3>
  8011d0:	a009883a 	mov	r4,r20
  8011d4:	b00b883a 	mov	r5,r22
  8011d8:	1027883a 	mov	r19,r2
  8011dc:	08015180 	call	801518 <__mulsi3>
  8011e0:	b00b883a 	mov	r5,r22
  8011e4:	9009883a 	mov	r4,r18
  8011e8:	1029883a 	mov	r20,r2
  8011ec:	08015180 	call	801518 <__mulsi3>
  8011f0:	8806d43a 	srli	r3,r17,16
  8011f4:	14c5883a 	add	r2,r2,r19
  8011f8:	d9c00017 	ldw	r7,0(sp)
  8011fc:	1885883a 	add	r2,r3,r2
  801200:	14c0022e 	bgeu	r2,r19,80120c <__mulsf3+0x2d4>
  801204:	00c00074 	movhi	r3,1
  801208:	a0e9883a 	add	r20,r20,r3
  80120c:	1026943a 	slli	r19,r2,16
  801210:	8c7fffcc 	andi	r17,r17,65535
  801214:	1004d43a 	srli	r2,r2,16
  801218:	9c63883a 	add	r17,r19,r17
  80121c:	882691ba 	slli	r19,r17,6
  801220:	1505883a 	add	r2,r2,r20
  801224:	8822d6ba 	srli	r17,r17,26
  801228:	100891ba 	slli	r4,r2,6
  80122c:	9826c03a 	cmpne	r19,r19,zero
  801230:	9c62b03a 	or	r17,r19,r17
  801234:	8926b03a 	or	r19,r17,r4
  801238:	9882002c 	andhi	r2,r19,2048
  80123c:	10000426 	beq	r2,zero,801250 <__mulsf3+0x318>
  801240:	9804d07a 	srli	r2,r19,1
  801244:	9900004c 	andi	r4,r19,1
  801248:	3821883a 	mov	r16,r7
  80124c:	1126b03a 	or	r19,r2,r4
  801250:	80c01fc4 	addi	r3,r16,127
  801254:	00c0210e 	bge	zero,r3,8012dc <__mulsf3+0x3a4>
  801258:	988001cc 	andi	r2,r19,7
  80125c:	10000426 	beq	r2,zero,801270 <__mulsf3+0x338>
  801260:	988003cc 	andi	r2,r19,15
  801264:	01000104 	movi	r4,4
  801268:	11000126 	beq	r2,r4,801270 <__mulsf3+0x338>
  80126c:	9927883a 	add	r19,r19,r4
  801270:	9882002c 	andhi	r2,r19,2048
  801274:	10000426 	beq	r2,zero,801288 <__mulsf3+0x350>
  801278:	00be0034 	movhi	r2,63488
  80127c:	10bfffc4 	addi	r2,r2,-1
  801280:	80c02004 	addi	r3,r16,128
  801284:	98a6703a 	and	r19,r19,r2
  801288:	00803f84 	movi	r2,254
  80128c:	10ff9c16 	blt	r2,r3,801100 <__alt_data_end+0xff801100>
  801290:	980891ba 	slli	r4,r19,6
  801294:	a829883a 	mov	r20,r21
  801298:	2008d27a 	srli	r4,r4,9
  80129c:	003f7906 	br	801084 <__alt_data_end+0xff801084>
  8012a0:	9080102c 	andhi	r2,r18,64
  8012a4:	10000826 	beq	r2,zero,8012c8 <__mulsf3+0x390>
  8012a8:	9880102c 	andhi	r2,r19,64
  8012ac:	1000061e 	bne	r2,zero,8012c8 <__mulsf3+0x390>
  8012b0:	00802034 	movhi	r2,128
  8012b4:	99001034 	orhi	r4,r19,64
  8012b8:	10bfffc4 	addi	r2,r2,-1
  8012bc:	b029883a 	mov	r20,r22
  8012c0:	2088703a 	and	r4,r4,r2
  8012c4:	003fad06 	br	80117c <__alt_data_end+0xff80117c>
  8012c8:	00802034 	movhi	r2,128
  8012cc:	91001034 	orhi	r4,r18,64
  8012d0:	10bfffc4 	addi	r2,r2,-1
  8012d4:	2088703a 	and	r4,r4,r2
  8012d8:	003fa806 	br	80117c <__alt_data_end+0xff80117c>
  8012dc:	00800044 	movi	r2,1
  8012e0:	10c7c83a 	sub	r3,r2,r3
  8012e4:	008006c4 	movi	r2,27
  8012e8:	10ff6316 	blt	r2,r3,801078 <__alt_data_end+0xff801078>
  8012ec:	00800804 	movi	r2,32
  8012f0:	10c5c83a 	sub	r2,r2,r3
  8012f4:	9884983a 	sll	r2,r19,r2
  8012f8:	98c6d83a 	srl	r3,r19,r3
  8012fc:	1004c03a 	cmpne	r2,r2,zero
  801300:	1884b03a 	or	r2,r3,r2
  801304:	10c001cc 	andi	r3,r2,7
  801308:	18000426 	beq	r3,zero,80131c <__mulsf3+0x3e4>
  80130c:	10c003cc 	andi	r3,r2,15
  801310:	01000104 	movi	r4,4
  801314:	19000126 	beq	r3,r4,80131c <__mulsf3+0x3e4>
  801318:	1105883a 	add	r2,r2,r4
  80131c:	10c1002c 	andhi	r3,r2,1024
  801320:	18000626 	beq	r3,zero,80133c <__mulsf3+0x404>
  801324:	a829883a 	mov	r20,r21
  801328:	00c00044 	movi	r3,1
  80132c:	0009883a 	mov	r4,zero
  801330:	003f5406 	br	801084 <__alt_data_end+0xff801084>
  801334:	3821883a 	mov	r16,r7
  801338:	003fc506 	br	801250 <__alt_data_end+0xff801250>
  80133c:	100491ba 	slli	r2,r2,6
  801340:	a829883a 	mov	r20,r21
  801344:	0007883a 	mov	r3,zero
  801348:	1008d27a 	srli	r4,r2,9
  80134c:	003f4d06 	br	801084 <__alt_data_end+0xff801084>
  801350:	00802034 	movhi	r2,128
  801354:	99001034 	orhi	r4,r19,64
  801358:	10bfffc4 	addi	r2,r2,-1
  80135c:	a829883a 	mov	r20,r21
  801360:	2088703a 	and	r4,r4,r2
  801364:	003f8506 	br	80117c <__alt_data_end+0xff80117c>

00801368 <__fixsfsi>:
  801368:	200ad5fa 	srli	r5,r4,23
  80136c:	00c02034 	movhi	r3,128
  801370:	18ffffc4 	addi	r3,r3,-1
  801374:	29403fcc 	andi	r5,r5,255
  801378:	00801f84 	movi	r2,126
  80137c:	1906703a 	and	r3,r3,r4
  801380:	2008d7fa 	srli	r4,r4,31
  801384:	11400e0e 	bge	r2,r5,8013c0 <__fixsfsi+0x58>
  801388:	00802744 	movi	r2,157
  80138c:	11400816 	blt	r2,r5,8013b0 <__fixsfsi+0x48>
  801390:	00802544 	movi	r2,149
  801394:	18c02034 	orhi	r3,r3,128
  801398:	11400b0e 	bge	r2,r5,8013c8 <__fixsfsi+0x60>
  80139c:	28bfda84 	addi	r2,r5,-150
  8013a0:	1884983a 	sll	r2,r3,r2
  8013a4:	20000726 	beq	r4,zero,8013c4 <__fixsfsi+0x5c>
  8013a8:	0085c83a 	sub	r2,zero,r2
  8013ac:	f800283a 	ret
  8013b0:	00a00034 	movhi	r2,32768
  8013b4:	10bfffc4 	addi	r2,r2,-1
  8013b8:	2085883a 	add	r2,r4,r2
  8013bc:	f800283a 	ret
  8013c0:	0005883a 	mov	r2,zero
  8013c4:	f800283a 	ret
  8013c8:	00802584 	movi	r2,150
  8013cc:	1145c83a 	sub	r2,r2,r5
  8013d0:	1884d83a 	srl	r2,r3,r2
  8013d4:	003ff306 	br	8013a4 <__alt_data_end+0xff8013a4>

008013d8 <__floatsidf>:
  8013d8:	defffd04 	addi	sp,sp,-12
  8013dc:	dfc00215 	stw	ra,8(sp)
  8013e0:	dc400115 	stw	r17,4(sp)
  8013e4:	dc000015 	stw	r16,0(sp)
  8013e8:	20002b26 	beq	r4,zero,801498 <__floatsidf+0xc0>
  8013ec:	2023883a 	mov	r17,r4
  8013f0:	2020d7fa 	srli	r16,r4,31
  8013f4:	20002d16 	blt	r4,zero,8014ac <__floatsidf+0xd4>
  8013f8:	8809883a 	mov	r4,r17
  8013fc:	08014b40 	call	8014b4 <__clzsi2>
  801400:	01410784 	movi	r5,1054
  801404:	288bc83a 	sub	r5,r5,r2
  801408:	01010cc4 	movi	r4,1075
  80140c:	2149c83a 	sub	r4,r4,r5
  801410:	00c007c4 	movi	r3,31
  801414:	1900160e 	bge	r3,r4,801470 <__floatsidf+0x98>
  801418:	00c104c4 	movi	r3,1043
  80141c:	1947c83a 	sub	r3,r3,r5
  801420:	88c6983a 	sll	r3,r17,r3
  801424:	00800434 	movhi	r2,16
  801428:	10bfffc4 	addi	r2,r2,-1
  80142c:	1886703a 	and	r3,r3,r2
  801430:	2941ffcc 	andi	r5,r5,2047
  801434:	800d883a 	mov	r6,r16
  801438:	0005883a 	mov	r2,zero
  80143c:	280a953a 	slli	r5,r5,20
  801440:	31803fcc 	andi	r6,r6,255
  801444:	01000434 	movhi	r4,16
  801448:	300c97fa 	slli	r6,r6,31
  80144c:	213fffc4 	addi	r4,r4,-1
  801450:	1906703a 	and	r3,r3,r4
  801454:	1946b03a 	or	r3,r3,r5
  801458:	1986b03a 	or	r3,r3,r6
  80145c:	dfc00217 	ldw	ra,8(sp)
  801460:	dc400117 	ldw	r17,4(sp)
  801464:	dc000017 	ldw	r16,0(sp)
  801468:	dec00304 	addi	sp,sp,12
  80146c:	f800283a 	ret
  801470:	00c002c4 	movi	r3,11
  801474:	1887c83a 	sub	r3,r3,r2
  801478:	88c6d83a 	srl	r3,r17,r3
  80147c:	8904983a 	sll	r2,r17,r4
  801480:	01000434 	movhi	r4,16
  801484:	213fffc4 	addi	r4,r4,-1
  801488:	2941ffcc 	andi	r5,r5,2047
  80148c:	1906703a 	and	r3,r3,r4
  801490:	800d883a 	mov	r6,r16
  801494:	003fe906 	br	80143c <__alt_data_end+0xff80143c>
  801498:	000d883a 	mov	r6,zero
  80149c:	000b883a 	mov	r5,zero
  8014a0:	0007883a 	mov	r3,zero
  8014a4:	0005883a 	mov	r2,zero
  8014a8:	003fe406 	br	80143c <__alt_data_end+0xff80143c>
  8014ac:	0123c83a 	sub	r17,zero,r4
  8014b0:	003fd106 	br	8013f8 <__alt_data_end+0xff8013f8>

008014b4 <__clzsi2>:
  8014b4:	00bfffd4 	movui	r2,65535
  8014b8:	11000536 	bltu	r2,r4,8014d0 <__clzsi2+0x1c>
  8014bc:	00803fc4 	movi	r2,255
  8014c0:	11000f36 	bltu	r2,r4,801500 <__clzsi2+0x4c>
  8014c4:	00800804 	movi	r2,32
  8014c8:	0007883a 	mov	r3,zero
  8014cc:	00000506 	br	8014e4 <__clzsi2+0x30>
  8014d0:	00804034 	movhi	r2,256
  8014d4:	10bfffc4 	addi	r2,r2,-1
  8014d8:	11000c2e 	bgeu	r2,r4,80150c <__clzsi2+0x58>
  8014dc:	00800204 	movi	r2,8
  8014e0:	00c00604 	movi	r3,24
  8014e4:	20c8d83a 	srl	r4,r4,r3
  8014e8:	00c02074 	movhi	r3,129
  8014ec:	18e5a744 	addi	r3,r3,-26979
  8014f0:	1909883a 	add	r4,r3,r4
  8014f4:	20c00003 	ldbu	r3,0(r4)
  8014f8:	10c5c83a 	sub	r2,r2,r3
  8014fc:	f800283a 	ret
  801500:	00800604 	movi	r2,24
  801504:	00c00204 	movi	r3,8
  801508:	003ff606 	br	8014e4 <__alt_data_end+0xff8014e4>
  80150c:	00800404 	movi	r2,16
  801510:	1007883a 	mov	r3,r2
  801514:	003ff306 	br	8014e4 <__alt_data_end+0xff8014e4>

00801518 <__mulsi3>:
  801518:	0005883a 	mov	r2,zero
  80151c:	20000726 	beq	r4,zero,80153c <__mulsi3+0x24>
  801520:	20c0004c 	andi	r3,r4,1
  801524:	2008d07a 	srli	r4,r4,1
  801528:	18000126 	beq	r3,zero,801530 <__mulsi3+0x18>
  80152c:	1145883a 	add	r2,r2,r5
  801530:	294b883a 	add	r5,r5,r5
  801534:	203ffa1e 	bne	r4,zero,801520 <__alt_data_end+0xff801520>
  801538:	f800283a 	ret
  80153c:	f800283a 	ret

00801540 <fcvt>:
  801540:	defffd04 	addi	sp,sp,-12
  801544:	d8800317 	ldw	r2,12(sp)
  801548:	d8000115 	stw	zero,4(sp)
  80154c:	dfc00215 	stw	ra,8(sp)
  801550:	d8800015 	stw	r2,0(sp)
  801554:	0801fe00 	call	801fe0 <fcvtbuf>
  801558:	dfc00217 	ldw	ra,8(sp)
  80155c:	dec00304 	addi	sp,sp,12
  801560:	f800283a 	ret

00801564 <fcvtf>:
  801564:	defffb04 	addi	sp,sp,-20
  801568:	dfc00415 	stw	ra,16(sp)
  80156c:	dc800315 	stw	r18,12(sp)
  801570:	dc400215 	stw	r17,8(sp)
  801574:	3825883a 	mov	r18,r7
  801578:	3023883a 	mov	r17,r6
  80157c:	dc000115 	stw	r16,4(sp)
  801580:	2821883a 	mov	r16,r5
  801584:	0807b4c0 	call	807b4c <__extendsfdf2>
  801588:	880f883a 	mov	r7,r17
  80158c:	dc800015 	stw	r18,0(sp)
  801590:	800d883a 	mov	r6,r16
  801594:	1009883a 	mov	r4,r2
  801598:	180b883a 	mov	r5,r3
  80159c:	08015400 	call	801540 <fcvt>
  8015a0:	dfc00417 	ldw	ra,16(sp)
  8015a4:	dc800317 	ldw	r18,12(sp)
  8015a8:	dc400217 	ldw	r17,8(sp)
  8015ac:	dc000117 	ldw	r16,4(sp)
  8015b0:	dec00504 	addi	sp,sp,20
  8015b4:	f800283a 	ret

008015b8 <ecvt>:
  8015b8:	defffd04 	addi	sp,sp,-12
  8015bc:	d8800317 	ldw	r2,12(sp)
  8015c0:	d8000115 	stw	zero,4(sp)
  8015c4:	dfc00215 	stw	ra,8(sp)
  8015c8:	d8800015 	stw	r2,0(sp)
  8015cc:	080214c0 	call	80214c <ecvtbuf>
  8015d0:	dfc00217 	ldw	ra,8(sp)
  8015d4:	dec00304 	addi	sp,sp,12
  8015d8:	f800283a 	ret

008015dc <ecvtf>:
  8015dc:	defffb04 	addi	sp,sp,-20
  8015e0:	dfc00415 	stw	ra,16(sp)
  8015e4:	dc800315 	stw	r18,12(sp)
  8015e8:	dc400215 	stw	r17,8(sp)
  8015ec:	3825883a 	mov	r18,r7
  8015f0:	3023883a 	mov	r17,r6
  8015f4:	dc000115 	stw	r16,4(sp)
  8015f8:	2821883a 	mov	r16,r5
  8015fc:	0807b4c0 	call	807b4c <__extendsfdf2>
  801600:	880f883a 	mov	r7,r17
  801604:	dc800015 	stw	r18,0(sp)
  801608:	800d883a 	mov	r6,r16
  80160c:	1009883a 	mov	r4,r2
  801610:	180b883a 	mov	r5,r3
  801614:	08015b80 	call	8015b8 <ecvt>
  801618:	dfc00417 	ldw	ra,16(sp)
  80161c:	dc800317 	ldw	r18,12(sp)
  801620:	dc400217 	ldw	r17,8(sp)
  801624:	dc000117 	ldw	r16,4(sp)
  801628:	dec00504 	addi	sp,sp,20
  80162c:	f800283a 	ret

00801630 <gcvt>:
  801630:	defff804 	addi	sp,sp,-32
  801634:	dc400415 	stw	r17,16(sp)
  801638:	dc000315 	stw	r16,12(sp)
  80163c:	3023883a 	mov	r17,r6
  801640:	3821883a 	mov	r16,r7
  801644:	000d883a 	mov	r6,zero
  801648:	000f883a 	mov	r7,zero
  80164c:	dcc00615 	stw	r19,24(sp)
  801650:	dc800515 	stw	r18,20(sp)
  801654:	dfc00715 	stw	ra,28(sp)
  801658:	2027883a 	mov	r19,r4
  80165c:	2825883a 	mov	r18,r5
  801660:	08067cc0 	call	8067cc <__ledf2>
  801664:	1000050e 	bge	r2,zero,80167c <gcvt+0x4c>
  801668:	00800b44 	movi	r2,45
  80166c:	80800005 	stb	r2,0(r16)
  801670:	8c7fffc4 	addi	r17,r17,-1
  801674:	80800044 	addi	r2,r16,1
  801678:	00000106 	br	801680 <gcvt+0x50>
  80167c:	8005883a 	mov	r2,r16
  801680:	d8800015 	stw	r2,0(sp)
  801684:	00c019c4 	movi	r3,103
  801688:	00802074 	movhi	r2,129
  80168c:	d8000215 	stw	zero,8(sp)
  801690:	d8c00115 	stw	r3,4(sp)
  801694:	10a6f004 	addi	r2,r2,-25664
  801698:	11000017 	ldw	r4,0(r2)
  80169c:	880f883a 	mov	r7,r17
  8016a0:	980b883a 	mov	r5,r19
  8016a4:	900d883a 	mov	r6,r18
  8016a8:	08022540 	call	802254 <_gcvt>
  8016ac:	10000126 	beq	r2,zero,8016b4 <gcvt+0x84>
  8016b0:	8005883a 	mov	r2,r16
  8016b4:	dfc00717 	ldw	ra,28(sp)
  8016b8:	dcc00617 	ldw	r19,24(sp)
  8016bc:	dc800517 	ldw	r18,20(sp)
  8016c0:	dc400417 	ldw	r17,16(sp)
  8016c4:	dc000317 	ldw	r16,12(sp)
  8016c8:	dec00804 	addi	sp,sp,32
  8016cc:	f800283a 	ret

008016d0 <gcvtf>:
  8016d0:	defffd04 	addi	sp,sp,-12
  8016d4:	dc400115 	stw	r17,4(sp)
  8016d8:	dc000015 	stw	r16,0(sp)
  8016dc:	3023883a 	mov	r17,r6
  8016e0:	2821883a 	mov	r16,r5
  8016e4:	dfc00215 	stw	ra,8(sp)
  8016e8:	0807b4c0 	call	807b4c <__extendsfdf2>
  8016ec:	880f883a 	mov	r7,r17
  8016f0:	800d883a 	mov	r6,r16
  8016f4:	1009883a 	mov	r4,r2
  8016f8:	180b883a 	mov	r5,r3
  8016fc:	dfc00217 	ldw	ra,8(sp)
  801700:	dc400117 	ldw	r17,4(sp)
  801704:	dc000017 	ldw	r16,0(sp)
  801708:	dec00304 	addi	sp,sp,12
  80170c:	08016301 	jmpi	801630 <gcvt>

00801710 <_printf_r>:
  801710:	defffd04 	addi	sp,sp,-12
  801714:	dfc00015 	stw	ra,0(sp)
  801718:	d9800115 	stw	r6,4(sp)
  80171c:	d9c00215 	stw	r7,8(sp)
  801720:	20c00217 	ldw	r3,8(r4)
  801724:	01802034 	movhi	r6,128
  801728:	3189ee04 	addi	r6,r6,10168
  80172c:	19800115 	stw	r6,4(r3)
  801730:	280d883a 	mov	r6,r5
  801734:	21400217 	ldw	r5,8(r4)
  801738:	d9c00104 	addi	r7,sp,4
  80173c:	08018b40 	call	8018b4 <___vfprintf_internal_r>
  801740:	dfc00017 	ldw	ra,0(sp)
  801744:	dec00304 	addi	sp,sp,12
  801748:	f800283a 	ret

0080174c <printf>:
  80174c:	defffc04 	addi	sp,sp,-16
  801750:	dfc00015 	stw	ra,0(sp)
  801754:	d9400115 	stw	r5,4(sp)
  801758:	d9800215 	stw	r6,8(sp)
  80175c:	d9c00315 	stw	r7,12(sp)
  801760:	00802074 	movhi	r2,129
  801764:	10a6f004 	addi	r2,r2,-25664
  801768:	10800017 	ldw	r2,0(r2)
  80176c:	01402034 	movhi	r5,128
  801770:	2949ee04 	addi	r5,r5,10168
  801774:	10c00217 	ldw	r3,8(r2)
  801778:	d9800104 	addi	r6,sp,4
  80177c:	19400115 	stw	r5,4(r3)
  801780:	200b883a 	mov	r5,r4
  801784:	11000217 	ldw	r4,8(r2)
  801788:	0801de00 	call	801de0 <__vfprintf_internal>
  80178c:	dfc00017 	ldw	ra,0(sp)
  801790:	dec00404 	addi	sp,sp,16
  801794:	f800283a 	ret

00801798 <_puts_r>:
  801798:	defffd04 	addi	sp,sp,-12
  80179c:	dc000015 	stw	r16,0(sp)
  8017a0:	2021883a 	mov	r16,r4
  8017a4:	2809883a 	mov	r4,r5
  8017a8:	dfc00215 	stw	ra,8(sp)
  8017ac:	dc400115 	stw	r17,4(sp)
  8017b0:	2823883a 	mov	r17,r5
  8017b4:	080182c0 	call	80182c <strlen>
  8017b8:	81400217 	ldw	r5,8(r16)
  8017bc:	01002034 	movhi	r4,128
  8017c0:	2109ee04 	addi	r4,r4,10168
  8017c4:	29000115 	stw	r4,4(r5)
  8017c8:	100f883a 	mov	r7,r2
  8017cc:	880d883a 	mov	r6,r17
  8017d0:	8009883a 	mov	r4,r16
  8017d4:	08027b80 	call	8027b8 <__sfvwrite_small_dev>
  8017d8:	00ffffc4 	movi	r3,-1
  8017dc:	10c00926 	beq	r2,r3,801804 <_puts_r+0x6c>
  8017e0:	81400217 	ldw	r5,8(r16)
  8017e4:	01802074 	movhi	r6,129
  8017e8:	01c00044 	movi	r7,1
  8017ec:	28800117 	ldw	r2,4(r5)
  8017f0:	31a5e804 	addi	r6,r6,-26720
  8017f4:	8009883a 	mov	r4,r16
  8017f8:	103ee83a 	callr	r2
  8017fc:	10bfffe0 	cmpeqi	r2,r2,-1
  801800:	0085c83a 	sub	r2,zero,r2
  801804:	dfc00217 	ldw	ra,8(sp)
  801808:	dc400117 	ldw	r17,4(sp)
  80180c:	dc000017 	ldw	r16,0(sp)
  801810:	dec00304 	addi	sp,sp,12
  801814:	f800283a 	ret

00801818 <puts>:
  801818:	00802074 	movhi	r2,129
  80181c:	10a6f004 	addi	r2,r2,-25664
  801820:	200b883a 	mov	r5,r4
  801824:	11000017 	ldw	r4,0(r2)
  801828:	08017981 	jmpi	801798 <_puts_r>

0080182c <strlen>:
  80182c:	2005883a 	mov	r2,r4
  801830:	10c00007 	ldb	r3,0(r2)
  801834:	18000226 	beq	r3,zero,801840 <strlen+0x14>
  801838:	10800044 	addi	r2,r2,1
  80183c:	003ffc06 	br	801830 <__alt_data_end+0xff801830>
  801840:	1105c83a 	sub	r2,r2,r4
  801844:	f800283a 	ret

00801848 <print_repeat>:
  801848:	defffb04 	addi	sp,sp,-20
  80184c:	dc800315 	stw	r18,12(sp)
  801850:	dc400215 	stw	r17,8(sp)
  801854:	dc000115 	stw	r16,4(sp)
  801858:	dfc00415 	stw	ra,16(sp)
  80185c:	2025883a 	mov	r18,r4
  801860:	2823883a 	mov	r17,r5
  801864:	d9800005 	stb	r6,0(sp)
  801868:	3821883a 	mov	r16,r7
  80186c:	04000a0e 	bge	zero,r16,801898 <print_repeat+0x50>
  801870:	88800117 	ldw	r2,4(r17)
  801874:	01c00044 	movi	r7,1
  801878:	d80d883a 	mov	r6,sp
  80187c:	880b883a 	mov	r5,r17
  801880:	9009883a 	mov	r4,r18
  801884:	103ee83a 	callr	r2
  801888:	843fffc4 	addi	r16,r16,-1
  80188c:	103ff726 	beq	r2,zero,80186c <__alt_data_end+0xff80186c>
  801890:	00bfffc4 	movi	r2,-1
  801894:	00000106 	br	80189c <print_repeat+0x54>
  801898:	0005883a 	mov	r2,zero
  80189c:	dfc00417 	ldw	ra,16(sp)
  8018a0:	dc800317 	ldw	r18,12(sp)
  8018a4:	dc400217 	ldw	r17,8(sp)
  8018a8:	dc000117 	ldw	r16,4(sp)
  8018ac:	dec00504 	addi	sp,sp,20
  8018b0:	f800283a 	ret

008018b4 <___vfprintf_internal_r>:
  8018b4:	deffe504 	addi	sp,sp,-108
  8018b8:	d8c00804 	addi	r3,sp,32
  8018bc:	ddc01815 	stw	r23,96(sp)
  8018c0:	dd801715 	stw	r22,92(sp)
  8018c4:	dd401615 	stw	r21,88(sp)
  8018c8:	dd001515 	stw	r20,84(sp)
  8018cc:	dcc01415 	stw	r19,80(sp)
  8018d0:	dc801315 	stw	r18,76(sp)
  8018d4:	dc401215 	stw	r17,72(sp)
  8018d8:	dc001115 	stw	r16,68(sp)
  8018dc:	dfc01a15 	stw	ra,104(sp)
  8018e0:	df001915 	stw	fp,100(sp)
  8018e4:	2029883a 	mov	r20,r4
  8018e8:	2823883a 	mov	r17,r5
  8018ec:	382d883a 	mov	r22,r7
  8018f0:	d9800f15 	stw	r6,60(sp)
  8018f4:	0021883a 	mov	r16,zero
  8018f8:	d8000e15 	stw	zero,56(sp)
  8018fc:	d8000a15 	stw	zero,40(sp)
  801900:	002b883a 	mov	r21,zero
  801904:	0027883a 	mov	r19,zero
  801908:	0025883a 	mov	r18,zero
  80190c:	d8000c15 	stw	zero,48(sp)
  801910:	d8000b15 	stw	zero,44(sp)
  801914:	002f883a 	mov	r23,zero
  801918:	d8c00915 	stw	r3,36(sp)
  80191c:	d8c00f17 	ldw	r3,60(sp)
  801920:	19000003 	ldbu	r4,0(r3)
  801924:	20803fcc 	andi	r2,r4,255
  801928:	1080201c 	xori	r2,r2,128
  80192c:	10bfe004 	addi	r2,r2,-128
  801930:	10011e26 	beq	r2,zero,801dac <___vfprintf_internal_r+0x4f8>
  801934:	00c00044 	movi	r3,1
  801938:	b8c01426 	beq	r23,r3,80198c <___vfprintf_internal_r+0xd8>
  80193c:	1dc00216 	blt	r3,r23,801948 <___vfprintf_internal_r+0x94>
  801940:	b8000626 	beq	r23,zero,80195c <___vfprintf_internal_r+0xa8>
  801944:	00011506 	br	801d9c <___vfprintf_internal_r+0x4e8>
  801948:	01400084 	movi	r5,2
  80194c:	b9401d26 	beq	r23,r5,8019c4 <___vfprintf_internal_r+0x110>
  801950:	014000c4 	movi	r5,3
  801954:	b9402b26 	beq	r23,r5,801a04 <___vfprintf_internal_r+0x150>
  801958:	00011006 	br	801d9c <___vfprintf_internal_r+0x4e8>
  80195c:	01400944 	movi	r5,37
  801960:	1140fc26 	beq	r2,r5,801d54 <___vfprintf_internal_r+0x4a0>
  801964:	88800117 	ldw	r2,4(r17)
  801968:	d9000005 	stb	r4,0(sp)
  80196c:	01c00044 	movi	r7,1
  801970:	d80d883a 	mov	r6,sp
  801974:	880b883a 	mov	r5,r17
  801978:	a009883a 	mov	r4,r20
  80197c:	103ee83a 	callr	r2
  801980:	1000d81e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801984:	84000044 	addi	r16,r16,1
  801988:	00010406 	br	801d9c <___vfprintf_internal_r+0x4e8>
  80198c:	01400c04 	movi	r5,48
  801990:	1140fa26 	beq	r2,r5,801d7c <___vfprintf_internal_r+0x4c8>
  801994:	01400944 	movi	r5,37
  801998:	11400a1e 	bne	r2,r5,8019c4 <___vfprintf_internal_r+0x110>
  80199c:	d8800005 	stb	r2,0(sp)
  8019a0:	88800117 	ldw	r2,4(r17)
  8019a4:	b80f883a 	mov	r7,r23
  8019a8:	d80d883a 	mov	r6,sp
  8019ac:	880b883a 	mov	r5,r17
  8019b0:	a009883a 	mov	r4,r20
  8019b4:	103ee83a 	callr	r2
  8019b8:	1000ca1e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  8019bc:	84000044 	addi	r16,r16,1
  8019c0:	0000f506 	br	801d98 <___vfprintf_internal_r+0x4e4>
  8019c4:	25fff404 	addi	r23,r4,-48
  8019c8:	bdc03fcc 	andi	r23,r23,255
  8019cc:	00c00244 	movi	r3,9
  8019d0:	1dc00936 	bltu	r3,r23,8019f8 <___vfprintf_internal_r+0x144>
  8019d4:	00bfffc4 	movi	r2,-1
  8019d8:	90800426 	beq	r18,r2,8019ec <___vfprintf_internal_r+0x138>
  8019dc:	01400284 	movi	r5,10
  8019e0:	9009883a 	mov	r4,r18
  8019e4:	08015180 	call	801518 <__mulsi3>
  8019e8:	00000106 	br	8019f0 <___vfprintf_internal_r+0x13c>
  8019ec:	0005883a 	mov	r2,zero
  8019f0:	b8a5883a 	add	r18,r23,r2
  8019f4:	0000e206 	br	801d80 <___vfprintf_internal_r+0x4cc>
  8019f8:	01400b84 	movi	r5,46
  8019fc:	1140e426 	beq	r2,r5,801d90 <___vfprintf_internal_r+0x4dc>
  801a00:	05c00084 	movi	r23,2
  801a04:	213ff404 	addi	r4,r4,-48
  801a08:	27003fcc 	andi	fp,r4,255
  801a0c:	00c00244 	movi	r3,9
  801a10:	1f000936 	bltu	r3,fp,801a38 <___vfprintf_internal_r+0x184>
  801a14:	00bfffc4 	movi	r2,-1
  801a18:	98800426 	beq	r19,r2,801a2c <___vfprintf_internal_r+0x178>
  801a1c:	01400284 	movi	r5,10
  801a20:	9809883a 	mov	r4,r19
  801a24:	08015180 	call	801518 <__mulsi3>
  801a28:	00000106 	br	801a30 <___vfprintf_internal_r+0x17c>
  801a2c:	0005883a 	mov	r2,zero
  801a30:	e0a7883a 	add	r19,fp,r2
  801a34:	0000d906 	br	801d9c <___vfprintf_internal_r+0x4e8>
  801a38:	00c01b04 	movi	r3,108
  801a3c:	10c0d226 	beq	r2,r3,801d88 <___vfprintf_internal_r+0x4d4>
  801a40:	013fffc4 	movi	r4,-1
  801a44:	99000226 	beq	r19,r4,801a50 <___vfprintf_internal_r+0x19c>
  801a48:	d8000b15 	stw	zero,44(sp)
  801a4c:	00000106 	br	801a54 <___vfprintf_internal_r+0x1a0>
  801a50:	04c00044 	movi	r19,1
  801a54:	01001a44 	movi	r4,105
  801a58:	11001626 	beq	r2,r4,801ab4 <___vfprintf_internal_r+0x200>
  801a5c:	20800916 	blt	r4,r2,801a84 <___vfprintf_internal_r+0x1d0>
  801a60:	010018c4 	movi	r4,99
  801a64:	11008826 	beq	r2,r4,801c88 <___vfprintf_internal_r+0x3d4>
  801a68:	01001904 	movi	r4,100
  801a6c:	11001126 	beq	r2,r4,801ab4 <___vfprintf_internal_r+0x200>
  801a70:	01001604 	movi	r4,88
  801a74:	1100c81e 	bne	r2,r4,801d98 <___vfprintf_internal_r+0x4e4>
  801a78:	00c00044 	movi	r3,1
  801a7c:	d8c00e15 	stw	r3,56(sp)
  801a80:	00001506 	br	801ad8 <___vfprintf_internal_r+0x224>
  801a84:	01001cc4 	movi	r4,115
  801a88:	11009826 	beq	r2,r4,801cec <___vfprintf_internal_r+0x438>
  801a8c:	20800416 	blt	r4,r2,801aa0 <___vfprintf_internal_r+0x1ec>
  801a90:	01001bc4 	movi	r4,111
  801a94:	1100c01e 	bne	r2,r4,801d98 <___vfprintf_internal_r+0x4e4>
  801a98:	05400204 	movi	r21,8
  801a9c:	00000f06 	br	801adc <___vfprintf_internal_r+0x228>
  801aa0:	01001d44 	movi	r4,117
  801aa4:	11000d26 	beq	r2,r4,801adc <___vfprintf_internal_r+0x228>
  801aa8:	01001e04 	movi	r4,120
  801aac:	11000a26 	beq	r2,r4,801ad8 <___vfprintf_internal_r+0x224>
  801ab0:	0000b906 	br	801d98 <___vfprintf_internal_r+0x4e4>
  801ab4:	d8c00a17 	ldw	r3,40(sp)
  801ab8:	b7000104 	addi	fp,r22,4
  801abc:	18000726 	beq	r3,zero,801adc <___vfprintf_internal_r+0x228>
  801ac0:	df000d15 	stw	fp,52(sp)
  801ac4:	b5c00017 	ldw	r23,0(r22)
  801ac8:	b800080e 	bge	r23,zero,801aec <___vfprintf_internal_r+0x238>
  801acc:	05efc83a 	sub	r23,zero,r23
  801ad0:	02400044 	movi	r9,1
  801ad4:	00000606 	br	801af0 <___vfprintf_internal_r+0x23c>
  801ad8:	05400404 	movi	r21,16
  801adc:	b0c00104 	addi	r3,r22,4
  801ae0:	d8c00d15 	stw	r3,52(sp)
  801ae4:	b5c00017 	ldw	r23,0(r22)
  801ae8:	d8000a15 	stw	zero,40(sp)
  801aec:	0013883a 	mov	r9,zero
  801af0:	d839883a 	mov	fp,sp
  801af4:	b8001726 	beq	r23,zero,801b54 <___vfprintf_internal_r+0x2a0>
  801af8:	a80b883a 	mov	r5,r21
  801afc:	b809883a 	mov	r4,r23
  801b00:	da401015 	stw	r9,64(sp)
  801b04:	08053300 	call	805330 <__udivsi3>
  801b08:	a80b883a 	mov	r5,r21
  801b0c:	1009883a 	mov	r4,r2
  801b10:	102d883a 	mov	r22,r2
  801b14:	08015180 	call	801518 <__mulsi3>
  801b18:	b885c83a 	sub	r2,r23,r2
  801b1c:	00c00244 	movi	r3,9
  801b20:	da401017 	ldw	r9,64(sp)
  801b24:	18800216 	blt	r3,r2,801b30 <___vfprintf_internal_r+0x27c>
  801b28:	10800c04 	addi	r2,r2,48
  801b2c:	00000506 	br	801b44 <___vfprintf_internal_r+0x290>
  801b30:	d8c00e17 	ldw	r3,56(sp)
  801b34:	18000226 	beq	r3,zero,801b40 <___vfprintf_internal_r+0x28c>
  801b38:	10800dc4 	addi	r2,r2,55
  801b3c:	00000106 	br	801b44 <___vfprintf_internal_r+0x290>
  801b40:	108015c4 	addi	r2,r2,87
  801b44:	e0800005 	stb	r2,0(fp)
  801b48:	b02f883a 	mov	r23,r22
  801b4c:	e7000044 	addi	fp,fp,1
  801b50:	003fe806 	br	801af4 <__alt_data_end+0xff801af4>
  801b54:	e6efc83a 	sub	r23,fp,sp
  801b58:	9dc5c83a 	sub	r2,r19,r23
  801b5c:	0080090e 	bge	zero,r2,801b84 <___vfprintf_internal_r+0x2d0>
  801b60:	e085883a 	add	r2,fp,r2
  801b64:	01400c04 	movi	r5,48
  801b68:	d8c00917 	ldw	r3,36(sp)
  801b6c:	e009883a 	mov	r4,fp
  801b70:	e0c0032e 	bgeu	fp,r3,801b80 <___vfprintf_internal_r+0x2cc>
  801b74:	e7000044 	addi	fp,fp,1
  801b78:	21400005 	stb	r5,0(r4)
  801b7c:	e0bffa1e 	bne	fp,r2,801b68 <__alt_data_end+0xff801b68>
  801b80:	e6efc83a 	sub	r23,fp,sp
  801b84:	d8c00b17 	ldw	r3,44(sp)
  801b88:	4dd1883a 	add	r8,r9,r23
  801b8c:	922dc83a 	sub	r22,r18,r8
  801b90:	18001626 	beq	r3,zero,801bec <___vfprintf_internal_r+0x338>
  801b94:	48000a26 	beq	r9,zero,801bc0 <___vfprintf_internal_r+0x30c>
  801b98:	00800b44 	movi	r2,45
  801b9c:	d8800805 	stb	r2,32(sp)
  801ba0:	88800117 	ldw	r2,4(r17)
  801ba4:	01c00044 	movi	r7,1
  801ba8:	d9800804 	addi	r6,sp,32
  801bac:	880b883a 	mov	r5,r17
  801bb0:	a009883a 	mov	r4,r20
  801bb4:	103ee83a 	callr	r2
  801bb8:	10004a1e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801bbc:	84000044 	addi	r16,r16,1
  801bc0:	0580070e 	bge	zero,r22,801be0 <___vfprintf_internal_r+0x32c>
  801bc4:	b00f883a 	mov	r7,r22
  801bc8:	01800c04 	movi	r6,48
  801bcc:	880b883a 	mov	r5,r17
  801bd0:	a009883a 	mov	r4,r20
  801bd4:	08018480 	call	801848 <print_repeat>
  801bd8:	1000421e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801bdc:	85a1883a 	add	r16,r16,r22
  801be0:	e02d883a 	mov	r22,fp
  801be4:	bf2fc83a 	sub	r23,r23,fp
  801be8:	00002006 	br	801c6c <___vfprintf_internal_r+0x3b8>
  801bec:	0580090e 	bge	zero,r22,801c14 <___vfprintf_internal_r+0x360>
  801bf0:	b00f883a 	mov	r7,r22
  801bf4:	01800804 	movi	r6,32
  801bf8:	880b883a 	mov	r5,r17
  801bfc:	a009883a 	mov	r4,r20
  801c00:	da401015 	stw	r9,64(sp)
  801c04:	08018480 	call	801848 <print_repeat>
  801c08:	da401017 	ldw	r9,64(sp)
  801c0c:	1000351e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801c10:	85a1883a 	add	r16,r16,r22
  801c14:	483ff226 	beq	r9,zero,801be0 <__alt_data_end+0xff801be0>
  801c18:	00800b44 	movi	r2,45
  801c1c:	d8800805 	stb	r2,32(sp)
  801c20:	88800117 	ldw	r2,4(r17)
  801c24:	01c00044 	movi	r7,1
  801c28:	d9800804 	addi	r6,sp,32
  801c2c:	880b883a 	mov	r5,r17
  801c30:	a009883a 	mov	r4,r20
  801c34:	103ee83a 	callr	r2
  801c38:	10002a1e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801c3c:	84000044 	addi	r16,r16,1
  801c40:	003fe706 	br	801be0 <__alt_data_end+0xff801be0>
  801c44:	b5bfffc4 	addi	r22,r22,-1
  801c48:	b0800003 	ldbu	r2,0(r22)
  801c4c:	01c00044 	movi	r7,1
  801c50:	d9800804 	addi	r6,sp,32
  801c54:	d8800805 	stb	r2,32(sp)
  801c58:	88800117 	ldw	r2,4(r17)
  801c5c:	880b883a 	mov	r5,r17
  801c60:	a009883a 	mov	r4,r20
  801c64:	103ee83a 	callr	r2
  801c68:	10001e1e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801c6c:	8585c83a 	sub	r2,r16,r22
  801c70:	b5c9883a 	add	r4,r22,r23
  801c74:	e085883a 	add	r2,fp,r2
  801c78:	013ff216 	blt	zero,r4,801c44 <__alt_data_end+0xff801c44>
  801c7c:	1021883a 	mov	r16,r2
  801c80:	dd800d17 	ldw	r22,52(sp)
  801c84:	00004406 	br	801d98 <___vfprintf_internal_r+0x4e4>
  801c88:	00800044 	movi	r2,1
  801c8c:	1480080e 	bge	r2,r18,801cb0 <___vfprintf_internal_r+0x3fc>
  801c90:	95ffffc4 	addi	r23,r18,-1
  801c94:	b80f883a 	mov	r7,r23
  801c98:	01800804 	movi	r6,32
  801c9c:	880b883a 	mov	r5,r17
  801ca0:	a009883a 	mov	r4,r20
  801ca4:	08018480 	call	801848 <print_repeat>
  801ca8:	10000e1e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801cac:	85e1883a 	add	r16,r16,r23
  801cb0:	b0800017 	ldw	r2,0(r22)
  801cb4:	01c00044 	movi	r7,1
  801cb8:	d80d883a 	mov	r6,sp
  801cbc:	d8800005 	stb	r2,0(sp)
  801cc0:	88800117 	ldw	r2,4(r17)
  801cc4:	880b883a 	mov	r5,r17
  801cc8:	a009883a 	mov	r4,r20
  801ccc:	b5c00104 	addi	r23,r22,4
  801cd0:	103ee83a 	callr	r2
  801cd4:	1000031e 	bne	r2,zero,801ce4 <___vfprintf_internal_r+0x430>
  801cd8:	84000044 	addi	r16,r16,1
  801cdc:	b82d883a 	mov	r22,r23
  801ce0:	00002d06 	br	801d98 <___vfprintf_internal_r+0x4e4>
  801ce4:	00bfffc4 	movi	r2,-1
  801ce8:	00003106 	br	801db0 <___vfprintf_internal_r+0x4fc>
  801cec:	b5c00017 	ldw	r23,0(r22)
  801cf0:	b7000104 	addi	fp,r22,4
  801cf4:	b809883a 	mov	r4,r23
  801cf8:	080182c0 	call	80182c <strlen>
  801cfc:	9091c83a 	sub	r8,r18,r2
  801d00:	102d883a 	mov	r22,r2
  801d04:	0200090e 	bge	zero,r8,801d2c <___vfprintf_internal_r+0x478>
  801d08:	400f883a 	mov	r7,r8
  801d0c:	01800804 	movi	r6,32
  801d10:	880b883a 	mov	r5,r17
  801d14:	a009883a 	mov	r4,r20
  801d18:	da001015 	stw	r8,64(sp)
  801d1c:	08018480 	call	801848 <print_repeat>
  801d20:	da001017 	ldw	r8,64(sp)
  801d24:	103fef1e 	bne	r2,zero,801ce4 <__alt_data_end+0xff801ce4>
  801d28:	8221883a 	add	r16,r16,r8
  801d2c:	88800117 	ldw	r2,4(r17)
  801d30:	b00f883a 	mov	r7,r22
  801d34:	b80d883a 	mov	r6,r23
  801d38:	880b883a 	mov	r5,r17
  801d3c:	a009883a 	mov	r4,r20
  801d40:	103ee83a 	callr	r2
  801d44:	103fe71e 	bne	r2,zero,801ce4 <__alt_data_end+0xff801ce4>
  801d48:	85a1883a 	add	r16,r16,r22
  801d4c:	e02d883a 	mov	r22,fp
  801d50:	00001106 	br	801d98 <___vfprintf_internal_r+0x4e4>
  801d54:	00c00044 	movi	r3,1
  801d58:	04ffffc4 	movi	r19,-1
  801d5c:	d8000e15 	stw	zero,56(sp)
  801d60:	d8c00a15 	stw	r3,40(sp)
  801d64:	05400284 	movi	r21,10
  801d68:	9825883a 	mov	r18,r19
  801d6c:	d8000c15 	stw	zero,48(sp)
  801d70:	d8000b15 	stw	zero,44(sp)
  801d74:	182f883a 	mov	r23,r3
  801d78:	00000806 	br	801d9c <___vfprintf_internal_r+0x4e8>
  801d7c:	ddc00b15 	stw	r23,44(sp)
  801d80:	05c00084 	movi	r23,2
  801d84:	00000506 	br	801d9c <___vfprintf_internal_r+0x4e8>
  801d88:	00c00044 	movi	r3,1
  801d8c:	d8c00c15 	stw	r3,48(sp)
  801d90:	05c000c4 	movi	r23,3
  801d94:	00000106 	br	801d9c <___vfprintf_internal_r+0x4e8>
  801d98:	002f883a 	mov	r23,zero
  801d9c:	d8c00f17 	ldw	r3,60(sp)
  801da0:	18c00044 	addi	r3,r3,1
  801da4:	d8c00f15 	stw	r3,60(sp)
  801da8:	003edc06 	br	80191c <__alt_data_end+0xff80191c>
  801dac:	8005883a 	mov	r2,r16
  801db0:	dfc01a17 	ldw	ra,104(sp)
  801db4:	df001917 	ldw	fp,100(sp)
  801db8:	ddc01817 	ldw	r23,96(sp)
  801dbc:	dd801717 	ldw	r22,92(sp)
  801dc0:	dd401617 	ldw	r21,88(sp)
  801dc4:	dd001517 	ldw	r20,84(sp)
  801dc8:	dcc01417 	ldw	r19,80(sp)
  801dcc:	dc801317 	ldw	r18,76(sp)
  801dd0:	dc401217 	ldw	r17,72(sp)
  801dd4:	dc001117 	ldw	r16,68(sp)
  801dd8:	dec01b04 	addi	sp,sp,108
  801ddc:	f800283a 	ret

00801de0 <__vfprintf_internal>:
  801de0:	00802074 	movhi	r2,129
  801de4:	10a6f004 	addi	r2,r2,-25664
  801de8:	300f883a 	mov	r7,r6
  801dec:	280d883a 	mov	r6,r5
  801df0:	200b883a 	mov	r5,r4
  801df4:	11000017 	ldw	r4,0(r2)
  801df8:	08018b41 	jmpi	8018b4 <___vfprintf_internal_r>

00801dfc <print_e>:
  801dfc:	defff404 	addi	sp,sp,-48
  801e00:	dc000715 	stw	r16,28(sp)
  801e04:	d8c00504 	addi	r3,sp,20
  801e08:	dc000c17 	ldw	r16,48(sp)
  801e0c:	d8c00315 	stw	r3,12(sp)
  801e10:	d8c00604 	addi	r3,sp,24
  801e14:	d8c00215 	stw	r3,8(sp)
  801e18:	d8c00404 	addi	r3,sp,16
  801e1c:	3805883a 	mov	r2,r7
  801e20:	d8c00115 	stw	r3,4(sp)
  801e24:	80c00044 	addi	r3,r16,1
  801e28:	dc800915 	stw	r18,36(sp)
  801e2c:	d8c00015 	stw	r3,0(sp)
  801e30:	2825883a 	mov	r18,r5
  801e34:	01c00084 	movi	r7,2
  801e38:	300b883a 	mov	r5,r6
  801e3c:	100d883a 	mov	r6,r2
  801e40:	dc400815 	stw	r17,32(sp)
  801e44:	dfc00b15 	stw	ra,44(sp)
  801e48:	dcc00a15 	stw	r19,40(sp)
  801e4c:	dc400d17 	ldw	r17,52(sp)
  801e50:	0803dd00 	call	803dd0 <_dtoa_r>
  801e54:	d8c00417 	ldw	r3,16(sp)
  801e58:	0109c3c4 	movi	r4,9999
  801e5c:	1900041e 	bne	r3,r4,801e70 <print_e+0x74>
  801e60:	100b883a 	mov	r5,r2
  801e64:	9009883a 	mov	r4,r18
  801e68:	0803b2c0 	call	803b2c <strcpy>
  801e6c:	00005506 	br	801fc4 <print_e+0x1c8>
  801e70:	11800044 	addi	r6,r2,1
  801e74:	10800003 	ldbu	r2,0(r2)
  801e78:	8827883a 	mov	r19,r17
  801e7c:	90800005 	stb	r2,0(r18)
  801e80:	d8800e17 	ldw	r2,56(sp)
  801e84:	1000031e 	bne	r2,zero,801e94 <print_e+0x98>
  801e88:	8000021e 	bne	r16,zero,801e94 <print_e+0x98>
  801e8c:	90800044 	addi	r2,r18,1
  801e90:	00000906 	br	801eb8 <print_e+0xbc>
  801e94:	01000b84 	movi	r4,46
  801e98:	90800084 	addi	r2,r18,2
  801e9c:	91000045 	stb	r4,1(r18)
  801ea0:	00000506 	br	801eb8 <print_e+0xbc>
  801ea4:	04000a0e 	bge	zero,r16,801ed0 <print_e+0xd4>
  801ea8:	11400005 	stb	r5,0(r2)
  801eac:	31800044 	addi	r6,r6,1
  801eb0:	843fffc4 	addi	r16,r16,-1
  801eb4:	10800044 	addi	r2,r2,1
  801eb8:	31400003 	ldbu	r5,0(r6)
  801ebc:	1009883a 	mov	r4,r2
  801ec0:	29c03fcc 	andi	r7,r5,255
  801ec4:	39c0201c 	xori	r7,r7,128
  801ec8:	39ffe004 	addi	r7,r7,-128
  801ecc:	383ff51e 	bne	r7,zero,801ea4 <__alt_data_end+0xff801ea4>
  801ed0:	8c403fcc 	andi	r17,r17,255
  801ed4:	8c40201c 	xori	r17,r17,128
  801ed8:	8c7fe004 	addi	r17,r17,-128
  801edc:	014019c4 	movi	r5,103
  801ee0:	89400d26 	beq	r17,r5,801f18 <print_e+0x11c>
  801ee4:	014011c4 	movi	r5,71
  801ee8:	89400d26 	beq	r17,r5,801f20 <print_e+0x124>
  801eec:	800b883a 	mov	r5,r16
  801ef0:	01800c04 	movi	r6,48
  801ef4:	0140040e 	bge	zero,r5,801f08 <print_e+0x10c>
  801ef8:	11800005 	stb	r6,0(r2)
  801efc:	297fffc4 	addi	r5,r5,-1
  801f00:	10800044 	addi	r2,r2,1
  801f04:	003ffb06 	br	801ef4 <__alt_data_end+0xff801ef4>
  801f08:	8000010e 	bge	r16,zero,801f10 <print_e+0x114>
  801f0c:	0021883a 	mov	r16,zero
  801f10:	2409883a 	add	r4,r4,r16
  801f14:	00000306 	br	801f24 <print_e+0x128>
  801f18:	04c01944 	movi	r19,101
  801f1c:	00000106 	br	801f24 <print_e+0x128>
  801f20:	04c01144 	movi	r19,69
  801f24:	18bfffc4 	addi	r2,r3,-1
  801f28:	24800084 	addi	r18,r4,2
  801f2c:	24c00005 	stb	r19,0(r4)
  801f30:	d8800415 	stw	r2,16(sp)
  801f34:	9021883a 	mov	r16,r18
  801f38:	1000050e 	bge	r2,zero,801f50 <print_e+0x154>
  801f3c:	00c00b44 	movi	r3,45
  801f40:	0085c83a 	sub	r2,zero,r2
  801f44:	20c00045 	stb	r3,1(r4)
  801f48:	d8800415 	stw	r2,16(sp)
  801f4c:	00000206 	br	801f58 <print_e+0x15c>
  801f50:	00800ac4 	movi	r2,43
  801f54:	20800045 	stb	r2,1(r4)
  801f58:	dc400417 	ldw	r17,16(sp)
  801f5c:	008018c4 	movi	r2,99
  801f60:	14400b0e 	bge	r2,r17,801f90 <print_e+0x194>
  801f64:	01401904 	movi	r5,100
  801f68:	8809883a 	mov	r4,r17
  801f6c:	08052380 	call	805238 <__divsi3>
  801f70:	10c00c04 	addi	r3,r2,48
  801f74:	90c00005 	stb	r3,0(r18)
  801f78:	017fe704 	movi	r5,-100
  801f7c:	1009883a 	mov	r4,r2
  801f80:	08015180 	call	801518 <__mulsi3>
  801f84:	1445883a 	add	r2,r2,r17
  801f88:	94000044 	addi	r16,r18,1
  801f8c:	d8800415 	stw	r2,16(sp)
  801f90:	dc400417 	ldw	r17,16(sp)
  801f94:	01400284 	movi	r5,10
  801f98:	8809883a 	mov	r4,r17
  801f9c:	08052380 	call	805238 <__divsi3>
  801fa0:	10c00c04 	addi	r3,r2,48
  801fa4:	80c00005 	stb	r3,0(r16)
  801fa8:	017ffd84 	movi	r5,-10
  801fac:	1009883a 	mov	r4,r2
  801fb0:	08015180 	call	801518 <__mulsi3>
  801fb4:	1445883a 	add	r2,r2,r17
  801fb8:	10800c04 	addi	r2,r2,48
  801fbc:	80800045 	stb	r2,1(r16)
  801fc0:	80000085 	stb	zero,2(r16)
  801fc4:	dfc00b17 	ldw	ra,44(sp)
  801fc8:	dcc00a17 	ldw	r19,40(sp)
  801fcc:	dc800917 	ldw	r18,36(sp)
  801fd0:	dc400817 	ldw	r17,32(sp)
  801fd4:	dc000717 	ldw	r16,28(sp)
  801fd8:	dec00c04 	addi	sp,sp,48
  801fdc:	f800283a 	ret

00801fe0 <fcvtbuf>:
  801fe0:	defff304 	addi	sp,sp,-52
  801fe4:	dc000515 	stw	r16,20(sp)
  801fe8:	dc000e17 	ldw	r16,56(sp)
  801fec:	00802074 	movhi	r2,129
  801ff0:	dd800b15 	stw	r22,44(sp)
  801ff4:	dd400a15 	stw	r21,40(sp)
  801ff8:	dd000915 	stw	r20,36(sp)
  801ffc:	dcc00815 	stw	r19,32(sp)
  802000:	dc800715 	stw	r18,28(sp)
  802004:	dc400615 	stw	r17,24(sp)
  802008:	10a6f004 	addi	r2,r2,-25664
  80200c:	dfc00c15 	stw	ra,48(sp)
  802010:	2029883a 	mov	r20,r4
  802014:	2827883a 	mov	r19,r5
  802018:	3025883a 	mov	r18,r6
  80201c:	382b883a 	mov	r21,r7
  802020:	dd800d17 	ldw	r22,52(sp)
  802024:	14400017 	ldw	r17,0(r2)
  802028:	80000c1e 	bne	r16,zero,80205c <fcvtbuf+0x7c>
  80202c:	88c00617 	ldw	r3,24(r17)
  802030:	308008c4 	addi	r2,r6,35
  802034:	10c00816 	blt	r2,r3,802058 <fcvtbuf+0x78>
  802038:	89400717 	ldw	r5,28(r17)
  80203c:	34000904 	addi	r16,r6,36
  802040:	800d883a 	mov	r6,r16
  802044:	8809883a 	mov	r4,r17
  802048:	0803a380 	call	803a38 <_realloc_r>
  80204c:	10003426 	beq	r2,zero,802120 <fcvtbuf+0x140>
  802050:	8c000615 	stw	r16,24(r17)
  802054:	88800715 	stw	r2,28(r17)
  802058:	8c000717 	ldw	r16,28(r17)
  80205c:	000d883a 	mov	r6,zero
  802060:	01cffc34 	movhi	r7,16368
  802064:	a009883a 	mov	r4,r20
  802068:	980b883a 	mov	r5,r19
  80206c:	08067cc0 	call	8067cc <__ledf2>
  802070:	10000d0e 	bge	r2,zero,8020a8 <fcvtbuf+0xc8>
  802074:	000d883a 	mov	r6,zero
  802078:	01effc34 	movhi	r7,49136
  80207c:	a009883a 	mov	r4,r20
  802080:	980b883a 	mov	r5,r19
  802084:	08066f00 	call	8066f0 <__gedf2>
  802088:	0080070e 	bge	zero,r2,8020a8 <fcvtbuf+0xc8>
  80208c:	d8800404 	addi	r2,sp,16
  802090:	d8800315 	stw	r2,12(sp)
  802094:	dd800215 	stw	r22,8(sp)
  802098:	dd400115 	stw	r21,4(sp)
  80209c:	dc800015 	stw	r18,0(sp)
  8020a0:	01c00084 	movi	r7,2
  8020a4:	00000606 	br	8020c0 <fcvtbuf+0xe0>
  8020a8:	d8800404 	addi	r2,sp,16
  8020ac:	d8800315 	stw	r2,12(sp)
  8020b0:	dd800215 	stw	r22,8(sp)
  8020b4:	dd400115 	stw	r21,4(sp)
  8020b8:	dc800015 	stw	r18,0(sp)
  8020bc:	01c000c4 	movi	r7,3
  8020c0:	8809883a 	mov	r4,r17
  8020c4:	a00b883a 	mov	r5,r20
  8020c8:	980d883a 	mov	r6,r19
  8020cc:	0803dd00 	call	803dd0 <_dtoa_r>
  8020d0:	a9000017 	ldw	r4,0(r21)
  8020d4:	8007883a 	mov	r3,r16
  8020d8:	0109c83a 	sub	r4,zero,r4
  8020dc:	2409c83a 	sub	r4,r4,r16
  8020e0:	d9400417 	ldw	r5,16(sp)
  8020e4:	1140052e 	bgeu	r2,r5,8020fc <fcvtbuf+0x11c>
  8020e8:	11400003 	ldbu	r5,0(r2)
  8020ec:	18c00044 	addi	r3,r3,1
  8020f0:	10800044 	addi	r2,r2,1
  8020f4:	197fffc5 	stb	r5,-1(r3)
  8020f8:	003ff906 	br	8020e0 <__alt_data_end+0xff8020e0>
  8020fc:	01400c04 	movi	r5,48
  802100:	1905883a 	add	r2,r3,r4
  802104:	1480030e 	bge	r2,r18,802114 <fcvtbuf+0x134>
  802108:	19400005 	stb	r5,0(r3)
  80210c:	18c00044 	addi	r3,r3,1
  802110:	003ffb06 	br	802100 <__alt_data_end+0xff802100>
  802114:	18000005 	stb	zero,0(r3)
  802118:	8005883a 	mov	r2,r16
  80211c:	00000106 	br	802124 <fcvtbuf+0x144>
  802120:	0005883a 	mov	r2,zero
  802124:	dfc00c17 	ldw	ra,48(sp)
  802128:	dd800b17 	ldw	r22,44(sp)
  80212c:	dd400a17 	ldw	r21,40(sp)
  802130:	dd000917 	ldw	r20,36(sp)
  802134:	dcc00817 	ldw	r19,32(sp)
  802138:	dc800717 	ldw	r18,28(sp)
  80213c:	dc400617 	ldw	r17,24(sp)
  802140:	dc000517 	ldw	r16,20(sp)
  802144:	dec00d04 	addi	sp,sp,52
  802148:	f800283a 	ret

0080214c <ecvtbuf>:
  80214c:	defff404 	addi	sp,sp,-48
  802150:	dc000515 	stw	r16,20(sp)
  802154:	dc000d17 	ldw	r16,52(sp)
  802158:	00802074 	movhi	r2,129
  80215c:	dd400a15 	stw	r21,40(sp)
  802160:	dd000915 	stw	r20,36(sp)
  802164:	dcc00815 	stw	r19,32(sp)
  802168:	dc800715 	stw	r18,28(sp)
  80216c:	dc400615 	stw	r17,24(sp)
  802170:	10a6f004 	addi	r2,r2,-25664
  802174:	dfc00b15 	stw	ra,44(sp)
  802178:	2029883a 	mov	r20,r4
  80217c:	2827883a 	mov	r19,r5
  802180:	3025883a 	mov	r18,r6
  802184:	382b883a 	mov	r21,r7
  802188:	14400017 	ldw	r17,0(r2)
  80218c:	80000b1e 	bne	r16,zero,8021bc <ecvtbuf+0x70>
  802190:	88800617 	ldw	r2,24(r17)
  802194:	30800816 	blt	r6,r2,8021b8 <ecvtbuf+0x6c>
  802198:	89400717 	ldw	r5,28(r17)
  80219c:	34000044 	addi	r16,r6,1
  8021a0:	800d883a 	mov	r6,r16
  8021a4:	8809883a 	mov	r4,r17
  8021a8:	0803a380 	call	803a38 <_realloc_r>
  8021ac:	10001f26 	beq	r2,zero,80222c <ecvtbuf+0xe0>
  8021b0:	8c000615 	stw	r16,24(r17)
  8021b4:	88800715 	stw	r2,28(r17)
  8021b8:	8c000717 	ldw	r16,28(r17)
  8021bc:	d8800404 	addi	r2,sp,16
  8021c0:	d8800315 	stw	r2,12(sp)
  8021c4:	d8800c17 	ldw	r2,48(sp)
  8021c8:	dd400115 	stw	r21,4(sp)
  8021cc:	dc800015 	stw	r18,0(sp)
  8021d0:	d8800215 	stw	r2,8(sp)
  8021d4:	01c00084 	movi	r7,2
  8021d8:	a00b883a 	mov	r5,r20
  8021dc:	980d883a 	mov	r6,r19
  8021e0:	8809883a 	mov	r4,r17
  8021e4:	0803dd00 	call	803dd0 <_dtoa_r>
  8021e8:	8007883a 	mov	r3,r16
  8021ec:	d9000417 	ldw	r4,16(sp)
  8021f0:	1100052e 	bgeu	r2,r4,802208 <ecvtbuf+0xbc>
  8021f4:	11000003 	ldbu	r4,0(r2)
  8021f8:	18c00044 	addi	r3,r3,1
  8021fc:	10800044 	addi	r2,r2,1
  802200:	193fffc5 	stb	r4,-1(r3)
  802204:	003ff906 	br	8021ec <__alt_data_end+0xff8021ec>
  802208:	01000c04 	movi	r4,48
  80220c:	1c05c83a 	sub	r2,r3,r16
  802210:	1480030e 	bge	r2,r18,802220 <ecvtbuf+0xd4>
  802214:	19000005 	stb	r4,0(r3)
  802218:	18c00044 	addi	r3,r3,1
  80221c:	003ffb06 	br	80220c <__alt_data_end+0xff80220c>
  802220:	18000005 	stb	zero,0(r3)
  802224:	8005883a 	mov	r2,r16
  802228:	00000106 	br	802230 <ecvtbuf+0xe4>
  80222c:	0005883a 	mov	r2,zero
  802230:	dfc00b17 	ldw	ra,44(sp)
  802234:	dd400a17 	ldw	r21,40(sp)
  802238:	dd000917 	ldw	r20,36(sp)
  80223c:	dcc00817 	ldw	r19,32(sp)
  802240:	dc800717 	ldw	r18,28(sp)
  802244:	dc400617 	ldw	r17,24(sp)
  802248:	dc000517 	ldw	r16,20(sp)
  80224c:	dec00c04 	addi	sp,sp,48
  802250:	f800283a 	ret

00802254 <_gcvt>:
  802254:	defff104 	addi	sp,sp,-60
  802258:	dc400815 	stw	r17,32(sp)
  80225c:	3023883a 	mov	r17,r6
  802260:	dd400c15 	stw	r21,48(sp)
  802264:	dd000b15 	stw	r20,44(sp)
  802268:	dc800915 	stw	r18,36(sp)
  80226c:	202b883a 	mov	r21,r4
  802270:	2825883a 	mov	r18,r5
  802274:	3829883a 	mov	r20,r7
  802278:	2809883a 	mov	r4,r5
  80227c:	000d883a 	mov	r6,zero
  802280:	000f883a 	mov	r7,zero
  802284:	880b883a 	mov	r5,r17
  802288:	dd800d15 	stw	r22,52(sp)
  80228c:	dcc00a15 	stw	r19,40(sp)
  802290:	dc000715 	stw	r16,28(sp)
  802294:	dfc00e15 	stw	ra,56(sp)
  802298:	dc000f17 	ldw	r16,60(sp)
  80229c:	dd801017 	ldw	r22,64(sp)
  8022a0:	dcc01117 	ldw	r19,68(sp)
  8022a4:	08067cc0 	call	8067cc <__ledf2>
  8022a8:	1000010e 	bge	r2,zero,8022b0 <_gcvt+0x5c>
  8022ac:	8c60003c 	xorhi	r17,r17,32768
  8022b0:	000d883a 	mov	r6,zero
  8022b4:	000f883a 	mov	r7,zero
  8022b8:	9009883a 	mov	r4,r18
  8022bc:	880b883a 	mov	r5,r17
  8022c0:	08066680 	call	806668 <__eqdf2>
  8022c4:	1000041e 	bne	r2,zero,8022d8 <_gcvt+0x84>
  8022c8:	00800c04 	movi	r2,48
  8022cc:	80800005 	stb	r2,0(r16)
  8022d0:	80000045 	stb	zero,1(r16)
  8022d4:	00009206 	br	802520 <_gcvt+0x2cc>
  8022d8:	01bac734 	movhi	r6,60188
  8022dc:	01cfc6b4 	movhi	r7,16154
  8022e0:	3190cb44 	addi	r6,r6,17197
  8022e4:	39cdb884 	addi	r7,r7,14050
  8022e8:	9009883a 	mov	r4,r18
  8022ec:	880b883a 	mov	r5,r17
  8022f0:	08067cc0 	call	8067cc <__ledf2>
  8022f4:	00800d16 	blt	zero,r2,80232c <_gcvt+0xd8>
  8022f8:	b5803fcc 	andi	r22,r22,255
  8022fc:	b580201c 	xori	r22,r22,128
  802300:	b5bfe004 	addi	r22,r22,-128
  802304:	a53fffc4 	addi	r20,r20,-1
  802308:	dcc00215 	stw	r19,8(sp)
  80230c:	dd800115 	stw	r22,4(sp)
  802310:	dd000015 	stw	r20,0(sp)
  802314:	900d883a 	mov	r6,r18
  802318:	880f883a 	mov	r7,r17
  80231c:	800b883a 	mov	r5,r16
  802320:	a809883a 	mov	r4,r21
  802324:	0801dfc0 	call	801dfc <print_e>
  802328:	00007d06 	br	802520 <_gcvt+0x2cc>
  80232c:	a009883a 	mov	r4,r20
  802330:	08037500 	call	803750 <_mprec_log10>
  802334:	100d883a 	mov	r6,r2
  802338:	180f883a 	mov	r7,r3
  80233c:	9009883a 	mov	r4,r18
  802340:	880b883a 	mov	r5,r17
  802344:	08066f00 	call	8066f0 <__gedf2>
  802348:	103feb0e 	bge	r2,zero,8022f8 <__alt_data_end+0xff8022f8>
  80234c:	9009883a 	mov	r4,r18
  802350:	000d883a 	mov	r6,zero
  802354:	01cffc34 	movhi	r7,16368
  802358:	880b883a 	mov	r5,r17
  80235c:	08067cc0 	call	8067cc <__ledf2>
  802360:	d9000504 	addi	r4,sp,20
  802364:	d8c00604 	addi	r3,sp,24
  802368:	1000070e 	bge	r2,zero,802388 <_gcvt+0x134>
  80236c:	d8800404 	addi	r2,sp,16
  802370:	d8800315 	stw	r2,12(sp)
  802374:	d9000215 	stw	r4,8(sp)
  802378:	d8c00115 	stw	r3,4(sp)
  80237c:	dd000015 	stw	r20,0(sp)
  802380:	01c000c4 	movi	r7,3
  802384:	00000606 	br	8023a0 <_gcvt+0x14c>
  802388:	d8800404 	addi	r2,sp,16
  80238c:	d8800315 	stw	r2,12(sp)
  802390:	d9000215 	stw	r4,8(sp)
  802394:	d8c00115 	stw	r3,4(sp)
  802398:	dd000015 	stw	r20,0(sp)
  80239c:	01c00084 	movi	r7,2
  8023a0:	a809883a 	mov	r4,r21
  8023a4:	900b883a 	mov	r5,r18
  8023a8:	880d883a 	mov	r6,r17
  8023ac:	0803dd00 	call	803dd0 <_dtoa_r>
  8023b0:	d9000617 	ldw	r4,24(sp)
  8023b4:	00c9c3c4 	movi	r3,9999
  8023b8:	20c00226 	beq	r4,r3,8023c4 <_gcvt+0x170>
  8023bc:	8009883a 	mov	r4,r16
  8023c0:	00000a06 	br	8023ec <_gcvt+0x198>
  8023c4:	100b883a 	mov	r5,r2
  8023c8:	8009883a 	mov	r4,r16
  8023cc:	0803b2c0 	call	803b2c <strcpy>
  8023d0:	00005306 	br	802520 <_gcvt+0x2cc>
  8023d4:	01c01d0e 	bge	zero,r7,80244c <_gcvt+0x1f8>
  8023d8:	39ffffc4 	addi	r7,r7,-1
  8023dc:	21800005 	stb	r6,0(r4)
  8023e0:	10800044 	addi	r2,r2,1
  8023e4:	d9c00615 	stw	r7,24(sp)
  8023e8:	21000044 	addi	r4,r4,1
  8023ec:	11800003 	ldbu	r6,0(r2)
  8023f0:	a107c83a 	sub	r3,r20,r4
  8023f4:	200b883a 	mov	r5,r4
  8023f8:	32003fcc 	andi	r8,r6,255
  8023fc:	4200201c 	xori	r8,r8,128
  802400:	423fe004 	addi	r8,r8,-128
  802404:	80c7883a 	add	r3,r16,r3
  802408:	d9c00617 	ldw	r7,24(sp)
  80240c:	403ff11e 	bne	r8,zero,8023d4 <__alt_data_end+0xff8023d4>
  802410:	000d883a 	mov	r6,zero
  802414:	38cfc83a 	sub	r7,r7,r3
  802418:	02400c04 	movi	r9,48
  80241c:	00000506 	br	802434 <_gcvt+0x1e0>
  802420:	00c0070e 	bge	zero,r3,802440 <_gcvt+0x1ec>
  802424:	22400005 	stb	r9,0(r4)
  802428:	18ffffc4 	addi	r3,r3,-1
  80242c:	21000044 	addi	r4,r4,1
  802430:	01800044 	movi	r6,1
  802434:	38d1883a 	add	r8,r7,r3
  802438:	200b883a 	mov	r5,r4
  80243c:	023ff816 	blt	zero,r8,802420 <__alt_data_end+0xff802420>
  802440:	31803fcc 	andi	r6,r6,255
  802444:	30000126 	beq	r6,zero,80244c <_gcvt+0x1f8>
  802448:	da000615 	stw	r8,24(sp)
  80244c:	9800021e 	bne	r19,zero,802458 <_gcvt+0x204>
  802450:	11800007 	ldb	r6,0(r2)
  802454:	30003126 	beq	r6,zero,80251c <_gcvt+0x2c8>
  802458:	8100031e 	bne	r16,r4,802468 <_gcvt+0x214>
  80245c:	01000c04 	movi	r4,48
  802460:	81400044 	addi	r5,r16,1
  802464:	81000005 	stb	r4,0(r16)
  802468:	d9800617 	ldw	r6,24(sp)
  80246c:	01000b84 	movi	r4,46
  802470:	29000005 	stb	r4,0(r5)
  802474:	02000c04 	movi	r8,48
  802478:	29000044 	addi	r4,r5,1
  80247c:	000b883a 	mov	r5,zero
  802480:	300f883a 	mov	r7,r6
  802484:	30000416 	blt	r6,zero,802498 <_gcvt+0x244>
  802488:	29403fcc 	andi	r5,r5,255
  80248c:	28001226 	beq	r5,zero,8024d8 <_gcvt+0x284>
  802490:	d9800615 	stw	r6,24(sp)
  802494:	00001006 	br	8024d8 <_gcvt+0x284>
  802498:	31800044 	addi	r6,r6,1
  80249c:	00c0050e 	bge	zero,r3,8024b4 <_gcvt+0x260>
  8024a0:	22000005 	stb	r8,0(r4)
  8024a4:	18ffffc4 	addi	r3,r3,-1
  8024a8:	21000044 	addi	r4,r4,1
  8024ac:	01400044 	movi	r5,1
  8024b0:	003ff306 	br	802480 <__alt_data_end+0xff802480>
  8024b4:	29403fcc 	andi	r5,r5,255
  8024b8:	28000726 	beq	r5,zero,8024d8 <_gcvt+0x284>
  8024bc:	d9c00615 	stw	r7,24(sp)
  8024c0:	00000506 	br	8024d8 <_gcvt+0x284>
  8024c4:	00c00a0e 	bge	zero,r3,8024f0 <_gcvt+0x29c>
  8024c8:	21800005 	stb	r6,0(r4)
  8024cc:	10800044 	addi	r2,r2,1
  8024d0:	18ffffc4 	addi	r3,r3,-1
  8024d4:	21000044 	addi	r4,r4,1
  8024d8:	11800003 	ldbu	r6,0(r2)
  8024dc:	200b883a 	mov	r5,r4
  8024e0:	31c03fcc 	andi	r7,r6,255
  8024e4:	39c0201c 	xori	r7,r7,128
  8024e8:	39ffe004 	addi	r7,r7,-128
  8024ec:	383ff51e 	bne	r7,zero,8024c4 <__alt_data_end+0xff8024c4>
  8024f0:	98000a26 	beq	r19,zero,80251c <_gcvt+0x2c8>
  8024f4:	1805883a 	mov	r2,r3
  8024f8:	01800c04 	movi	r6,48
  8024fc:	0080040e 	bge	zero,r2,802510 <_gcvt+0x2bc>
  802500:	21800005 	stb	r6,0(r4)
  802504:	10bfffc4 	addi	r2,r2,-1
  802508:	21000044 	addi	r4,r4,1
  80250c:	003ffb06 	br	8024fc <__alt_data_end+0xff8024fc>
  802510:	1800010e 	bge	r3,zero,802518 <_gcvt+0x2c4>
  802514:	0007883a 	mov	r3,zero
  802518:	28cb883a 	add	r5,r5,r3
  80251c:	28000005 	stb	zero,0(r5)
  802520:	8005883a 	mov	r2,r16
  802524:	dfc00e17 	ldw	ra,56(sp)
  802528:	dd800d17 	ldw	r22,52(sp)
  80252c:	dd400c17 	ldw	r21,48(sp)
  802530:	dd000b17 	ldw	r20,44(sp)
  802534:	dcc00a17 	ldw	r19,40(sp)
  802538:	dc800917 	ldw	r18,36(sp)
  80253c:	dc400817 	ldw	r17,32(sp)
  802540:	dc000717 	ldw	r16,28(sp)
  802544:	dec00f04 	addi	sp,sp,60
  802548:	f800283a 	ret

0080254c <_dcvt>:
  80254c:	defff504 	addi	sp,sp,-44
  802550:	d8800d07 	ldb	r2,52(sp)
  802554:	dc400815 	stw	r17,32(sp)
  802558:	dc000715 	stw	r16,28(sp)
  80255c:	2823883a 	mov	r17,r5
  802560:	dfc00a15 	stw	ra,40(sp)
  802564:	300b883a 	mov	r5,r6
  802568:	dc800915 	stw	r18,36(sp)
  80256c:	018011c4 	movi	r6,71
  802570:	3811883a 	mov	r8,r7
  802574:	dc000b17 	ldw	r16,44(sp)
  802578:	d8c00e17 	ldw	r3,56(sp)
  80257c:	11807726 	beq	r2,r6,80275c <_dcvt+0x210>
  802580:	30800516 	blt	r6,r2,802598 <_dcvt+0x4c>
  802584:	01801144 	movi	r6,69
  802588:	11807d26 	beq	r2,r6,802780 <_dcvt+0x234>
  80258c:	01801184 	movi	r6,70
  802590:	11800826 	beq	r2,r6,8025b4 <_dcvt+0x68>
  802594:	00008106 	br	80279c <_dcvt+0x250>
  802598:	01801984 	movi	r6,102
  80259c:	11800526 	beq	r2,r6,8025b4 <_dcvt+0x68>
  8025a0:	018019c4 	movi	r6,103
  8025a4:	11806d26 	beq	r2,r6,80275c <_dcvt+0x210>
  8025a8:	01801944 	movi	r6,101
  8025ac:	11807b1e 	bne	r2,r6,80279c <_dcvt+0x250>
  8025b0:	00007306 	br	802780 <_dcvt+0x234>
  8025b4:	80000226 	beq	r16,zero,8025c0 <_dcvt+0x74>
  8025b8:	04800044 	movi	r18,1
  8025bc:	00000106 	br	8025c4 <_dcvt+0x78>
  8025c0:	1825883a 	mov	r18,r3
  8025c4:	d8800404 	addi	r2,sp,16
  8025c8:	d8800315 	stw	r2,12(sp)
  8025cc:	d8800504 	addi	r2,sp,20
  8025d0:	d8800215 	stw	r2,8(sp)
  8025d4:	d8800604 	addi	r2,sp,24
  8025d8:	d8800115 	stw	r2,4(sp)
  8025dc:	dc000015 	stw	r16,0(sp)
  8025e0:	01c000c4 	movi	r7,3
  8025e4:	400d883a 	mov	r6,r8
  8025e8:	0803dd00 	call	803dd0 <_dtoa_r>
  8025ec:	d9000617 	ldw	r4,24(sp)
  8025f0:	00c9c3c4 	movi	r3,9999
  8025f4:	20c00326 	beq	r4,r3,802604 <_dcvt+0xb8>
  8025f8:	880f883a 	mov	r7,r17
  8025fc:	100d883a 	mov	r6,r2
  802600:	00000a06 	br	80262c <_dcvt+0xe0>
  802604:	100b883a 	mov	r5,r2
  802608:	8809883a 	mov	r4,r17
  80260c:	0803b2c0 	call	803b2c <strcpy>
  802610:	00006206 	br	80279c <_dcvt+0x250>
  802614:	01001c0e 	bge	zero,r4,802688 <_dcvt+0x13c>
  802618:	213fffc4 	addi	r4,r4,-1
  80261c:	39400005 	stb	r5,0(r7)
  802620:	31800044 	addi	r6,r6,1
  802624:	d9000615 	stw	r4,24(sp)
  802628:	39c00044 	addi	r7,r7,1
  80262c:	31400003 	ldbu	r5,0(r6)
  802630:	3807883a 	mov	r3,r7
  802634:	d9000617 	ldw	r4,24(sp)
  802638:	2a003fcc 	andi	r8,r5,255
  80263c:	4200201c 	xori	r8,r8,128
  802640:	423fe004 	addi	r8,r8,-128
  802644:	403ff31e 	bne	r8,zero,802614 <__alt_data_end+0xff802614>
  802648:	02400c04 	movi	r9,48
  80264c:	21cbc83a 	sub	r5,r4,r7
  802650:	194b883a 	add	r5,r3,r5
  802654:	0140040e 	bge	zero,r5,802668 <_dcvt+0x11c>
  802658:	3a400005 	stb	r9,0(r7)
  80265c:	02000044 	movi	r8,1
  802660:	39c00044 	addi	r7,r7,1
  802664:	003ff906 	br	80264c <__alt_data_end+0xff80264c>
  802668:	200b883a 	mov	r5,r4
  80266c:	2000010e 	bge	r4,zero,802674 <_dcvt+0x128>
  802670:	000b883a 	mov	r5,zero
  802674:	42003fcc 	andi	r8,r8,255
  802678:	1947883a 	add	r3,r3,r5
  80267c:	2149c83a 	sub	r4,r4,r5
  802680:	40000126 	beq	r8,zero,802688 <_dcvt+0x13c>
  802684:	d9000615 	stw	r4,24(sp)
  802688:	9000021e 	bne	r18,zero,802694 <_dcvt+0x148>
  80268c:	31000007 	ldb	r4,0(r6)
  802690:	20003026 	beq	r4,zero,802754 <_dcvt+0x208>
  802694:	1180031e 	bne	r2,r6,8026a4 <_dcvt+0x158>
  802698:	00800c04 	movi	r2,48
  80269c:	18800005 	stb	r2,0(r3)
  8026a0:	18c00044 	addi	r3,r3,1
  8026a4:	d9000617 	ldw	r4,24(sp)
  8026a8:	00800b84 	movi	r2,46
  8026ac:	18800005 	stb	r2,0(r3)
  8026b0:	01c00c04 	movi	r7,48
  8026b4:	18800044 	addi	r2,r3,1
  8026b8:	0007883a 	mov	r3,zero
  8026bc:	200b883a 	mov	r5,r4
  8026c0:	20000416 	blt	r4,zero,8026d4 <_dcvt+0x188>
  8026c4:	18c03fcc 	andi	r3,r3,255
  8026c8:	18001226 	beq	r3,zero,802714 <_dcvt+0x1c8>
  8026cc:	d9000615 	stw	r4,24(sp)
  8026d0:	00001006 	br	802714 <_dcvt+0x1c8>
  8026d4:	21000044 	addi	r4,r4,1
  8026d8:	0400050e 	bge	zero,r16,8026f0 <_dcvt+0x1a4>
  8026dc:	11c00005 	stb	r7,0(r2)
  8026e0:	843fffc4 	addi	r16,r16,-1
  8026e4:	10800044 	addi	r2,r2,1
  8026e8:	00c00044 	movi	r3,1
  8026ec:	003ff306 	br	8026bc <__alt_data_end+0xff8026bc>
  8026f0:	18c03fcc 	andi	r3,r3,255
  8026f4:	18000726 	beq	r3,zero,802714 <_dcvt+0x1c8>
  8026f8:	d9400615 	stw	r5,24(sp)
  8026fc:	00000506 	br	802714 <_dcvt+0x1c8>
  802700:	0400140e 	bge	zero,r16,802754 <_dcvt+0x208>
  802704:	11000005 	stb	r4,0(r2)
  802708:	31800044 	addi	r6,r6,1
  80270c:	843fffc4 	addi	r16,r16,-1
  802710:	10800044 	addi	r2,r2,1
  802714:	31000003 	ldbu	r4,0(r6)
  802718:	1007883a 	mov	r3,r2
  80271c:	21403fcc 	andi	r5,r4,255
  802720:	2940201c 	xori	r5,r5,128
  802724:	297fe004 	addi	r5,r5,-128
  802728:	283ff51e 	bne	r5,zero,802700 <__alt_data_end+0xff802700>
  80272c:	8009883a 	mov	r4,r16
  802730:	01400c04 	movi	r5,48
  802734:	0100040e 	bge	zero,r4,802748 <_dcvt+0x1fc>
  802738:	11400005 	stb	r5,0(r2)
  80273c:	213fffc4 	addi	r4,r4,-1
  802740:	10800044 	addi	r2,r2,1
  802744:	003ffb06 	br	802734 <__alt_data_end+0xff802734>
  802748:	8000010e 	bge	r16,zero,802750 <_dcvt+0x204>
  80274c:	0021883a 	mov	r16,zero
  802750:	1c07883a 	add	r3,r3,r16
  802754:	18000005 	stb	zero,0(r3)
  802758:	00001006 	br	80279c <_dcvt+0x250>
  80275c:	8000011e 	bne	r16,zero,802764 <_dcvt+0x218>
  802760:	04000044 	movi	r16,1
  802764:	d8c00215 	stw	r3,8(sp)
  802768:	d8800115 	stw	r2,4(sp)
  80276c:	dc400015 	stw	r17,0(sp)
  802770:	800f883a 	mov	r7,r16
  802774:	400d883a 	mov	r6,r8
  802778:	08022540 	call	802254 <_gcvt>
  80277c:	00000706 	br	80279c <_dcvt+0x250>
  802780:	280d883a 	mov	r6,r5
  802784:	d8c00215 	stw	r3,8(sp)
  802788:	d8800115 	stw	r2,4(sp)
  80278c:	dc000015 	stw	r16,0(sp)
  802790:	400f883a 	mov	r7,r8
  802794:	880b883a 	mov	r5,r17
  802798:	0801dfc0 	call	801dfc <print_e>
  80279c:	8805883a 	mov	r2,r17
  8027a0:	dfc00a17 	ldw	ra,40(sp)
  8027a4:	dc800917 	ldw	r18,36(sp)
  8027a8:	dc400817 	ldw	r17,32(sp)
  8027ac:	dc000717 	ldw	r16,28(sp)
  8027b0:	dec00b04 	addi	sp,sp,44
  8027b4:	f800283a 	ret

008027b8 <__sfvwrite_small_dev>:
  8027b8:	2880000b 	ldhu	r2,0(r5)
  8027bc:	1080020c 	andi	r2,r2,8
  8027c0:	10002126 	beq	r2,zero,802848 <__sfvwrite_small_dev+0x90>
  8027c4:	2880008f 	ldh	r2,2(r5)
  8027c8:	defffa04 	addi	sp,sp,-24
  8027cc:	dc000015 	stw	r16,0(sp)
  8027d0:	dfc00515 	stw	ra,20(sp)
  8027d4:	dd000415 	stw	r20,16(sp)
  8027d8:	dcc00315 	stw	r19,12(sp)
  8027dc:	dc800215 	stw	r18,8(sp)
  8027e0:	dc400115 	stw	r17,4(sp)
  8027e4:	2821883a 	mov	r16,r5
  8027e8:	10001216 	blt	r2,zero,802834 <__sfvwrite_small_dev+0x7c>
  8027ec:	2027883a 	mov	r19,r4
  8027f0:	3025883a 	mov	r18,r6
  8027f4:	3823883a 	mov	r17,r7
  8027f8:	05010004 	movi	r20,1024
  8027fc:	04400b0e 	bge	zero,r17,80282c <__sfvwrite_small_dev+0x74>
  802800:	880f883a 	mov	r7,r17
  802804:	a440010e 	bge	r20,r17,80280c <__sfvwrite_small_dev+0x54>
  802808:	01c10004 	movi	r7,1024
  80280c:	8140008f 	ldh	r5,2(r16)
  802810:	900d883a 	mov	r6,r18
  802814:	9809883a 	mov	r4,r19
  802818:	0803b580 	call	803b58 <_write_r>
  80281c:	0080050e 	bge	zero,r2,802834 <__sfvwrite_small_dev+0x7c>
  802820:	88a3c83a 	sub	r17,r17,r2
  802824:	90a5883a 	add	r18,r18,r2
  802828:	003ff406 	br	8027fc <__alt_data_end+0xff8027fc>
  80282c:	0005883a 	mov	r2,zero
  802830:	00000706 	br	802850 <__sfvwrite_small_dev+0x98>
  802834:	8080000b 	ldhu	r2,0(r16)
  802838:	10801014 	ori	r2,r2,64
  80283c:	8080000d 	sth	r2,0(r16)
  802840:	00bfffc4 	movi	r2,-1
  802844:	00000206 	br	802850 <__sfvwrite_small_dev+0x98>
  802848:	00bfffc4 	movi	r2,-1
  80284c:	f800283a 	ret
  802850:	dfc00517 	ldw	ra,20(sp)
  802854:	dd000417 	ldw	r20,16(sp)
  802858:	dcc00317 	ldw	r19,12(sp)
  80285c:	dc800217 	ldw	r18,8(sp)
  802860:	dc400117 	ldw	r17,4(sp)
  802864:	dc000017 	ldw	r16,0(sp)
  802868:	dec00604 	addi	sp,sp,24
  80286c:	f800283a 	ret

00802870 <_Balloc>:
  802870:	20800417 	ldw	r2,16(r4)
  802874:	defffc04 	addi	sp,sp,-16
  802878:	dc400115 	stw	r17,4(sp)
  80287c:	dc000015 	stw	r16,0(sp)
  802880:	dfc00315 	stw	ra,12(sp)
  802884:	dc800215 	stw	r18,8(sp)
  802888:	2021883a 	mov	r16,r4
  80288c:	2823883a 	mov	r17,r5
  802890:	1000071e 	bne	r2,zero,8028b0 <_Balloc+0x40>
  802894:	01000404 	movi	r4,16
  802898:	08050c80 	call	8050c8 <malloc>
  80289c:	80800415 	stw	r2,16(r16)
  8028a0:	10000115 	stw	zero,4(r2)
  8028a4:	10000215 	stw	zero,8(r2)
  8028a8:	10000015 	stw	zero,0(r2)
  8028ac:	10000315 	stw	zero,12(r2)
  8028b0:	84800417 	ldw	r18,16(r16)
  8028b4:	90800317 	ldw	r2,12(r18)
  8028b8:	10000a26 	beq	r2,zero,8028e4 <_Balloc+0x74>
  8028bc:	80800417 	ldw	r2,16(r16)
  8028c0:	8c47883a 	add	r3,r17,r17
  8028c4:	18c7883a 	add	r3,r3,r3
  8028c8:	10800317 	ldw	r2,12(r2)
  8028cc:	10c7883a 	add	r3,r2,r3
  8028d0:	18800017 	ldw	r2,0(r3)
  8028d4:	10000d26 	beq	r2,zero,80290c <_Balloc+0x9c>
  8028d8:	11000017 	ldw	r4,0(r2)
  8028dc:	19000015 	stw	r4,0(r3)
  8028e0:	00001406 	br	802934 <_Balloc+0xc4>
  8028e4:	01800844 	movi	r6,33
  8028e8:	01400104 	movi	r5,4
  8028ec:	8009883a 	mov	r4,r16
  8028f0:	08038800 	call	803880 <_calloc_r>
  8028f4:	90800315 	stw	r2,12(r18)
  8028f8:	80800417 	ldw	r2,16(r16)
  8028fc:	10800317 	ldw	r2,12(r2)
  802900:	103fee1e 	bne	r2,zero,8028bc <__alt_data_end+0xff8028bc>
  802904:	0005883a 	mov	r2,zero
  802908:	00000c06 	br	80293c <_Balloc+0xcc>
  80290c:	01400044 	movi	r5,1
  802910:	2c64983a 	sll	r18,r5,r17
  802914:	8009883a 	mov	r4,r16
  802918:	91800144 	addi	r6,r18,5
  80291c:	318d883a 	add	r6,r6,r6
  802920:	318d883a 	add	r6,r6,r6
  802924:	08038800 	call	803880 <_calloc_r>
  802928:	103ff626 	beq	r2,zero,802904 <__alt_data_end+0xff802904>
  80292c:	14400115 	stw	r17,4(r2)
  802930:	14800215 	stw	r18,8(r2)
  802934:	10000415 	stw	zero,16(r2)
  802938:	10000315 	stw	zero,12(r2)
  80293c:	dfc00317 	ldw	ra,12(sp)
  802940:	dc800217 	ldw	r18,8(sp)
  802944:	dc400117 	ldw	r17,4(sp)
  802948:	dc000017 	ldw	r16,0(sp)
  80294c:	dec00404 	addi	sp,sp,16
  802950:	f800283a 	ret

00802954 <_Bfree>:
  802954:	20800417 	ldw	r2,16(r4)
  802958:	defffd04 	addi	sp,sp,-12
  80295c:	dc400115 	stw	r17,4(sp)
  802960:	dc000015 	stw	r16,0(sp)
  802964:	dfc00215 	stw	ra,8(sp)
  802968:	2023883a 	mov	r17,r4
  80296c:	2821883a 	mov	r16,r5
  802970:	1000071e 	bne	r2,zero,802990 <_Bfree+0x3c>
  802974:	01000404 	movi	r4,16
  802978:	08050c80 	call	8050c8 <malloc>
  80297c:	88800415 	stw	r2,16(r17)
  802980:	10000115 	stw	zero,4(r2)
  802984:	10000215 	stw	zero,8(r2)
  802988:	10000015 	stw	zero,0(r2)
  80298c:	10000315 	stw	zero,12(r2)
  802990:	80000926 	beq	r16,zero,8029b8 <_Bfree+0x64>
  802994:	88c00417 	ldw	r3,16(r17)
  802998:	80800117 	ldw	r2,4(r16)
  80299c:	18c00317 	ldw	r3,12(r3)
  8029a0:	1085883a 	add	r2,r2,r2
  8029a4:	1085883a 	add	r2,r2,r2
  8029a8:	1885883a 	add	r2,r3,r2
  8029ac:	10c00017 	ldw	r3,0(r2)
  8029b0:	80c00015 	stw	r3,0(r16)
  8029b4:	14000015 	stw	r16,0(r2)
  8029b8:	dfc00217 	ldw	ra,8(sp)
  8029bc:	dc400117 	ldw	r17,4(sp)
  8029c0:	dc000017 	ldw	r16,0(sp)
  8029c4:	dec00304 	addi	sp,sp,12
  8029c8:	f800283a 	ret

008029cc <__multadd>:
  8029cc:	defff604 	addi	sp,sp,-40
  8029d0:	dc400115 	stw	r17,4(sp)
  8029d4:	2c400417 	ldw	r17,16(r5)
  8029d8:	ddc00715 	stw	r23,28(sp)
  8029dc:	dd800615 	stw	r22,24(sp)
  8029e0:	dd400515 	stw	r21,20(sp)
  8029e4:	dd000415 	stw	r20,16(sp)
  8029e8:	dcc00315 	stw	r19,12(sp)
  8029ec:	dc000015 	stw	r16,0(sp)
  8029f0:	dfc00915 	stw	ra,36(sp)
  8029f4:	df000815 	stw	fp,32(sp)
  8029f8:	dc800215 	stw	r18,8(sp)
  8029fc:	2027883a 	mov	r19,r4
  802a00:	2821883a 	mov	r16,r5
  802a04:	3029883a 	mov	r20,r6
  802a08:	382b883a 	mov	r21,r7
  802a0c:	2d800504 	addi	r22,r5,20
  802a10:	002f883a 	mov	r23,zero
  802a14:	b7000017 	ldw	fp,0(r22)
  802a18:	a00b883a 	mov	r5,r20
  802a1c:	bdc00044 	addi	r23,r23,1
  802a20:	e13fffcc 	andi	r4,fp,65535
  802a24:	08015180 	call	801518 <__mulsi3>
  802a28:	e008d43a 	srli	r4,fp,16
  802a2c:	a00b883a 	mov	r5,r20
  802a30:	1565883a 	add	r18,r2,r21
  802a34:	08015180 	call	801518 <__mulsi3>
  802a38:	9006d43a 	srli	r3,r18,16
  802a3c:	94bfffcc 	andi	r18,r18,65535
  802a40:	b5800104 	addi	r22,r22,4
  802a44:	10c5883a 	add	r2,r2,r3
  802a48:	102ad43a 	srli	r21,r2,16
  802a4c:	1004943a 	slli	r2,r2,16
  802a50:	14a5883a 	add	r18,r2,r18
  802a54:	b4bfff15 	stw	r18,-4(r22)
  802a58:	bc7fee16 	blt	r23,r17,802a14 <__alt_data_end+0xff802a14>
  802a5c:	a8001926 	beq	r21,zero,802ac4 <__multadd+0xf8>
  802a60:	80800217 	ldw	r2,8(r16)
  802a64:	88801016 	blt	r17,r2,802aa8 <__multadd+0xdc>
  802a68:	81400117 	ldw	r5,4(r16)
  802a6c:	9809883a 	mov	r4,r19
  802a70:	29400044 	addi	r5,r5,1
  802a74:	08028700 	call	802870 <_Balloc>
  802a78:	81800417 	ldw	r6,16(r16)
  802a7c:	81400304 	addi	r5,r16,12
  802a80:	11000304 	addi	r4,r2,12
  802a84:	31800084 	addi	r6,r6,2
  802a88:	318d883a 	add	r6,r6,r6
  802a8c:	318d883a 	add	r6,r6,r6
  802a90:	1025883a 	mov	r18,r2
  802a94:	08050f00 	call	8050f0 <memcpy>
  802a98:	800b883a 	mov	r5,r16
  802a9c:	9809883a 	mov	r4,r19
  802aa0:	08029540 	call	802954 <_Bfree>
  802aa4:	9021883a 	mov	r16,r18
  802aa8:	88800144 	addi	r2,r17,5
  802aac:	1085883a 	add	r2,r2,r2
  802ab0:	1085883a 	add	r2,r2,r2
  802ab4:	8085883a 	add	r2,r16,r2
  802ab8:	15400015 	stw	r21,0(r2)
  802abc:	8c400044 	addi	r17,r17,1
  802ac0:	84400415 	stw	r17,16(r16)
  802ac4:	8005883a 	mov	r2,r16
  802ac8:	dfc00917 	ldw	ra,36(sp)
  802acc:	df000817 	ldw	fp,32(sp)
  802ad0:	ddc00717 	ldw	r23,28(sp)
  802ad4:	dd800617 	ldw	r22,24(sp)
  802ad8:	dd400517 	ldw	r21,20(sp)
  802adc:	dd000417 	ldw	r20,16(sp)
  802ae0:	dcc00317 	ldw	r19,12(sp)
  802ae4:	dc800217 	ldw	r18,8(sp)
  802ae8:	dc400117 	ldw	r17,4(sp)
  802aec:	dc000017 	ldw	r16,0(sp)
  802af0:	dec00a04 	addi	sp,sp,40
  802af4:	f800283a 	ret

00802af8 <__s2b>:
  802af8:	defff904 	addi	sp,sp,-28
  802afc:	dc800215 	stw	r18,8(sp)
  802b00:	dc000015 	stw	r16,0(sp)
  802b04:	2025883a 	mov	r18,r4
  802b08:	2821883a 	mov	r16,r5
  802b0c:	39000204 	addi	r4,r7,8
  802b10:	01400244 	movi	r5,9
  802b14:	dcc00315 	stw	r19,12(sp)
  802b18:	dc400115 	stw	r17,4(sp)
  802b1c:	dfc00615 	stw	ra,24(sp)
  802b20:	dd400515 	stw	r21,20(sp)
  802b24:	dd000415 	stw	r20,16(sp)
  802b28:	3023883a 	mov	r17,r6
  802b2c:	3827883a 	mov	r19,r7
  802b30:	08052380 	call	805238 <__divsi3>
  802b34:	00c00044 	movi	r3,1
  802b38:	000b883a 	mov	r5,zero
  802b3c:	1880030e 	bge	r3,r2,802b4c <__s2b+0x54>
  802b40:	18c7883a 	add	r3,r3,r3
  802b44:	29400044 	addi	r5,r5,1
  802b48:	003ffc06 	br	802b3c <__alt_data_end+0xff802b3c>
  802b4c:	9009883a 	mov	r4,r18
  802b50:	08028700 	call	802870 <_Balloc>
  802b54:	d8c00717 	ldw	r3,28(sp)
  802b58:	10c00515 	stw	r3,20(r2)
  802b5c:	00c00044 	movi	r3,1
  802b60:	10c00415 	stw	r3,16(r2)
  802b64:	00c00244 	movi	r3,9
  802b68:	1c400e0e 	bge	r3,r17,802ba4 <__s2b+0xac>
  802b6c:	80e9883a 	add	r20,r16,r3
  802b70:	a02b883a 	mov	r21,r20
  802b74:	8461883a 	add	r16,r16,r17
  802b78:	a9c00007 	ldb	r7,0(r21)
  802b7c:	01800284 	movi	r6,10
  802b80:	100b883a 	mov	r5,r2
  802b84:	39fff404 	addi	r7,r7,-48
  802b88:	9009883a 	mov	r4,r18
  802b8c:	ad400044 	addi	r21,r21,1
  802b90:	08029cc0 	call	8029cc <__multadd>
  802b94:	ac3ff81e 	bne	r21,r16,802b78 <__alt_data_end+0xff802b78>
  802b98:	a461883a 	add	r16,r20,r17
  802b9c:	843ffe04 	addi	r16,r16,-8
  802ba0:	00000206 	br	802bac <__s2b+0xb4>
  802ba4:	84000284 	addi	r16,r16,10
  802ba8:	1823883a 	mov	r17,r3
  802bac:	8c23c83a 	sub	r17,r17,r16
  802bb0:	8c07883a 	add	r3,r17,r16
  802bb4:	1cc0080e 	bge	r3,r19,802bd8 <__s2b+0xe0>
  802bb8:	81c00007 	ldb	r7,0(r16)
  802bbc:	01800284 	movi	r6,10
  802bc0:	100b883a 	mov	r5,r2
  802bc4:	39fff404 	addi	r7,r7,-48
  802bc8:	9009883a 	mov	r4,r18
  802bcc:	08029cc0 	call	8029cc <__multadd>
  802bd0:	84000044 	addi	r16,r16,1
  802bd4:	003ff606 	br	802bb0 <__alt_data_end+0xff802bb0>
  802bd8:	dfc00617 	ldw	ra,24(sp)
  802bdc:	dd400517 	ldw	r21,20(sp)
  802be0:	dd000417 	ldw	r20,16(sp)
  802be4:	dcc00317 	ldw	r19,12(sp)
  802be8:	dc800217 	ldw	r18,8(sp)
  802bec:	dc400117 	ldw	r17,4(sp)
  802bf0:	dc000017 	ldw	r16,0(sp)
  802bf4:	dec00704 	addi	sp,sp,28
  802bf8:	f800283a 	ret

00802bfc <__hi0bits>:
  802bfc:	20bfffec 	andhi	r2,r4,65535
  802c00:	1000031e 	bne	r2,zero,802c10 <__hi0bits+0x14>
  802c04:	2008943a 	slli	r4,r4,16
  802c08:	00800404 	movi	r2,16
  802c0c:	00000106 	br	802c14 <__hi0bits+0x18>
  802c10:	0005883a 	mov	r2,zero
  802c14:	20ffc02c 	andhi	r3,r4,65280
  802c18:	1800021e 	bne	r3,zero,802c24 <__hi0bits+0x28>
  802c1c:	2008923a 	slli	r4,r4,8
  802c20:	10800204 	addi	r2,r2,8
  802c24:	20fc002c 	andhi	r3,r4,61440
  802c28:	1800021e 	bne	r3,zero,802c34 <__hi0bits+0x38>
  802c2c:	2008913a 	slli	r4,r4,4
  802c30:	10800104 	addi	r2,r2,4
  802c34:	20f0002c 	andhi	r3,r4,49152
  802c38:	1800031e 	bne	r3,zero,802c48 <__hi0bits+0x4c>
  802c3c:	2109883a 	add	r4,r4,r4
  802c40:	10800084 	addi	r2,r2,2
  802c44:	2109883a 	add	r4,r4,r4
  802c48:	20000516 	blt	r4,zero,802c60 <__hi0bits+0x64>
  802c4c:	2110002c 	andhi	r4,r4,16384
  802c50:	20000226 	beq	r4,zero,802c5c <__hi0bits+0x60>
  802c54:	10800044 	addi	r2,r2,1
  802c58:	f800283a 	ret
  802c5c:	00800804 	movi	r2,32
  802c60:	f800283a 	ret

00802c64 <__lo0bits>:
  802c64:	20c00017 	ldw	r3,0(r4)
  802c68:	188001cc 	andi	r2,r3,7
  802c6c:	10000c26 	beq	r2,zero,802ca0 <__lo0bits+0x3c>
  802c70:	1880004c 	andi	r2,r3,1
  802c74:	1000231e 	bne	r2,zero,802d04 <__lo0bits+0xa0>
  802c78:	1880008c 	andi	r2,r3,2
  802c7c:	10000426 	beq	r2,zero,802c90 <__lo0bits+0x2c>
  802c80:	1806d07a 	srli	r3,r3,1
  802c84:	00800044 	movi	r2,1
  802c88:	20c00015 	stw	r3,0(r4)
  802c8c:	f800283a 	ret
  802c90:	1806d0ba 	srli	r3,r3,2
  802c94:	00800084 	movi	r2,2
  802c98:	20c00015 	stw	r3,0(r4)
  802c9c:	f800283a 	ret
  802ca0:	18bfffcc 	andi	r2,r3,65535
  802ca4:	1000031e 	bne	r2,zero,802cb4 <__lo0bits+0x50>
  802ca8:	1806d43a 	srli	r3,r3,16
  802cac:	00800404 	movi	r2,16
  802cb0:	00000106 	br	802cb8 <__lo0bits+0x54>
  802cb4:	0005883a 	mov	r2,zero
  802cb8:	19403fcc 	andi	r5,r3,255
  802cbc:	2800021e 	bne	r5,zero,802cc8 <__lo0bits+0x64>
  802cc0:	1806d23a 	srli	r3,r3,8
  802cc4:	10800204 	addi	r2,r2,8
  802cc8:	194003cc 	andi	r5,r3,15
  802ccc:	2800021e 	bne	r5,zero,802cd8 <__lo0bits+0x74>
  802cd0:	1806d13a 	srli	r3,r3,4
  802cd4:	10800104 	addi	r2,r2,4
  802cd8:	194000cc 	andi	r5,r3,3
  802cdc:	2800021e 	bne	r5,zero,802ce8 <__lo0bits+0x84>
  802ce0:	1806d0ba 	srli	r3,r3,2
  802ce4:	10800084 	addi	r2,r2,2
  802ce8:	1940004c 	andi	r5,r3,1
  802cec:	2800031e 	bne	r5,zero,802cfc <__lo0bits+0x98>
  802cf0:	1806d07a 	srli	r3,r3,1
  802cf4:	18000526 	beq	r3,zero,802d0c <__lo0bits+0xa8>
  802cf8:	10800044 	addi	r2,r2,1
  802cfc:	20c00015 	stw	r3,0(r4)
  802d00:	f800283a 	ret
  802d04:	0005883a 	mov	r2,zero
  802d08:	f800283a 	ret
  802d0c:	00800804 	movi	r2,32
  802d10:	f800283a 	ret

00802d14 <__i2b>:
  802d14:	defffd04 	addi	sp,sp,-12
  802d18:	dc000015 	stw	r16,0(sp)
  802d1c:	04000044 	movi	r16,1
  802d20:	dc400115 	stw	r17,4(sp)
  802d24:	2823883a 	mov	r17,r5
  802d28:	800b883a 	mov	r5,r16
  802d2c:	dfc00215 	stw	ra,8(sp)
  802d30:	08028700 	call	802870 <_Balloc>
  802d34:	14400515 	stw	r17,20(r2)
  802d38:	14000415 	stw	r16,16(r2)
  802d3c:	dfc00217 	ldw	ra,8(sp)
  802d40:	dc400117 	ldw	r17,4(sp)
  802d44:	dc000017 	ldw	r16,0(sp)
  802d48:	dec00304 	addi	sp,sp,12
  802d4c:	f800283a 	ret

00802d50 <__multiply>:
  802d50:	28c00417 	ldw	r3,16(r5)
  802d54:	30800417 	ldw	r2,16(r6)
  802d58:	deffef04 	addi	sp,sp,-68
  802d5c:	dc800915 	stw	r18,36(sp)
  802d60:	dc000715 	stw	r16,28(sp)
  802d64:	dfc01015 	stw	ra,64(sp)
  802d68:	df000f15 	stw	fp,60(sp)
  802d6c:	ddc00e15 	stw	r23,56(sp)
  802d70:	dd800d15 	stw	r22,52(sp)
  802d74:	dd400c15 	stw	r21,48(sp)
  802d78:	dd000b15 	stw	r20,44(sp)
  802d7c:	dcc00a15 	stw	r19,40(sp)
  802d80:	dc400815 	stw	r17,32(sp)
  802d84:	2825883a 	mov	r18,r5
  802d88:	3021883a 	mov	r16,r6
  802d8c:	1880020e 	bge	r3,r2,802d98 <__multiply+0x48>
  802d90:	3025883a 	mov	r18,r6
  802d94:	2821883a 	mov	r16,r5
  802d98:	94c00417 	ldw	r19,16(r18)
  802d9c:	85000417 	ldw	r20,16(r16)
  802da0:	90800217 	ldw	r2,8(r18)
  802da4:	91400117 	ldw	r5,4(r18)
  802da8:	9d2f883a 	add	r23,r19,r20
  802dac:	15c0010e 	bge	r2,r23,802db4 <__multiply+0x64>
  802db0:	29400044 	addi	r5,r5,1
  802db4:	08028700 	call	802870 <_Balloc>
  802db8:	bdeb883a 	add	r21,r23,r23
  802dbc:	15800504 	addi	r22,r2,20
  802dc0:	ad6b883a 	add	r21,r21,r21
  802dc4:	100f883a 	mov	r7,r2
  802dc8:	b56b883a 	add	r21,r22,r21
  802dcc:	b005883a 	mov	r2,r22
  802dd0:	1540032e 	bgeu	r2,r21,802de0 <__multiply+0x90>
  802dd4:	10000015 	stw	zero,0(r2)
  802dd8:	10800104 	addi	r2,r2,4
  802ddc:	003ffc06 	br	802dd0 <__alt_data_end+0xff802dd0>
  802de0:	9ce7883a 	add	r19,r19,r19
  802de4:	a529883a 	add	r20,r20,r20
  802de8:	94800504 	addi	r18,r18,20
  802dec:	9ce7883a 	add	r19,r19,r19
  802df0:	84000504 	addi	r16,r16,20
  802df4:	a529883a 	add	r20,r20,r20
  802df8:	94e7883a 	add	r19,r18,r19
  802dfc:	8529883a 	add	r20,r16,r20
  802e00:	dcc00015 	stw	r19,0(sp)
  802e04:	dd000115 	stw	r20,4(sp)
  802e08:	d8800117 	ldw	r2,4(sp)
  802e0c:	80805f2e 	bgeu	r16,r2,802f8c <__multiply+0x23c>
  802e10:	8240000b 	ldhu	r9,0(r16)
  802e14:	48002726 	beq	r9,zero,802eb4 <__multiply+0x164>
  802e18:	b00d883a 	mov	r6,r22
  802e1c:	9027883a 	mov	r19,r18
  802e20:	0029883a 	mov	r20,zero
  802e24:	9ac00017 	ldw	r11,0(r19)
  802e28:	480b883a 	mov	r5,r9
  802e2c:	37000017 	ldw	fp,0(r6)
  802e30:	593fffcc 	andi	r4,r11,65535
  802e34:	d9800215 	stw	r6,8(sp)
  802e38:	d9c00615 	stw	r7,24(sp)
  802e3c:	d9800515 	stw	r6,20(sp)
  802e40:	da400315 	stw	r9,12(sp)
  802e44:	dac00415 	stw	r11,16(sp)
  802e48:	08015180 	call	801518 <__mulsi3>
  802e4c:	dac00417 	ldw	r11,16(sp)
  802e50:	da400317 	ldw	r9,12(sp)
  802e54:	e47fffcc 	andi	r17,fp,65535
  802e58:	5808d43a 	srli	r4,r11,16
  802e5c:	1445883a 	add	r2,r2,r17
  802e60:	480b883a 	mov	r5,r9
  802e64:	1523883a 	add	r17,r2,r20
  802e68:	e038d43a 	srli	fp,fp,16
  802e6c:	08015180 	call	801518 <__mulsi3>
  802e70:	8806d43a 	srli	r3,r17,16
  802e74:	1705883a 	add	r2,r2,fp
  802e78:	d9800217 	ldw	r6,8(sp)
  802e7c:	10c5883a 	add	r2,r2,r3
  802e80:	1028d43a 	srli	r20,r2,16
  802e84:	1004943a 	slli	r2,r2,16
  802e88:	8c7fffcc 	andi	r17,r17,65535
  802e8c:	9cc00104 	addi	r19,r19,4
  802e90:	1462b03a 	or	r17,r2,r17
  802e94:	d8800017 	ldw	r2,0(sp)
  802e98:	34400015 	stw	r17,0(r6)
  802e9c:	d9c00617 	ldw	r7,24(sp)
  802ea0:	31800104 	addi	r6,r6,4
  802ea4:	da000517 	ldw	r8,20(sp)
  802ea8:	da400317 	ldw	r9,12(sp)
  802eac:	98bfdd36 	bltu	r19,r2,802e24 <__alt_data_end+0xff802e24>
  802eb0:	45000115 	stw	r20,4(r8)
  802eb4:	82000017 	ldw	r8,0(r16)
  802eb8:	4010d43a 	srli	r8,r8,16
  802ebc:	40002c26 	beq	r8,zero,802f70 <__multiply+0x220>
  802ec0:	b4400017 	ldw	r17,0(r22)
  802ec4:	9027883a 	mov	r19,r18
  802ec8:	b015883a 	mov	r10,r22
  802ecc:	b029883a 	mov	r20,r22
  802ed0:	0039883a 	mov	fp,zero
  802ed4:	9900000b 	ldhu	r4,0(r19)
  802ed8:	400b883a 	mov	r5,r8
  802edc:	d9c00615 	stw	r7,24(sp)
  802ee0:	da000515 	stw	r8,20(sp)
  802ee4:	da800215 	stw	r10,8(sp)
  802ee8:	08015180 	call	801518 <__mulsi3>
  802eec:	a0c00017 	ldw	r3,0(r20)
  802ef0:	da800217 	ldw	r10,8(sp)
  802ef4:	8c7fffcc 	andi	r17,r17,65535
  802ef8:	1806d43a 	srli	r3,r3,16
  802efc:	da000517 	ldw	r8,20(sp)
  802f00:	a2c00104 	addi	r11,r20,4
  802f04:	10c5883a 	add	r2,r2,r3
  802f08:	1739883a 	add	fp,r2,fp
  802f0c:	e004943a 	slli	r2,fp,16
  802f10:	400b883a 	mov	r5,r8
  802f14:	e038d43a 	srli	fp,fp,16
  802f18:	1444b03a 	or	r2,r2,r17
  802f1c:	50800015 	stw	r2,0(r10)
  802f20:	99000017 	ldw	r4,0(r19)
  802f24:	da800215 	stw	r10,8(sp)
  802f28:	dac00415 	stw	r11,16(sp)
  802f2c:	2008d43a 	srli	r4,r4,16
  802f30:	9cc00104 	addi	r19,r19,4
  802f34:	08015180 	call	801518 <__mulsi3>
  802f38:	dac00417 	ldw	r11,16(sp)
  802f3c:	da800217 	ldw	r10,8(sp)
  802f40:	d9c00617 	ldw	r7,24(sp)
  802f44:	58c0000b 	ldhu	r3,0(r11)
  802f48:	52800104 	addi	r10,r10,4
  802f4c:	da000517 	ldw	r8,20(sp)
  802f50:	10c5883a 	add	r2,r2,r3
  802f54:	1723883a 	add	r17,r2,fp
  802f58:	d8800017 	ldw	r2,0(sp)
  802f5c:	8838d43a 	srli	fp,r17,16
  802f60:	9880022e 	bgeu	r19,r2,802f6c <__multiply+0x21c>
  802f64:	5829883a 	mov	r20,r11
  802f68:	003fda06 	br	802ed4 <__alt_data_end+0xff802ed4>
  802f6c:	a4400115 	stw	r17,4(r20)
  802f70:	84000104 	addi	r16,r16,4
  802f74:	b5800104 	addi	r22,r22,4
  802f78:	003fa306 	br	802e08 <__alt_data_end+0xff802e08>
  802f7c:	ad7fff04 	addi	r21,r21,-4
  802f80:	a8800017 	ldw	r2,0(r21)
  802f84:	1000021e 	bne	r2,zero,802f90 <__multiply+0x240>
  802f88:	bdffffc4 	addi	r23,r23,-1
  802f8c:	05fffb16 	blt	zero,r23,802f7c <__alt_data_end+0xff802f7c>
  802f90:	3805883a 	mov	r2,r7
  802f94:	3dc00415 	stw	r23,16(r7)
  802f98:	dfc01017 	ldw	ra,64(sp)
  802f9c:	df000f17 	ldw	fp,60(sp)
  802fa0:	ddc00e17 	ldw	r23,56(sp)
  802fa4:	dd800d17 	ldw	r22,52(sp)
  802fa8:	dd400c17 	ldw	r21,48(sp)
  802fac:	dd000b17 	ldw	r20,44(sp)
  802fb0:	dcc00a17 	ldw	r19,40(sp)
  802fb4:	dc800917 	ldw	r18,36(sp)
  802fb8:	dc400817 	ldw	r17,32(sp)
  802fbc:	dc000717 	ldw	r16,28(sp)
  802fc0:	dec01104 	addi	sp,sp,68
  802fc4:	f800283a 	ret

00802fc8 <__pow5mult>:
  802fc8:	defffa04 	addi	sp,sp,-24
  802fcc:	dc800215 	stw	r18,8(sp)
  802fd0:	dc400115 	stw	r17,4(sp)
  802fd4:	dfc00515 	stw	ra,20(sp)
  802fd8:	dd000415 	stw	r20,16(sp)
  802fdc:	dcc00315 	stw	r19,12(sp)
  802fe0:	dc000015 	stw	r16,0(sp)
  802fe4:	308000cc 	andi	r2,r6,3
  802fe8:	2025883a 	mov	r18,r4
  802fec:	3023883a 	mov	r17,r6
  802ff0:	10000b26 	beq	r2,zero,803020 <__pow5mult+0x58>
  802ff4:	10bfffc4 	addi	r2,r2,-1
  802ff8:	1085883a 	add	r2,r2,r2
  802ffc:	00c02074 	movhi	r3,129
  803000:	18e5e904 	addi	r3,r3,-26716
  803004:	1085883a 	add	r2,r2,r2
  803008:	1885883a 	add	r2,r3,r2
  80300c:	11800017 	ldw	r6,0(r2)
  803010:	000f883a 	mov	r7,zero
  803014:	08029cc0 	call	8029cc <__multadd>
  803018:	1029883a 	mov	r20,r2
  80301c:	00000106 	br	803024 <__pow5mult+0x5c>
  803020:	2829883a 	mov	r20,r5
  803024:	8823d0ba 	srai	r17,r17,2
  803028:	88002b26 	beq	r17,zero,8030d8 <__pow5mult+0x110>
  80302c:	90800417 	ldw	r2,16(r18)
  803030:	1000071e 	bne	r2,zero,803050 <__pow5mult+0x88>
  803034:	01000404 	movi	r4,16
  803038:	08050c80 	call	8050c8 <malloc>
  80303c:	90800415 	stw	r2,16(r18)
  803040:	10000115 	stw	zero,4(r2)
  803044:	10000215 	stw	zero,8(r2)
  803048:	10000015 	stw	zero,0(r2)
  80304c:	10000315 	stw	zero,12(r2)
  803050:	94c00417 	ldw	r19,16(r18)
  803054:	9c000217 	ldw	r16,8(r19)
  803058:	80000c1e 	bne	r16,zero,80308c <__pow5mult+0xc4>
  80305c:	01409c44 	movi	r5,625
  803060:	9009883a 	mov	r4,r18
  803064:	0802d140 	call	802d14 <__i2b>
  803068:	98800215 	stw	r2,8(r19)
  80306c:	1021883a 	mov	r16,r2
  803070:	10000015 	stw	zero,0(r2)
  803074:	00000506 	br	80308c <__pow5mult+0xc4>
  803078:	8823d07a 	srai	r17,r17,1
  80307c:	88001626 	beq	r17,zero,8030d8 <__pow5mult+0x110>
  803080:	80800017 	ldw	r2,0(r16)
  803084:	10000d26 	beq	r2,zero,8030bc <__pow5mult+0xf4>
  803088:	1021883a 	mov	r16,r2
  80308c:	8880004c 	andi	r2,r17,1
  803090:	103ff926 	beq	r2,zero,803078 <__alt_data_end+0xff803078>
  803094:	a00b883a 	mov	r5,r20
  803098:	800d883a 	mov	r6,r16
  80309c:	9009883a 	mov	r4,r18
  8030a0:	0802d500 	call	802d50 <__multiply>
  8030a4:	1027883a 	mov	r19,r2
  8030a8:	a00b883a 	mov	r5,r20
  8030ac:	9009883a 	mov	r4,r18
  8030b0:	08029540 	call	802954 <_Bfree>
  8030b4:	9829883a 	mov	r20,r19
  8030b8:	003fef06 	br	803078 <__alt_data_end+0xff803078>
  8030bc:	800d883a 	mov	r6,r16
  8030c0:	800b883a 	mov	r5,r16
  8030c4:	9009883a 	mov	r4,r18
  8030c8:	0802d500 	call	802d50 <__multiply>
  8030cc:	80800015 	stw	r2,0(r16)
  8030d0:	10000015 	stw	zero,0(r2)
  8030d4:	003fec06 	br	803088 <__alt_data_end+0xff803088>
  8030d8:	a005883a 	mov	r2,r20
  8030dc:	dfc00517 	ldw	ra,20(sp)
  8030e0:	dd000417 	ldw	r20,16(sp)
  8030e4:	dcc00317 	ldw	r19,12(sp)
  8030e8:	dc800217 	ldw	r18,8(sp)
  8030ec:	dc400117 	ldw	r17,4(sp)
  8030f0:	dc000017 	ldw	r16,0(sp)
  8030f4:	dec00604 	addi	sp,sp,24
  8030f8:	f800283a 	ret

008030fc <__lshift>:
  8030fc:	defff804 	addi	sp,sp,-32
  803100:	dc400215 	stw	r17,8(sp)
  803104:	2823883a 	mov	r17,r5
  803108:	dd000515 	stw	r20,20(sp)
  80310c:	dc000115 	stw	r16,4(sp)
  803110:	8d000417 	ldw	r20,16(r17)
  803114:	3021d17a 	srai	r16,r6,5
  803118:	29400117 	ldw	r5,4(r5)
  80311c:	88800217 	ldw	r2,8(r17)
  803120:	8529883a 	add	r20,r16,r20
  803124:	dd400615 	stw	r21,24(sp)
  803128:	dcc00415 	stw	r19,16(sp)
  80312c:	dc800315 	stw	r18,12(sp)
  803130:	dfc00715 	stw	ra,28(sp)
  803134:	2025883a 	mov	r18,r4
  803138:	302b883a 	mov	r21,r6
  80313c:	a4c00044 	addi	r19,r20,1
  803140:	14c0030e 	bge	r2,r19,803150 <__lshift+0x54>
  803144:	29400044 	addi	r5,r5,1
  803148:	1085883a 	add	r2,r2,r2
  80314c:	003ffc06 	br	803140 <__alt_data_end+0xff803140>
  803150:	9009883a 	mov	r4,r18
  803154:	08028700 	call	802870 <_Balloc>
  803158:	10c00504 	addi	r3,r2,20
  80315c:	180d883a 	mov	r6,r3
  803160:	000b883a 	mov	r5,zero
  803164:	2c00040e 	bge	r5,r16,803178 <__lshift+0x7c>
  803168:	30000015 	stw	zero,0(r6)
  80316c:	29400044 	addi	r5,r5,1
  803170:	31800104 	addi	r6,r6,4
  803174:	003ffb06 	br	803164 <__alt_data_end+0xff803164>
  803178:	8009883a 	mov	r4,r16
  80317c:	8000010e 	bge	r16,zero,803184 <__lshift+0x88>
  803180:	0009883a 	mov	r4,zero
  803184:	89400417 	ldw	r5,16(r17)
  803188:	2109883a 	add	r4,r4,r4
  80318c:	2109883a 	add	r4,r4,r4
  803190:	294b883a 	add	r5,r5,r5
  803194:	1907883a 	add	r3,r3,r4
  803198:	294b883a 	add	r5,r5,r5
  80319c:	89000504 	addi	r4,r17,20
  8031a0:	a98007cc 	andi	r6,r21,31
  8031a4:	214b883a 	add	r5,r4,r5
  8031a8:	30001126 	beq	r6,zero,8031f0 <__lshift+0xf4>
  8031ac:	02000804 	movi	r8,32
  8031b0:	4191c83a 	sub	r8,r8,r6
  8031b4:	000f883a 	mov	r7,zero
  8031b8:	22400017 	ldw	r9,0(r4)
  8031bc:	21000104 	addi	r4,r4,4
  8031c0:	1815883a 	mov	r10,r3
  8031c4:	4992983a 	sll	r9,r9,r6
  8031c8:	18c00104 	addi	r3,r3,4
  8031cc:	49ceb03a 	or	r7,r9,r7
  8031d0:	19ffff15 	stw	r7,-4(r3)
  8031d4:	21ffff17 	ldw	r7,-4(r4)
  8031d8:	3a0ed83a 	srl	r7,r7,r8
  8031dc:	217ff636 	bltu	r4,r5,8031b8 <__alt_data_end+0xff8031b8>
  8031e0:	51c00115 	stw	r7,4(r10)
  8031e4:	38000726 	beq	r7,zero,803204 <__lshift+0x108>
  8031e8:	a4c00084 	addi	r19,r20,2
  8031ec:	00000506 	br	803204 <__lshift+0x108>
  8031f0:	21800017 	ldw	r6,0(r4)
  8031f4:	21000104 	addi	r4,r4,4
  8031f8:	18c00104 	addi	r3,r3,4
  8031fc:	19bfff15 	stw	r6,-4(r3)
  803200:	217ffb36 	bltu	r4,r5,8031f0 <__alt_data_end+0xff8031f0>
  803204:	9cffffc4 	addi	r19,r19,-1
  803208:	14c00415 	stw	r19,16(r2)
  80320c:	880b883a 	mov	r5,r17
  803210:	9009883a 	mov	r4,r18
  803214:	d8800015 	stw	r2,0(sp)
  803218:	08029540 	call	802954 <_Bfree>
  80321c:	d8800017 	ldw	r2,0(sp)
  803220:	dfc00717 	ldw	ra,28(sp)
  803224:	dd400617 	ldw	r21,24(sp)
  803228:	dd000517 	ldw	r20,20(sp)
  80322c:	dcc00417 	ldw	r19,16(sp)
  803230:	dc800317 	ldw	r18,12(sp)
  803234:	dc400217 	ldw	r17,8(sp)
  803238:	dc000117 	ldw	r16,4(sp)
  80323c:	dec00804 	addi	sp,sp,32
  803240:	f800283a 	ret

00803244 <__mcmp>:
  803244:	20800417 	ldw	r2,16(r4)
  803248:	28c00417 	ldw	r3,16(r5)
  80324c:	10c5c83a 	sub	r2,r2,r3
  803250:	1000121e 	bne	r2,zero,80329c <__mcmp+0x58>
  803254:	18c7883a 	add	r3,r3,r3
  803258:	18c7883a 	add	r3,r3,r3
  80325c:	21000504 	addi	r4,r4,20
  803260:	29400504 	addi	r5,r5,20
  803264:	20c5883a 	add	r2,r4,r3
  803268:	28cb883a 	add	r5,r5,r3
  80326c:	10bfff04 	addi	r2,r2,-4
  803270:	297fff04 	addi	r5,r5,-4
  803274:	11800017 	ldw	r6,0(r2)
  803278:	28c00017 	ldw	r3,0(r5)
  80327c:	30c00326 	beq	r6,r3,80328c <__mcmp+0x48>
  803280:	30c00536 	bltu	r6,r3,803298 <__mcmp+0x54>
  803284:	00800044 	movi	r2,1
  803288:	f800283a 	ret
  80328c:	20bff736 	bltu	r4,r2,80326c <__alt_data_end+0xff80326c>
  803290:	0005883a 	mov	r2,zero
  803294:	f800283a 	ret
  803298:	00bfffc4 	movi	r2,-1
  80329c:	f800283a 	ret

008032a0 <__mdiff>:
  8032a0:	defffb04 	addi	sp,sp,-20
  8032a4:	dc000015 	stw	r16,0(sp)
  8032a8:	2821883a 	mov	r16,r5
  8032ac:	dcc00315 	stw	r19,12(sp)
  8032b0:	300b883a 	mov	r5,r6
  8032b4:	2027883a 	mov	r19,r4
  8032b8:	8009883a 	mov	r4,r16
  8032bc:	dc400115 	stw	r17,4(sp)
  8032c0:	dfc00415 	stw	ra,16(sp)
  8032c4:	dc800215 	stw	r18,8(sp)
  8032c8:	3023883a 	mov	r17,r6
  8032cc:	08032440 	call	803244 <__mcmp>
  8032d0:	1000071e 	bne	r2,zero,8032f0 <__mdiff+0x50>
  8032d4:	000b883a 	mov	r5,zero
  8032d8:	9809883a 	mov	r4,r19
  8032dc:	08028700 	call	802870 <_Balloc>
  8032e0:	00c00044 	movi	r3,1
  8032e4:	10c00415 	stw	r3,16(r2)
  8032e8:	10000515 	stw	zero,20(r2)
  8032ec:	00004206 	br	8033f8 <__mdiff+0x158>
  8032f0:	1000050e 	bge	r2,zero,803308 <__mdiff+0x68>
  8032f4:	8005883a 	mov	r2,r16
  8032f8:	04800044 	movi	r18,1
  8032fc:	8821883a 	mov	r16,r17
  803300:	1023883a 	mov	r17,r2
  803304:	00000106 	br	80330c <__mdiff+0x6c>
  803308:	0025883a 	mov	r18,zero
  80330c:	81400117 	ldw	r5,4(r16)
  803310:	9809883a 	mov	r4,r19
  803314:	08028700 	call	802870 <_Balloc>
  803318:	82000417 	ldw	r8,16(r16)
  80331c:	88c00417 	ldw	r3,16(r17)
  803320:	81400504 	addi	r5,r16,20
  803324:	420f883a 	add	r7,r8,r8
  803328:	18c7883a 	add	r3,r3,r3
  80332c:	39cf883a 	add	r7,r7,r7
  803330:	8a800504 	addi	r10,r17,20
  803334:	18c7883a 	add	r3,r3,r3
  803338:	14800315 	stw	r18,12(r2)
  80333c:	29cf883a 	add	r7,r5,r7
  803340:	50c9883a 	add	r4,r10,r3
  803344:	13000504 	addi	r12,r2,20
  803348:	0017883a 	mov	r11,zero
  80334c:	29800017 	ldw	r6,0(r5)
  803350:	52400017 	ldw	r9,0(r10)
  803354:	52800104 	addi	r10,r10,4
  803358:	30ffffcc 	andi	r3,r6,65535
  80335c:	1ac7883a 	add	r3,r3,r11
  803360:	300cd43a 	srli	r6,r6,16
  803364:	4affffcc 	andi	r11,r9,65535
  803368:	4812d43a 	srli	r9,r9,16
  80336c:	1ac7c83a 	sub	r3,r3,r11
  803370:	29400104 	addi	r5,r5,4
  803374:	3253c83a 	sub	r9,r6,r9
  803378:	180dd43a 	srai	r6,r3,16
  80337c:	18ffffcc 	andi	r3,r3,65535
  803380:	498d883a 	add	r6,r9,r6
  803384:	3017d43a 	srai	r11,r6,16
  803388:	300c943a 	slli	r6,r6,16
  80338c:	62400104 	addi	r9,r12,4
  803390:	30c6b03a 	or	r3,r6,r3
  803394:	60c00015 	stw	r3,0(r12)
  803398:	4819883a 	mov	r12,r9
  80339c:	513feb36 	bltu	r10,r4,80334c <__alt_data_end+0xff80334c>
  8033a0:	4807883a 	mov	r3,r9
  8033a4:	29c00e2e 	bgeu	r5,r7,8033e0 <__mdiff+0x140>
  8033a8:	29800017 	ldw	r6,0(r5)
  8033ac:	4a400104 	addi	r9,r9,4
  8033b0:	29400104 	addi	r5,r5,4
  8033b4:	313fffcc 	andi	r4,r6,65535
  8033b8:	22c9883a 	add	r4,r4,r11
  8033bc:	2007d43a 	srai	r3,r4,16
  8033c0:	300cd43a 	srli	r6,r6,16
  8033c4:	213fffcc 	andi	r4,r4,65535
  8033c8:	30cd883a 	add	r6,r6,r3
  8033cc:	3017d43a 	srai	r11,r6,16
  8033d0:	300c943a 	slli	r6,r6,16
  8033d4:	3108b03a 	or	r4,r6,r4
  8033d8:	493fff15 	stw	r4,-4(r9)
  8033dc:	003ff006 	br	8033a0 <__alt_data_end+0xff8033a0>
  8033e0:	18ffff04 	addi	r3,r3,-4
  8033e4:	19000017 	ldw	r4,0(r3)
  8033e8:	2000021e 	bne	r4,zero,8033f4 <__mdiff+0x154>
  8033ec:	423fffc4 	addi	r8,r8,-1
  8033f0:	003ffb06 	br	8033e0 <__alt_data_end+0xff8033e0>
  8033f4:	12000415 	stw	r8,16(r2)
  8033f8:	dfc00417 	ldw	ra,16(sp)
  8033fc:	dcc00317 	ldw	r19,12(sp)
  803400:	dc800217 	ldw	r18,8(sp)
  803404:	dc400117 	ldw	r17,4(sp)
  803408:	dc000017 	ldw	r16,0(sp)
  80340c:	dec00504 	addi	sp,sp,20
  803410:	f800283a 	ret

00803414 <__ulp>:
  803414:	295ffc2c 	andhi	r5,r5,32752
  803418:	00bf3034 	movhi	r2,64704
  80341c:	2887883a 	add	r3,r5,r2
  803420:	00c00616 	blt	zero,r3,80343c <__ulp+0x28>
  803424:	00c7c83a 	sub	r3,zero,r3
  803428:	1805d53a 	srai	r2,r3,20
  80342c:	00c004c4 	movi	r3,19
  803430:	18800416 	blt	r3,r2,803444 <__ulp+0x30>
  803434:	00c00234 	movhi	r3,8
  803438:	1887d83a 	sra	r3,r3,r2
  80343c:	0005883a 	mov	r2,zero
  803440:	f800283a 	ret
  803444:	117ffb04 	addi	r5,r2,-20
  803448:	01000784 	movi	r4,30
  80344c:	0007883a 	mov	r3,zero
  803450:	00800044 	movi	r2,1
  803454:	21400316 	blt	r4,r5,803464 <__ulp+0x50>
  803458:	010007c4 	movi	r4,31
  80345c:	214bc83a 	sub	r5,r4,r5
  803460:	1144983a 	sll	r2,r2,r5
  803464:	f800283a 	ret

00803468 <__b2d>:
  803468:	defffa04 	addi	sp,sp,-24
  80346c:	dc000015 	stw	r16,0(sp)
  803470:	24000417 	ldw	r16,16(r4)
  803474:	dcc00315 	stw	r19,12(sp)
  803478:	24c00504 	addi	r19,r4,20
  80347c:	8421883a 	add	r16,r16,r16
  803480:	8421883a 	add	r16,r16,r16
  803484:	9c21883a 	add	r16,r19,r16
  803488:	dc400115 	stw	r17,4(sp)
  80348c:	847fff17 	ldw	r17,-4(r16)
  803490:	dd000415 	stw	r20,16(sp)
  803494:	dc800215 	stw	r18,8(sp)
  803498:	8809883a 	mov	r4,r17
  80349c:	2829883a 	mov	r20,r5
  8034a0:	dfc00515 	stw	ra,20(sp)
  8034a4:	0802bfc0 	call	802bfc <__hi0bits>
  8034a8:	01000804 	movi	r4,32
  8034ac:	2087c83a 	sub	r3,r4,r2
  8034b0:	a0c00015 	stw	r3,0(r20)
  8034b4:	00c00284 	movi	r3,10
  8034b8:	84bfff04 	addi	r18,r16,-4
  8034bc:	18800d16 	blt	r3,r2,8034f4 <__b2d+0x8c>
  8034c0:	018002c4 	movi	r6,11
  8034c4:	308bc83a 	sub	r5,r6,r2
  8034c8:	8946d83a 	srl	r3,r17,r5
  8034cc:	18cffc34 	orhi	r3,r3,16368
  8034d0:	9c80022e 	bgeu	r19,r18,8034dc <__b2d+0x74>
  8034d4:	81bffe17 	ldw	r6,-8(r16)
  8034d8:	00000106 	br	8034e0 <__b2d+0x78>
  8034dc:	000d883a 	mov	r6,zero
  8034e0:	10800544 	addi	r2,r2,21
  8034e4:	8884983a 	sll	r2,r17,r2
  8034e8:	314cd83a 	srl	r6,r6,r5
  8034ec:	1184b03a 	or	r2,r2,r6
  8034f0:	00001606 	br	80354c <__b2d+0xe4>
  8034f4:	9c80032e 	bgeu	r19,r18,803504 <__b2d+0x9c>
  8034f8:	84bffe04 	addi	r18,r16,-8
  8034fc:	817ffe17 	ldw	r5,-8(r16)
  803500:	00000106 	br	803508 <__b2d+0xa0>
  803504:	000b883a 	mov	r5,zero
  803508:	10bffd44 	addi	r2,r2,-11
  80350c:	10000d26 	beq	r2,zero,803544 <__b2d+0xdc>
  803510:	2089c83a 	sub	r4,r4,r2
  803514:	88a2983a 	sll	r17,r17,r2
  803518:	2906d83a 	srl	r3,r5,r4
  80351c:	8c4ffc34 	orhi	r17,r17,16368
  803520:	88c6b03a 	or	r3,r17,r3
  803524:	9c80022e 	bgeu	r19,r18,803530 <__b2d+0xc8>
  803528:	91bfff17 	ldw	r6,-4(r18)
  80352c:	00000106 	br	803534 <__b2d+0xcc>
  803530:	000d883a 	mov	r6,zero
  803534:	288a983a 	sll	r5,r5,r2
  803538:	3104d83a 	srl	r2,r6,r4
  80353c:	2884b03a 	or	r2,r5,r2
  803540:	00000206 	br	80354c <__b2d+0xe4>
  803544:	88cffc34 	orhi	r3,r17,16368
  803548:	2805883a 	mov	r2,r5
  80354c:	dfc00517 	ldw	ra,20(sp)
  803550:	dd000417 	ldw	r20,16(sp)
  803554:	dcc00317 	ldw	r19,12(sp)
  803558:	dc800217 	ldw	r18,8(sp)
  80355c:	dc400117 	ldw	r17,4(sp)
  803560:	dc000017 	ldw	r16,0(sp)
  803564:	dec00604 	addi	sp,sp,24
  803568:	f800283a 	ret

0080356c <__d2b>:
  80356c:	defff804 	addi	sp,sp,-32
  803570:	dc000215 	stw	r16,8(sp)
  803574:	2821883a 	mov	r16,r5
  803578:	01400044 	movi	r5,1
  80357c:	dd000615 	stw	r20,24(sp)
  803580:	dcc00515 	stw	r19,20(sp)
  803584:	dc800415 	stw	r18,16(sp)
  803588:	dc400315 	stw	r17,12(sp)
  80358c:	dfc00715 	stw	ra,28(sp)
  803590:	3023883a 	mov	r17,r6
  803594:	3827883a 	mov	r19,r7
  803598:	dc800817 	ldw	r18,32(sp)
  80359c:	08028700 	call	802870 <_Balloc>
  8035a0:	1029883a 	mov	r20,r2
  8035a4:	00800434 	movhi	r2,16
  8035a8:	10bfffc4 	addi	r2,r2,-1
  8035ac:	8884703a 	and	r2,r17,r2
  8035b0:	8822907a 	slli	r17,r17,1
  8035b4:	8822d57a 	srli	r17,r17,21
  8035b8:	88000126 	beq	r17,zero,8035c0 <__d2b+0x54>
  8035bc:	10800434 	orhi	r2,r2,16
  8035c0:	d8800015 	stw	r2,0(sp)
  8035c4:	80001526 	beq	r16,zero,80361c <__d2b+0xb0>
  8035c8:	d9000104 	addi	r4,sp,4
  8035cc:	dc000115 	stw	r16,4(sp)
  8035d0:	0802c640 	call	802c64 <__lo0bits>
  8035d4:	d9000117 	ldw	r4,4(sp)
  8035d8:	10000926 	beq	r2,zero,803600 <__d2b+0x94>
  8035dc:	d9400017 	ldw	r5,0(sp)
  8035e0:	00c00804 	movi	r3,32
  8035e4:	1887c83a 	sub	r3,r3,r2
  8035e8:	28c6983a 	sll	r3,r5,r3
  8035ec:	288ad83a 	srl	r5,r5,r2
  8035f0:	1906b03a 	or	r3,r3,r4
  8035f4:	a0c00515 	stw	r3,20(r20)
  8035f8:	d9400015 	stw	r5,0(sp)
  8035fc:	00000106 	br	803604 <__d2b+0x98>
  803600:	a1000515 	stw	r4,20(r20)
  803604:	dc000017 	ldw	r16,0(sp)
  803608:	a4000615 	stw	r16,24(r20)
  80360c:	8020c03a 	cmpne	r16,r16,zero
  803610:	84000044 	addi	r16,r16,1
  803614:	a4000415 	stw	r16,16(r20)
  803618:	00000706 	br	803638 <__d2b+0xcc>
  80361c:	d809883a 	mov	r4,sp
  803620:	0802c640 	call	802c64 <__lo0bits>
  803624:	d8c00017 	ldw	r3,0(sp)
  803628:	04000044 	movi	r16,1
  80362c:	a4000415 	stw	r16,16(r20)
  803630:	a0c00515 	stw	r3,20(r20)
  803634:	10800804 	addi	r2,r2,32
  803638:	88000626 	beq	r17,zero,803654 <__d2b+0xe8>
  80363c:	8c7ef344 	addi	r17,r17,-1075
  803640:	88a3883a 	add	r17,r17,r2
  803644:	00c00d44 	movi	r3,53
  803648:	9c400015 	stw	r17,0(r19)
  80364c:	1885c83a 	sub	r2,r3,r2
  803650:	00000c06 	br	803684 <__d2b+0x118>
  803654:	10bef384 	addi	r2,r2,-1074
  803658:	98800015 	stw	r2,0(r19)
  80365c:	00900034 	movhi	r2,16384
  803660:	10bfffc4 	addi	r2,r2,-1
  803664:	8085883a 	add	r2,r16,r2
  803668:	1085883a 	add	r2,r2,r2
  80366c:	1085883a 	add	r2,r2,r2
  803670:	a085883a 	add	r2,r20,r2
  803674:	11000517 	ldw	r4,20(r2)
  803678:	8020917a 	slli	r16,r16,5
  80367c:	0802bfc0 	call	802bfc <__hi0bits>
  803680:	8085c83a 	sub	r2,r16,r2
  803684:	90800015 	stw	r2,0(r18)
  803688:	a005883a 	mov	r2,r20
  80368c:	dfc00717 	ldw	ra,28(sp)
  803690:	dd000617 	ldw	r20,24(sp)
  803694:	dcc00517 	ldw	r19,20(sp)
  803698:	dc800417 	ldw	r18,16(sp)
  80369c:	dc400317 	ldw	r17,12(sp)
  8036a0:	dc000217 	ldw	r16,8(sp)
  8036a4:	dec00804 	addi	sp,sp,32
  8036a8:	f800283a 	ret

008036ac <__ratio>:
  8036ac:	defff904 	addi	sp,sp,-28
  8036b0:	dc400315 	stw	r17,12(sp)
  8036b4:	2823883a 	mov	r17,r5
  8036b8:	d9400104 	addi	r5,sp,4
  8036bc:	dfc00615 	stw	ra,24(sp)
  8036c0:	dcc00515 	stw	r19,20(sp)
  8036c4:	dc800415 	stw	r18,16(sp)
  8036c8:	2027883a 	mov	r19,r4
  8036cc:	dc000215 	stw	r16,8(sp)
  8036d0:	08034680 	call	803468 <__b2d>
  8036d4:	d80b883a 	mov	r5,sp
  8036d8:	8809883a 	mov	r4,r17
  8036dc:	1025883a 	mov	r18,r2
  8036e0:	1821883a 	mov	r16,r3
  8036e4:	08034680 	call	803468 <__b2d>
  8036e8:	8a000417 	ldw	r8,16(r17)
  8036ec:	99000417 	ldw	r4,16(r19)
  8036f0:	d9400117 	ldw	r5,4(sp)
  8036f4:	2209c83a 	sub	r4,r4,r8
  8036f8:	2010917a 	slli	r8,r4,5
  8036fc:	d9000017 	ldw	r4,0(sp)
  803700:	2909c83a 	sub	r4,r5,r4
  803704:	4109883a 	add	r4,r8,r4
  803708:	0100030e 	bge	zero,r4,803718 <__ratio+0x6c>
  80370c:	2008953a 	slli	r4,r4,20
  803710:	2421883a 	add	r16,r4,r16
  803714:	00000206 	br	803720 <__ratio+0x74>
  803718:	2008953a 	slli	r4,r4,20
  80371c:	1907c83a 	sub	r3,r3,r4
  803720:	100d883a 	mov	r6,r2
  803724:	180f883a 	mov	r7,r3
  803728:	9009883a 	mov	r4,r18
  80372c:	800b883a 	mov	r5,r16
  803730:	0805c980 	call	805c98 <__divdf3>
  803734:	dfc00617 	ldw	ra,24(sp)
  803738:	dcc00517 	ldw	r19,20(sp)
  80373c:	dc800417 	ldw	r18,16(sp)
  803740:	dc400317 	ldw	r17,12(sp)
  803744:	dc000217 	ldw	r16,8(sp)
  803748:	dec00704 	addi	sp,sp,28
  80374c:	f800283a 	ret

00803750 <_mprec_log10>:
  803750:	defffe04 	addi	sp,sp,-8
  803754:	dc000015 	stw	r16,0(sp)
  803758:	dfc00115 	stw	ra,4(sp)
  80375c:	008005c4 	movi	r2,23
  803760:	2021883a 	mov	r16,r4
  803764:	11000716 	blt	r2,r4,803784 <_mprec_log10+0x34>
  803768:	202090fa 	slli	r16,r4,3
  80376c:	00802074 	movhi	r2,129
  803770:	10a60004 	addi	r2,r2,-26624
  803774:	1421883a 	add	r16,r2,r16
  803778:	80800017 	ldw	r2,0(r16)
  80377c:	80c00117 	ldw	r3,4(r16)
  803780:	00000906 	br	8037a8 <_mprec_log10+0x58>
  803784:	0005883a 	mov	r2,zero
  803788:	00cffc34 	movhi	r3,16368
  80378c:	000d883a 	mov	r6,zero
  803790:	01d00934 	movhi	r7,16420
  803794:	1009883a 	mov	r4,r2
  803798:	180b883a 	mov	r5,r3
  80379c:	843fffc4 	addi	r16,r16,-1
  8037a0:	08068c00 	call	8068c0 <__muldf3>
  8037a4:	803ff91e 	bne	r16,zero,80378c <__alt_data_end+0xff80378c>
  8037a8:	dfc00117 	ldw	ra,4(sp)
  8037ac:	dc000017 	ldw	r16,0(sp)
  8037b0:	dec00204 	addi	sp,sp,8
  8037b4:	f800283a 	ret

008037b8 <__copybits>:
  8037b8:	297fffc4 	addi	r5,r5,-1
  8037bc:	280bd17a 	srai	r5,r5,5
  8037c0:	30800417 	ldw	r2,16(r6)
  8037c4:	30c00504 	addi	r3,r6,20
  8037c8:	29400044 	addi	r5,r5,1
  8037cc:	294b883a 	add	r5,r5,r5
  8037d0:	1085883a 	add	r2,r2,r2
  8037d4:	294b883a 	add	r5,r5,r5
  8037d8:	1085883a 	add	r2,r2,r2
  8037dc:	214b883a 	add	r5,r4,r5
  8037e0:	1885883a 	add	r2,r3,r2
  8037e4:	1880052e 	bgeu	r3,r2,8037fc <__copybits+0x44>
  8037e8:	19800017 	ldw	r6,0(r3)
  8037ec:	21000104 	addi	r4,r4,4
  8037f0:	18c00104 	addi	r3,r3,4
  8037f4:	21bfff15 	stw	r6,-4(r4)
  8037f8:	003ffa06 	br	8037e4 <__alt_data_end+0xff8037e4>
  8037fc:	2140032e 	bgeu	r4,r5,80380c <__copybits+0x54>
  803800:	20000015 	stw	zero,0(r4)
  803804:	21000104 	addi	r4,r4,4
  803808:	003ffc06 	br	8037fc <__alt_data_end+0xff8037fc>
  80380c:	f800283a 	ret

00803810 <__any_on>:
  803810:	20c00417 	ldw	r3,16(r4)
  803814:	2805d17a 	srai	r2,r5,5
  803818:	21800504 	addi	r6,r4,20
  80381c:	18800b16 	blt	r3,r2,80384c <__any_on+0x3c>
  803820:	10c00b0e 	bge	r2,r3,803850 <__any_on+0x40>
  803824:	294007cc 	andi	r5,r5,31
  803828:	28000926 	beq	r5,zero,803850 <__any_on+0x40>
  80382c:	1087883a 	add	r3,r2,r2
  803830:	18c7883a 	add	r3,r3,r3
  803834:	30c7883a 	add	r3,r6,r3
  803838:	19000017 	ldw	r4,0(r3)
  80383c:	2146d83a 	srl	r3,r4,r5
  803840:	194a983a 	sll	r5,r3,r5
  803844:	21400c1e 	bne	r4,r5,803878 <__any_on+0x68>
  803848:	00000106 	br	803850 <__any_on+0x40>
  80384c:	1805883a 	mov	r2,r3
  803850:	1085883a 	add	r2,r2,r2
  803854:	1085883a 	add	r2,r2,r2
  803858:	3085883a 	add	r2,r6,r2
  80385c:	3080042e 	bgeu	r6,r2,803870 <__any_on+0x60>
  803860:	10bfff04 	addi	r2,r2,-4
  803864:	10c00017 	ldw	r3,0(r2)
  803868:	183ffc26 	beq	r3,zero,80385c <__alt_data_end+0xff80385c>
  80386c:	00000206 	br	803878 <__any_on+0x68>
  803870:	0005883a 	mov	r2,zero
  803874:	f800283a 	ret
  803878:	00800044 	movi	r2,1
  80387c:	f800283a 	ret

00803880 <_calloc_r>:
  803880:	defffd04 	addi	sp,sp,-12
  803884:	dc000015 	stw	r16,0(sp)
  803888:	2021883a 	mov	r16,r4
  80388c:	2809883a 	mov	r4,r5
  803890:	300b883a 	mov	r5,r6
  803894:	dfc00215 	stw	ra,8(sp)
  803898:	dc400115 	stw	r17,4(sp)
  80389c:	08015180 	call	801518 <__mulsi3>
  8038a0:	8009883a 	mov	r4,r16
  8038a4:	100b883a 	mov	r5,r2
  8038a8:	1023883a 	mov	r17,r2
  8038ac:	08038e00 	call	8038e0 <_malloc_r>
  8038b0:	1021883a 	mov	r16,r2
  8038b4:	10000426 	beq	r2,zero,8038c8 <_calloc_r+0x48>
  8038b8:	880d883a 	mov	r6,r17
  8038bc:	000b883a 	mov	r5,zero
  8038c0:	1009883a 	mov	r4,r2
  8038c4:	08051180 	call	805118 <memset>
  8038c8:	8005883a 	mov	r2,r16
  8038cc:	dfc00217 	ldw	ra,8(sp)
  8038d0:	dc400117 	ldw	r17,4(sp)
  8038d4:	dc000017 	ldw	r16,0(sp)
  8038d8:	dec00304 	addi	sp,sp,12
  8038dc:	f800283a 	ret

008038e0 <_malloc_r>:
  8038e0:	defffb04 	addi	sp,sp,-20
  8038e4:	00bfff04 	movi	r2,-4
  8038e8:	dc400115 	stw	r17,4(sp)
  8038ec:	2c4000c4 	addi	r17,r5,3
  8038f0:	88a2703a 	and	r17,r17,r2
  8038f4:	dc800215 	stw	r18,8(sp)
  8038f8:	dfc00415 	stw	ra,16(sp)
  8038fc:	dcc00315 	stw	r19,12(sp)
  803900:	dc000015 	stw	r16,0(sp)
  803904:	8c400204 	addi	r17,r17,8
  803908:	00800304 	movi	r2,12
  80390c:	2025883a 	mov	r18,r4
  803910:	8880022e 	bgeu	r17,r2,80391c <_malloc_r+0x3c>
  803914:	1023883a 	mov	r17,r2
  803918:	00000506 	br	803930 <_malloc_r+0x50>
  80391c:	8800040e 	bge	r17,zero,803930 <_malloc_r+0x50>
  803920:	00800304 	movi	r2,12
  803924:	90800015 	stw	r2,0(r18)
  803928:	0005883a 	mov	r2,zero
  80392c:	00003b06 	br	803a1c <_malloc_r+0x13c>
  803930:	897ffb36 	bltu	r17,r5,803920 <__alt_data_end+0xff803920>
  803934:	00802074 	movhi	r2,129
  803938:	10a7b504 	addi	r2,r2,-24876
  80393c:	10c00017 	ldw	r3,0(r2)
  803940:	1009883a 	mov	r4,r2
  803944:	1821883a 	mov	r16,r3
  803948:	80000926 	beq	r16,zero,803970 <_malloc_r+0x90>
  80394c:	80800017 	ldw	r2,0(r16)
  803950:	1445c83a 	sub	r2,r2,r17
  803954:	10001516 	blt	r2,zero,8039ac <_malloc_r+0xcc>
  803958:	014002c4 	movi	r5,11
  80395c:	28800d2e 	bgeu	r5,r2,803994 <_malloc_r+0xb4>
  803960:	80800015 	stw	r2,0(r16)
  803964:	80a1883a 	add	r16,r16,r2
  803968:	84400015 	stw	r17,0(r16)
  80396c:	8000221e 	bne	r16,zero,8039f8 <_malloc_r+0x118>
  803970:	04002074 	movhi	r16,129
  803974:	8427b404 	addi	r16,r16,-24880
  803978:	80800017 	ldw	r2,0(r16)
  80397c:	10000e1e 	bne	r2,zero,8039b8 <_malloc_r+0xd8>
  803980:	000b883a 	mov	r5,zero
  803984:	9009883a 	mov	r4,r18
  803988:	0803adc0 	call	803adc <_sbrk_r>
  80398c:	80800015 	stw	r2,0(r16)
  803990:	00000906 	br	8039b8 <_malloc_r+0xd8>
  803994:	80800117 	ldw	r2,4(r16)
  803998:	1c00021e 	bne	r3,r16,8039a4 <_malloc_r+0xc4>
  80399c:	20800015 	stw	r2,0(r4)
  8039a0:	00001506 	br	8039f8 <_malloc_r+0x118>
  8039a4:	18800115 	stw	r2,4(r3)
  8039a8:	00001306 	br	8039f8 <_malloc_r+0x118>
  8039ac:	8007883a 	mov	r3,r16
  8039b0:	84000117 	ldw	r16,4(r16)
  8039b4:	003fe406 	br	803948 <__alt_data_end+0xff803948>
  8039b8:	880b883a 	mov	r5,r17
  8039bc:	9009883a 	mov	r4,r18
  8039c0:	0803adc0 	call	803adc <_sbrk_r>
  8039c4:	04ffffc4 	movi	r19,-1
  8039c8:	14ffd526 	beq	r2,r19,803920 <__alt_data_end+0xff803920>
  8039cc:	140000c4 	addi	r16,r2,3
  8039d0:	00ffff04 	movi	r3,-4
  8039d4:	80e0703a 	and	r16,r16,r3
  8039d8:	1400021e 	bne	r2,r16,8039e4 <_malloc_r+0x104>
  8039dc:	84400015 	stw	r17,0(r16)
  8039e0:	00000506 	br	8039f8 <_malloc_r+0x118>
  8039e4:	808bc83a 	sub	r5,r16,r2
  8039e8:	9009883a 	mov	r4,r18
  8039ec:	0803adc0 	call	803adc <_sbrk_r>
  8039f0:	14fffa1e 	bne	r2,r19,8039dc <__alt_data_end+0xff8039dc>
  8039f4:	003fca06 	br	803920 <__alt_data_end+0xff803920>
  8039f8:	810002c4 	addi	r4,r16,11
  8039fc:	00bffe04 	movi	r2,-8
  803a00:	80c00104 	addi	r3,r16,4
  803a04:	2084703a 	and	r2,r4,r2
  803a08:	10c7c83a 	sub	r3,r2,r3
  803a0c:	18000326 	beq	r3,zero,803a1c <_malloc_r+0x13c>
  803a10:	80e1883a 	add	r16,r16,r3
  803a14:	00c7c83a 	sub	r3,zero,r3
  803a18:	80c00015 	stw	r3,0(r16)
  803a1c:	dfc00417 	ldw	ra,16(sp)
  803a20:	dcc00317 	ldw	r19,12(sp)
  803a24:	dc800217 	ldw	r18,8(sp)
  803a28:	dc400117 	ldw	r17,4(sp)
  803a2c:	dc000017 	ldw	r16,0(sp)
  803a30:	dec00504 	addi	sp,sp,20
  803a34:	f800283a 	ret

00803a38 <_realloc_r>:
  803a38:	2800021e 	bne	r5,zero,803a44 <_realloc_r+0xc>
  803a3c:	300b883a 	mov	r5,r6
  803a40:	08038e01 	jmpi	8038e0 <_malloc_r>
  803a44:	defffb04 	addi	sp,sp,-20
  803a48:	dc400115 	stw	r17,4(sp)
  803a4c:	dc000015 	stw	r16,0(sp)
  803a50:	dfc00415 	stw	ra,16(sp)
  803a54:	dcc00315 	stw	r19,12(sp)
  803a58:	dc800215 	stw	r18,8(sp)
  803a5c:	3023883a 	mov	r17,r6
  803a60:	2821883a 	mov	r16,r5
  803a64:	3000021e 	bne	r6,zero,803a70 <_realloc_r+0x38>
  803a68:	08051380 	call	805138 <_free_r>
  803a6c:	00001306 	br	803abc <_realloc_r+0x84>
  803a70:	2025883a 	mov	r18,r4
  803a74:	080521c0 	call	80521c <_malloc_usable_size_r>
  803a78:	14400e2e 	bgeu	r2,r17,803ab4 <_realloc_r+0x7c>
  803a7c:	880b883a 	mov	r5,r17
  803a80:	9009883a 	mov	r4,r18
  803a84:	08038e00 	call	8038e0 <_malloc_r>
  803a88:	1027883a 	mov	r19,r2
  803a8c:	10000b26 	beq	r2,zero,803abc <_realloc_r+0x84>
  803a90:	880d883a 	mov	r6,r17
  803a94:	800b883a 	mov	r5,r16
  803a98:	1009883a 	mov	r4,r2
  803a9c:	08050f00 	call	8050f0 <memcpy>
  803aa0:	800b883a 	mov	r5,r16
  803aa4:	9009883a 	mov	r4,r18
  803aa8:	08051380 	call	805138 <_free_r>
  803aac:	9805883a 	mov	r2,r19
  803ab0:	00000306 	br	803ac0 <_realloc_r+0x88>
  803ab4:	8005883a 	mov	r2,r16
  803ab8:	00000106 	br	803ac0 <_realloc_r+0x88>
  803abc:	0005883a 	mov	r2,zero
  803ac0:	dfc00417 	ldw	ra,16(sp)
  803ac4:	dcc00317 	ldw	r19,12(sp)
  803ac8:	dc800217 	ldw	r18,8(sp)
  803acc:	dc400117 	ldw	r17,4(sp)
  803ad0:	dc000017 	ldw	r16,0(sp)
  803ad4:	dec00504 	addi	sp,sp,20
  803ad8:	f800283a 	ret

00803adc <_sbrk_r>:
  803adc:	defffd04 	addi	sp,sp,-12
  803ae0:	dc000015 	stw	r16,0(sp)
  803ae4:	04002074 	movhi	r16,129
  803ae8:	dc400115 	stw	r17,4(sp)
  803aec:	8427b604 	addi	r16,r16,-24872
  803af0:	2023883a 	mov	r17,r4
  803af4:	2809883a 	mov	r4,r5
  803af8:	dfc00215 	stw	ra,8(sp)
  803afc:	80000015 	stw	zero,0(r16)
  803b00:	0807df80 	call	807df8 <sbrk>
  803b04:	00ffffc4 	movi	r3,-1
  803b08:	10c0031e 	bne	r2,r3,803b18 <_sbrk_r+0x3c>
  803b0c:	80c00017 	ldw	r3,0(r16)
  803b10:	18000126 	beq	r3,zero,803b18 <_sbrk_r+0x3c>
  803b14:	88c00015 	stw	r3,0(r17)
  803b18:	dfc00217 	ldw	ra,8(sp)
  803b1c:	dc400117 	ldw	r17,4(sp)
  803b20:	dc000017 	ldw	r16,0(sp)
  803b24:	dec00304 	addi	sp,sp,12
  803b28:	f800283a 	ret

00803b2c <strcpy>:
  803b2c:	2005883a 	mov	r2,r4
  803b30:	200d883a 	mov	r6,r4
  803b34:	28c00003 	ldbu	r3,0(r5)
  803b38:	31800044 	addi	r6,r6,1
  803b3c:	29400044 	addi	r5,r5,1
  803b40:	30ffffc5 	stb	r3,-1(r6)
  803b44:	18c03fcc 	andi	r3,r3,255
  803b48:	18c0201c 	xori	r3,r3,128
  803b4c:	18ffe004 	addi	r3,r3,-128
  803b50:	183ff81e 	bne	r3,zero,803b34 <__alt_data_end+0xff803b34>
  803b54:	f800283a 	ret

00803b58 <_write_r>:
  803b58:	defffd04 	addi	sp,sp,-12
  803b5c:	dc000015 	stw	r16,0(sp)
  803b60:	04002074 	movhi	r16,129
  803b64:	dc400115 	stw	r17,4(sp)
  803b68:	8427b604 	addi	r16,r16,-24872
  803b6c:	2023883a 	mov	r17,r4
  803b70:	2809883a 	mov	r4,r5
  803b74:	300b883a 	mov	r5,r6
  803b78:	380d883a 	mov	r6,r7
  803b7c:	dfc00215 	stw	ra,8(sp)
  803b80:	80000015 	stw	zero,0(r16)
  803b84:	0807fd00 	call	807fd0 <write>
  803b88:	00ffffc4 	movi	r3,-1
  803b8c:	10c0031e 	bne	r2,r3,803b9c <_write_r+0x44>
  803b90:	80c00017 	ldw	r3,0(r16)
  803b94:	18000126 	beq	r3,zero,803b9c <_write_r+0x44>
  803b98:	88c00015 	stw	r3,0(r17)
  803b9c:	dfc00217 	ldw	ra,8(sp)
  803ba0:	dc400117 	ldw	r17,4(sp)
  803ba4:	dc000017 	ldw	r16,0(sp)
  803ba8:	dec00304 	addi	sp,sp,12
  803bac:	f800283a 	ret

00803bb0 <quorem>:
  803bb0:	defff204 	addi	sp,sp,-56
  803bb4:	dc000415 	stw	r16,16(sp)
  803bb8:	20800417 	ldw	r2,16(r4)
  803bbc:	2c000417 	ldw	r16,16(r5)
  803bc0:	dfc00d15 	stw	ra,52(sp)
  803bc4:	df000c15 	stw	fp,48(sp)
  803bc8:	ddc00b15 	stw	r23,44(sp)
  803bcc:	dd800a15 	stw	r22,40(sp)
  803bd0:	dd400915 	stw	r21,36(sp)
  803bd4:	dd000815 	stw	r20,32(sp)
  803bd8:	dcc00715 	stw	r19,28(sp)
  803bdc:	dc800615 	stw	r18,24(sp)
  803be0:	dc400515 	stw	r17,20(sp)
  803be4:	14006d16 	blt	r2,r16,803d9c <quorem+0x1ec>
  803be8:	843fffc4 	addi	r16,r16,-1
  803bec:	8423883a 	add	r17,r16,r16
  803bf0:	2cc00504 	addi	r19,r5,20
  803bf4:	8c63883a 	add	r17,r17,r17
  803bf8:	9c6b883a 	add	r21,r19,r17
  803bfc:	25c00504 	addi	r23,r4,20
  803c00:	2829883a 	mov	r20,r5
  803c04:	bc63883a 	add	r17,r23,r17
  803c08:	a9400017 	ldw	r5,0(r21)
  803c0c:	2025883a 	mov	r18,r4
  803c10:	89000017 	ldw	r4,0(r17)
  803c14:	29400044 	addi	r5,r5,1
  803c18:	08053300 	call	805330 <__udivsi3>
  803c1c:	102d883a 	mov	r22,r2
  803c20:	10003526 	beq	r2,zero,803cf8 <quorem+0x148>
  803c24:	b80d883a 	mov	r6,r23
  803c28:	9839883a 	mov	fp,r19
  803c2c:	000f883a 	mov	r7,zero
  803c30:	0011883a 	mov	r8,zero
  803c34:	e2400017 	ldw	r9,0(fp)
  803c38:	b00b883a 	mov	r5,r22
  803c3c:	d9800315 	stw	r6,12(sp)
  803c40:	493fffcc 	andi	r4,r9,65535
  803c44:	da000215 	stw	r8,8(sp)
  803c48:	d9c00015 	stw	r7,0(sp)
  803c4c:	da400115 	stw	r9,4(sp)
  803c50:	08015180 	call	801518 <__mulsi3>
  803c54:	da400117 	ldw	r9,4(sp)
  803c58:	d9c00017 	ldw	r7,0(sp)
  803c5c:	b00b883a 	mov	r5,r22
  803c60:	4808d43a 	srli	r4,r9,16
  803c64:	11c7883a 	add	r3,r2,r7
  803c68:	d8c00015 	stw	r3,0(sp)
  803c6c:	08015180 	call	801518 <__mulsi3>
  803c70:	d8c00017 	ldw	r3,0(sp)
  803c74:	d9800317 	ldw	r6,12(sp)
  803c78:	da000217 	ldw	r8,8(sp)
  803c7c:	180ad43a 	srli	r5,r3,16
  803c80:	18ffffcc 	andi	r3,r3,65535
  803c84:	e7000104 	addi	fp,fp,4
  803c88:	1145883a 	add	r2,r2,r5
  803c8c:	31400017 	ldw	r5,0(r6)
  803c90:	100ed43a 	srli	r7,r2,16
  803c94:	10bfffcc 	andi	r2,r2,65535
  803c98:	293fffcc 	andi	r4,r5,65535
  803c9c:	2209883a 	add	r4,r4,r8
  803ca0:	20c7c83a 	sub	r3,r4,r3
  803ca4:	280ad43a 	srli	r5,r5,16
  803ca8:	1809d43a 	srai	r4,r3,16
  803cac:	18ffffcc 	andi	r3,r3,65535
  803cb0:	2885c83a 	sub	r2,r5,r2
  803cb4:	1105883a 	add	r2,r2,r4
  803cb8:	1011d43a 	srai	r8,r2,16
  803cbc:	1004943a 	slli	r2,r2,16
  803cc0:	31800104 	addi	r6,r6,4
  803cc4:	10c6b03a 	or	r3,r2,r3
  803cc8:	30ffff15 	stw	r3,-4(r6)
  803ccc:	af3fd92e 	bgeu	r21,fp,803c34 <__alt_data_end+0xff803c34>
  803cd0:	88800017 	ldw	r2,0(r17)
  803cd4:	1000081e 	bne	r2,zero,803cf8 <quorem+0x148>
  803cd8:	8c7fff04 	addi	r17,r17,-4
  803cdc:	bc400236 	bltu	r23,r17,803ce8 <quorem+0x138>
  803ce0:	94000415 	stw	r16,16(r18)
  803ce4:	00000406 	br	803cf8 <quorem+0x148>
  803ce8:	88800017 	ldw	r2,0(r17)
  803cec:	103ffc1e 	bne	r2,zero,803ce0 <__alt_data_end+0xff803ce0>
  803cf0:	843fffc4 	addi	r16,r16,-1
  803cf4:	003ff806 	br	803cd8 <__alt_data_end+0xff803cd8>
  803cf8:	a00b883a 	mov	r5,r20
  803cfc:	9009883a 	mov	r4,r18
  803d00:	08032440 	call	803244 <__mcmp>
  803d04:	10002316 	blt	r2,zero,803d94 <quorem+0x1e4>
  803d08:	b5800044 	addi	r22,r22,1
  803d0c:	b80b883a 	mov	r5,r23
  803d10:	000d883a 	mov	r6,zero
  803d14:	28c00017 	ldw	r3,0(r5)
  803d18:	99000017 	ldw	r4,0(r19)
  803d1c:	9cc00104 	addi	r19,r19,4
  803d20:	18bfffcc 	andi	r2,r3,65535
  803d24:	118d883a 	add	r6,r2,r6
  803d28:	1806d43a 	srli	r3,r3,16
  803d2c:	20bfffcc 	andi	r2,r4,65535
  803d30:	2008d43a 	srli	r4,r4,16
  803d34:	3085c83a 	sub	r2,r6,r2
  803d38:	29400104 	addi	r5,r5,4
  803d3c:	1909c83a 	sub	r4,r3,r4
  803d40:	1007d43a 	srai	r3,r2,16
  803d44:	10bfffcc 	andi	r2,r2,65535
  803d48:	20c7883a 	add	r3,r4,r3
  803d4c:	180dd43a 	srai	r6,r3,16
  803d50:	1806943a 	slli	r3,r3,16
  803d54:	1884b03a 	or	r2,r3,r2
  803d58:	28bfff15 	stw	r2,-4(r5)
  803d5c:	acffed2e 	bgeu	r21,r19,803d14 <__alt_data_end+0xff803d14>
  803d60:	8407883a 	add	r3,r16,r16
  803d64:	18c7883a 	add	r3,r3,r3
  803d68:	b8c7883a 	add	r3,r23,r3
  803d6c:	18800017 	ldw	r2,0(r3)
  803d70:	1000081e 	bne	r2,zero,803d94 <quorem+0x1e4>
  803d74:	18ffff04 	addi	r3,r3,-4
  803d78:	b8c00236 	bltu	r23,r3,803d84 <quorem+0x1d4>
  803d7c:	94000415 	stw	r16,16(r18)
  803d80:	00000406 	br	803d94 <quorem+0x1e4>
  803d84:	18800017 	ldw	r2,0(r3)
  803d88:	103ffc1e 	bne	r2,zero,803d7c <__alt_data_end+0xff803d7c>
  803d8c:	843fffc4 	addi	r16,r16,-1
  803d90:	003ff806 	br	803d74 <__alt_data_end+0xff803d74>
  803d94:	b005883a 	mov	r2,r22
  803d98:	00000106 	br	803da0 <quorem+0x1f0>
  803d9c:	0005883a 	mov	r2,zero
  803da0:	dfc00d17 	ldw	ra,52(sp)
  803da4:	df000c17 	ldw	fp,48(sp)
  803da8:	ddc00b17 	ldw	r23,44(sp)
  803dac:	dd800a17 	ldw	r22,40(sp)
  803db0:	dd400917 	ldw	r21,36(sp)
  803db4:	dd000817 	ldw	r20,32(sp)
  803db8:	dcc00717 	ldw	r19,28(sp)
  803dbc:	dc800617 	ldw	r18,24(sp)
  803dc0:	dc400517 	ldw	r17,20(sp)
  803dc4:	dc000417 	ldw	r16,16(sp)
  803dc8:	dec00e04 	addi	sp,sp,56
  803dcc:	f800283a 	ret

00803dd0 <_dtoa_r>:
  803dd0:	20800417 	ldw	r2,16(r4)
  803dd4:	deffe004 	addi	sp,sp,-128
  803dd8:	dd001a15 	stw	r20,104(sp)
  803ddc:	dcc01915 	stw	r19,100(sp)
  803de0:	dc801815 	stw	r18,96(sp)
  803de4:	dc401715 	stw	r17,92(sp)
  803de8:	dc001615 	stw	r16,88(sp)
  803dec:	dfc01f15 	stw	ra,124(sp)
  803df0:	df001e15 	stw	fp,120(sp)
  803df4:	ddc01d15 	stw	r23,116(sp)
  803df8:	dd801c15 	stw	r22,112(sp)
  803dfc:	dd401b15 	stw	r21,108(sp)
  803e00:	d9400915 	stw	r5,36(sp)
  803e04:	d9c00815 	stw	r7,32(sp)
  803e08:	2021883a 	mov	r16,r4
  803e0c:	3029883a 	mov	r20,r6
  803e10:	dc802217 	ldw	r18,136(sp)
  803e14:	2823883a 	mov	r17,r5
  803e18:	3027883a 	mov	r19,r6
  803e1c:	1000071e 	bne	r2,zero,803e3c <_dtoa_r+0x6c>
  803e20:	01000404 	movi	r4,16
  803e24:	08050c80 	call	8050c8 <malloc>
  803e28:	80800415 	stw	r2,16(r16)
  803e2c:	10000115 	stw	zero,4(r2)
  803e30:	10000215 	stw	zero,8(r2)
  803e34:	10000015 	stw	zero,0(r2)
  803e38:	10000315 	stw	zero,12(r2)
  803e3c:	80800417 	ldw	r2,16(r16)
  803e40:	11400017 	ldw	r5,0(r2)
  803e44:	28000926 	beq	r5,zero,803e6c <_dtoa_r+0x9c>
  803e48:	10c00117 	ldw	r3,4(r2)
  803e4c:	00800044 	movi	r2,1
  803e50:	8009883a 	mov	r4,r16
  803e54:	10c4983a 	sll	r2,r2,r3
  803e58:	28c00115 	stw	r3,4(r5)
  803e5c:	28800215 	stw	r2,8(r5)
  803e60:	08029540 	call	802954 <_Bfree>
  803e64:	80800417 	ldw	r2,16(r16)
  803e68:	10000015 	stw	zero,0(r2)
  803e6c:	a000060e 	bge	r20,zero,803e88 <_dtoa_r+0xb8>
  803e70:	04e00034 	movhi	r19,32768
  803e74:	00800044 	movi	r2,1
  803e78:	9cffffc4 	addi	r19,r19,-1
  803e7c:	90800015 	stw	r2,0(r18)
  803e80:	a4e6703a 	and	r19,r20,r19
  803e84:	00000106 	br	803e8c <_dtoa_r+0xbc>
  803e88:	90000015 	stw	zero,0(r18)
  803e8c:	989ffc2c 	andhi	r2,r19,32752
  803e90:	00dffc34 	movhi	r3,32752
  803e94:	10c0181e 	bne	r2,r3,803ef8 <_dtoa_r+0x128>
  803e98:	d8c02117 	ldw	r3,132(sp)
  803e9c:	d9000917 	ldw	r4,36(sp)
  803ea0:	0089c3c4 	movi	r2,9999
  803ea4:	18800015 	stw	r2,0(r3)
  803ea8:	2000071e 	bne	r4,zero,803ec8 <_dtoa_r+0xf8>
  803eac:	00800434 	movhi	r2,16
  803eb0:	10bfffc4 	addi	r2,r2,-1
  803eb4:	98a6703a 	and	r19,r19,r2
  803eb8:	9800031e 	bne	r19,zero,803ec8 <_dtoa_r+0xf8>
  803ebc:	00802074 	movhi	r2,129
  803ec0:	10a63204 	addi	r2,r2,-26424
  803ec4:	00000206 	br	803ed0 <_dtoa_r+0x100>
  803ec8:	00802074 	movhi	r2,129
  803ecc:	10a63504 	addi	r2,r2,-26412
  803ed0:	d8c02317 	ldw	r3,140(sp)
  803ed4:	18047026 	beq	r3,zero,805098 <_dtoa_r+0x12c8>
  803ed8:	10c000c7 	ldb	r3,3(r2)
  803edc:	18000226 	beq	r3,zero,803ee8 <_dtoa_r+0x118>
  803ee0:	10c00204 	addi	r3,r2,8
  803ee4:	00000106 	br	803eec <_dtoa_r+0x11c>
  803ee8:	10c000c4 	addi	r3,r2,3
  803eec:	d9002317 	ldw	r4,140(sp)
  803ef0:	20c00015 	stw	r3,0(r4)
  803ef4:	00046806 	br	805098 <_dtoa_r+0x12c8>
  803ef8:	d9000917 	ldw	r4,36(sp)
  803efc:	000d883a 	mov	r6,zero
  803f00:	000f883a 	mov	r7,zero
  803f04:	980b883a 	mov	r5,r19
  803f08:	08066680 	call	806668 <__eqdf2>
  803f0c:	10000a1e 	bne	r2,zero,803f38 <_dtoa_r+0x168>
  803f10:	d8c02117 	ldw	r3,132(sp)
  803f14:	d9002317 	ldw	r4,140(sp)
  803f18:	00800044 	movi	r2,1
  803f1c:	18800015 	stw	r2,0(r3)
  803f20:	20044926 	beq	r4,zero,805048 <_dtoa_r+0x1278>
  803f24:	00802074 	movhi	r2,129
  803f28:	10a63644 	addi	r2,r2,-26407
  803f2c:	20800015 	stw	r2,0(r4)
  803f30:	10bfffc4 	addi	r2,r2,-1
  803f34:	00045806 	br	805098 <_dtoa_r+0x12c8>
  803f38:	d9400917 	ldw	r5,36(sp)
  803f3c:	d8800204 	addi	r2,sp,8
  803f40:	9824d53a 	srli	r18,r19,20
  803f44:	d8800015 	stw	r2,0(sp)
  803f48:	d9c00104 	addi	r7,sp,4
  803f4c:	980d883a 	mov	r6,r19
  803f50:	8009883a 	mov	r4,r16
  803f54:	080356c0 	call	80356c <__d2b>
  803f58:	d8800315 	stw	r2,12(sp)
  803f5c:	9481ffcc 	andi	r18,r18,2047
  803f60:	dd000217 	ldw	r20,8(sp)
  803f64:	90000826 	beq	r18,zero,803f88 <_dtoa_r+0x1b8>
  803f68:	01400434 	movhi	r5,16
  803f6c:	297fffc4 	addi	r5,r5,-1
  803f70:	994a703a 	and	r5,r19,r5
  803f74:	d8800917 	ldw	r2,36(sp)
  803f78:	294ffc34 	orhi	r5,r5,16368
  803f7c:	94bf0044 	addi	r18,r18,-1023
  803f80:	d8001015 	stw	zero,64(sp)
  803f84:	00001606 	br	803fe0 <_dtoa_r+0x210>
  803f88:	dc800117 	ldw	r18,4(sp)
  803f8c:	00800804 	movi	r2,32
  803f90:	a4a5883a 	add	r18,r20,r18
  803f94:	91010c84 	addi	r4,r18,1074
  803f98:	1100080e 	bge	r2,r4,803fbc <_dtoa_r+0x1ec>
  803f9c:	d8800917 	ldw	r2,36(sp)
  803fa0:	91410484 	addi	r5,r18,1042
  803fa4:	00c01004 	movi	r3,64
  803fa8:	114ad83a 	srl	r5,r2,r5
  803fac:	1905c83a 	sub	r2,r3,r4
  803fb0:	9884983a 	sll	r2,r19,r2
  803fb4:	2888b03a 	or	r4,r5,r2
  803fb8:	00000306 	br	803fc8 <_dtoa_r+0x1f8>
  803fbc:	d8c00917 	ldw	r3,36(sp)
  803fc0:	1109c83a 	sub	r4,r2,r4
  803fc4:	1908983a 	sll	r4,r3,r4
  803fc8:	0807aa40 	call	807aa4 <__floatunsidf>
  803fcc:	017f8434 	movhi	r5,65040
  803fd0:	01000044 	movi	r4,1
  803fd4:	194b883a 	add	r5,r3,r5
  803fd8:	94bfffc4 	addi	r18,r18,-1
  803fdc:	d9001015 	stw	r4,64(sp)
  803fe0:	000d883a 	mov	r6,zero
  803fe4:	01cffe34 	movhi	r7,16376
  803fe8:	1009883a 	mov	r4,r2
  803fec:	08071280 	call	807128 <__subdf3>
  803ff0:	0198dbf4 	movhi	r6,25455
  803ff4:	01cff4f4 	movhi	r7,16339
  803ff8:	3190d844 	addi	r6,r6,17249
  803ffc:	39e1e9c4 	addi	r7,r7,-30809
  804000:	1009883a 	mov	r4,r2
  804004:	180b883a 	mov	r5,r3
  804008:	08068c00 	call	8068c0 <__muldf3>
  80400c:	01a2d874 	movhi	r6,35681
  804010:	01cff1f4 	movhi	r7,16327
  804014:	31b22cc4 	addi	r6,r6,-14157
  804018:	39e28a04 	addi	r7,r7,-30168
  80401c:	180b883a 	mov	r5,r3
  804020:	1009883a 	mov	r4,r2
  804024:	08053ec0 	call	8053ec <__adddf3>
  804028:	9009883a 	mov	r4,r18
  80402c:	102d883a 	mov	r22,r2
  804030:	182b883a 	mov	r21,r3
  804034:	08013d80 	call	8013d8 <__floatsidf>
  804038:	019427f4 	movhi	r6,20639
  80403c:	01cff4f4 	movhi	r7,16339
  804040:	319e7ec4 	addi	r6,r6,31227
  804044:	39d104c4 	addi	r7,r7,17427
  804048:	1009883a 	mov	r4,r2
  80404c:	180b883a 	mov	r5,r3
  804050:	08068c00 	call	8068c0 <__muldf3>
  804054:	100d883a 	mov	r6,r2
  804058:	180f883a 	mov	r7,r3
  80405c:	b009883a 	mov	r4,r22
  804060:	a80b883a 	mov	r5,r21
  804064:	08053ec0 	call	8053ec <__adddf3>
  804068:	1009883a 	mov	r4,r2
  80406c:	180b883a 	mov	r5,r3
  804070:	102d883a 	mov	r22,r2
  804074:	182b883a 	mov	r21,r3
  804078:	0807a240 	call	807a24 <__fixdfsi>
  80407c:	000d883a 	mov	r6,zero
  804080:	000f883a 	mov	r7,zero
  804084:	b009883a 	mov	r4,r22
  804088:	a80b883a 	mov	r5,r21
  80408c:	1039883a 	mov	fp,r2
  804090:	08067cc0 	call	8067cc <__ledf2>
  804094:	1000090e 	bge	r2,zero,8040bc <_dtoa_r+0x2ec>
  804098:	e009883a 	mov	r4,fp
  80409c:	08013d80 	call	8013d8 <__floatsidf>
  8040a0:	100d883a 	mov	r6,r2
  8040a4:	180f883a 	mov	r7,r3
  8040a8:	b009883a 	mov	r4,r22
  8040ac:	a80b883a 	mov	r5,r21
  8040b0:	08066680 	call	806668 <__eqdf2>
  8040b4:	10000126 	beq	r2,zero,8040bc <_dtoa_r+0x2ec>
  8040b8:	e73fffc4 	addi	fp,fp,-1
  8040bc:	00800584 	movi	r2,22
  8040c0:	17000c36 	bltu	r2,fp,8040f4 <_dtoa_r+0x324>
  8040c4:	e00490fa 	slli	r2,fp,3
  8040c8:	00c02074 	movhi	r3,129
  8040cc:	18e60004 	addi	r3,r3,-26624
  8040d0:	1885883a 	add	r2,r3,r2
  8040d4:	d9800917 	ldw	r6,36(sp)
  8040d8:	11000017 	ldw	r4,0(r2)
  8040dc:	11400117 	ldw	r5,4(r2)
  8040e0:	980f883a 	mov	r7,r19
  8040e4:	08066f00 	call	8066f0 <__gedf2>
  8040e8:	0080050e 	bge	zero,r2,804100 <_dtoa_r+0x330>
  8040ec:	e73fffc4 	addi	fp,fp,-1
  8040f0:	00000306 	br	804100 <_dtoa_r+0x330>
  8040f4:	00800044 	movi	r2,1
  8040f8:	d8800f15 	stw	r2,60(sp)
  8040fc:	00000106 	br	804104 <_dtoa_r+0x334>
  804100:	d8000f15 	stw	zero,60(sp)
  804104:	a4afc83a 	sub	r23,r20,r18
  804108:	bdffffc4 	addi	r23,r23,-1
  80410c:	b800040e 	bge	r23,zero,804120 <_dtoa_r+0x350>
  804110:	05efc83a 	sub	r23,zero,r23
  804114:	ddc00615 	stw	r23,24(sp)
  804118:	002f883a 	mov	r23,zero
  80411c:	00000106 	br	804124 <_dtoa_r+0x354>
  804120:	d8000615 	stw	zero,24(sp)
  804124:	e0000416 	blt	fp,zero,804138 <_dtoa_r+0x368>
  804128:	bf2f883a 	add	r23,r23,fp
  80412c:	df000d15 	stw	fp,52(sp)
  804130:	d8000a15 	stw	zero,40(sp)
  804134:	00000606 	br	804150 <_dtoa_r+0x380>
  804138:	d8c00617 	ldw	r3,24(sp)
  80413c:	0709c83a 	sub	r4,zero,fp
  804140:	d9000a15 	stw	r4,40(sp)
  804144:	1f07c83a 	sub	r3,r3,fp
  804148:	d8c00615 	stw	r3,24(sp)
  80414c:	d8000d15 	stw	zero,52(sp)
  804150:	d8c00817 	ldw	r3,32(sp)
  804154:	00800244 	movi	r2,9
  804158:	10c02736 	bltu	r2,r3,8041f8 <_dtoa_r+0x428>
  80415c:	00800144 	movi	r2,5
  804160:	10c0040e 	bge	r2,r3,804174 <_dtoa_r+0x3a4>
  804164:	18ffff04 	addi	r3,r3,-4
  804168:	d8c00815 	stw	r3,32(sp)
  80416c:	0025883a 	mov	r18,zero
  804170:	00000106 	br	804178 <_dtoa_r+0x3a8>
  804174:	04800044 	movi	r18,1
  804178:	d9000817 	ldw	r4,32(sp)
  80417c:	00c000c4 	movi	r3,3
  804180:	20c01426 	beq	r4,r3,8041d4 <_dtoa_r+0x404>
  804184:	19000416 	blt	r3,r4,804198 <_dtoa_r+0x3c8>
  804188:	00800084 	movi	r2,2
  80418c:	2080211e 	bne	r4,r2,804214 <_dtoa_r+0x444>
  804190:	d8000b15 	stw	zero,44(sp)
  804194:	00000906 	br	8041bc <_dtoa_r+0x3ec>
  804198:	d9000817 	ldw	r4,32(sp)
  80419c:	00c00104 	movi	r3,4
  8041a0:	20c00426 	beq	r4,r3,8041b4 <_dtoa_r+0x3e4>
  8041a4:	20801b1e 	bne	r4,r2,804214 <_dtoa_r+0x444>
  8041a8:	00c00044 	movi	r3,1
  8041ac:	d8c00b15 	stw	r3,44(sp)
  8041b0:	00000906 	br	8041d8 <_dtoa_r+0x408>
  8041b4:	00800044 	movi	r2,1
  8041b8:	d8800b15 	stw	r2,44(sp)
  8041bc:	d9002017 	ldw	r4,128(sp)
  8041c0:	01001c0e 	bge	zero,r4,804234 <_dtoa_r+0x464>
  8041c4:	d9000515 	stw	r4,20(sp)
  8041c8:	d9000415 	stw	r4,16(sp)
  8041cc:	2005883a 	mov	r2,r4
  8041d0:	00001f06 	br	804250 <_dtoa_r+0x480>
  8041d4:	d8000b15 	stw	zero,44(sp)
  8041d8:	d8802017 	ldw	r2,128(sp)
  8041dc:	e085883a 	add	r2,fp,r2
  8041e0:	10c00044 	addi	r3,r2,1
  8041e4:	d8800515 	stw	r2,20(sp)
  8041e8:	d8c00415 	stw	r3,16(sp)
  8041ec:	00c0170e 	bge	zero,r3,80424c <_dtoa_r+0x47c>
  8041f0:	1805883a 	mov	r2,r3
  8041f4:	00001606 	br	804250 <_dtoa_r+0x480>
  8041f8:	013fffc4 	movi	r4,-1
  8041fc:	04800044 	movi	r18,1
  804200:	d8000815 	stw	zero,32(sp)
  804204:	dc800b15 	stw	r18,44(sp)
  804208:	d9000515 	stw	r4,20(sp)
  80420c:	d9000415 	stw	r4,16(sp)
  804210:	00000506 	br	804228 <_dtoa_r+0x458>
  804214:	00ffffc4 	movi	r3,-1
  804218:	00800044 	movi	r2,1
  80421c:	d8800b15 	stw	r2,44(sp)
  804220:	d8c00515 	stw	r3,20(sp)
  804224:	d8c00415 	stw	r3,16(sp)
  804228:	00800484 	movi	r2,18
  80422c:	d8002015 	stw	zero,128(sp)
  804230:	00000706 	br	804250 <_dtoa_r+0x480>
  804234:	01000044 	movi	r4,1
  804238:	d9000515 	stw	r4,20(sp)
  80423c:	d9000415 	stw	r4,16(sp)
  804240:	2005883a 	mov	r2,r4
  804244:	d9002015 	stw	r4,128(sp)
  804248:	00000106 	br	804250 <_dtoa_r+0x480>
  80424c:	00800044 	movi	r2,1
  804250:	85000417 	ldw	r20,16(r16)
  804254:	00c00104 	movi	r3,4
  804258:	a0000115 	stw	zero,4(r20)
  80425c:	19000504 	addi	r4,r3,20
  804260:	a1400117 	ldw	r5,4(r20)
  804264:	11000436 	bltu	r2,r4,804278 <_dtoa_r+0x4a8>
  804268:	29400044 	addi	r5,r5,1
  80426c:	a1400115 	stw	r5,4(r20)
  804270:	18c7883a 	add	r3,r3,r3
  804274:	003ff906 	br	80425c <__alt_data_end+0xff80425c>
  804278:	8009883a 	mov	r4,r16
  80427c:	08028700 	call	802870 <_Balloc>
  804280:	a0800015 	stw	r2,0(r20)
  804284:	80800417 	ldw	r2,16(r16)
  804288:	d8c00417 	ldw	r3,16(sp)
  80428c:	10800017 	ldw	r2,0(r2)
  804290:	d8800715 	stw	r2,28(sp)
  804294:	00800384 	movi	r2,14
  804298:	10c13436 	bltu	r2,r3,80476c <_dtoa_r+0x99c>
  80429c:	90013326 	beq	r18,zero,80476c <_dtoa_r+0x99c>
  8042a0:	dcc01315 	stw	r19,76(sp)
  8042a4:	0700330e 	bge	zero,fp,804374 <_dtoa_r+0x5a4>
  8042a8:	e08003cc 	andi	r2,fp,15
  8042ac:	100490fa 	slli	r2,r2,3
  8042b0:	00c02074 	movhi	r3,129
  8042b4:	e029d13a 	srai	r20,fp,4
  8042b8:	18e60004 	addi	r3,r3,-26624
  8042bc:	1885883a 	add	r2,r3,r2
  8042c0:	15800017 	ldw	r22,0(r2)
  8042c4:	15400117 	ldw	r21,4(r2)
  8042c8:	a080040c 	andi	r2,r20,16
  8042cc:	10000c26 	beq	r2,zero,804300 <_dtoa_r+0x530>
  8042d0:	00802074 	movhi	r2,129
  8042d4:	10a5f604 	addi	r2,r2,-26664
  8042d8:	11800817 	ldw	r6,32(r2)
  8042dc:	11c00917 	ldw	r7,36(r2)
  8042e0:	d9000917 	ldw	r4,36(sp)
  8042e4:	980b883a 	mov	r5,r19
  8042e8:	a50003cc 	andi	r20,r20,15
  8042ec:	0805c980 	call	805c98 <__divdf3>
  8042f0:	1023883a 	mov	r17,r2
  8042f4:	1827883a 	mov	r19,r3
  8042f8:	048000c4 	movi	r18,3
  8042fc:	00000106 	br	804304 <_dtoa_r+0x534>
  804300:	04800084 	movi	r18,2
  804304:	02402074 	movhi	r9,129
  804308:	0011883a 	mov	r8,zero
  80430c:	4a65f604 	addi	r9,r9,-26664
  804310:	a0001226 	beq	r20,zero,80435c <_dtoa_r+0x58c>
  804314:	a080004c 	andi	r2,r20,1
  804318:	10000d26 	beq	r2,zero,804350 <_dtoa_r+0x580>
  80431c:	4245883a 	add	r2,r8,r9
  804320:	11800017 	ldw	r6,0(r2)
  804324:	11c00117 	ldw	r7,4(r2)
  804328:	b009883a 	mov	r4,r22
  80432c:	a80b883a 	mov	r5,r21
  804330:	da001415 	stw	r8,80(sp)
  804334:	da401515 	stw	r9,84(sp)
  804338:	08068c00 	call	8068c0 <__muldf3>
  80433c:	da401517 	ldw	r9,84(sp)
  804340:	da001417 	ldw	r8,80(sp)
  804344:	94800044 	addi	r18,r18,1
  804348:	102d883a 	mov	r22,r2
  80434c:	182b883a 	mov	r21,r3
  804350:	a029d07a 	srai	r20,r20,1
  804354:	42000204 	addi	r8,r8,8
  804358:	003fed06 	br	804310 <__alt_data_end+0xff804310>
  80435c:	b00d883a 	mov	r6,r22
  804360:	a80f883a 	mov	r7,r21
  804364:	8809883a 	mov	r4,r17
  804368:	980b883a 	mov	r5,r19
  80436c:	0805c980 	call	805c98 <__divdf3>
  804370:	00002406 	br	804404 <_dtoa_r+0x634>
  804374:	0729c83a 	sub	r20,zero,fp
  804378:	a0002526 	beq	r20,zero,804410 <_dtoa_r+0x640>
  80437c:	a08003cc 	andi	r2,r20,15
  804380:	100490fa 	slli	r2,r2,3
  804384:	00c02074 	movhi	r3,129
  804388:	18e60004 	addi	r3,r3,-26624
  80438c:	1885883a 	add	r2,r3,r2
  804390:	d9000917 	ldw	r4,36(sp)
  804394:	11800017 	ldw	r6,0(r2)
  804398:	11c00117 	ldw	r7,4(r2)
  80439c:	980b883a 	mov	r5,r19
  8043a0:	a029d13a 	srai	r20,r20,4
  8043a4:	08068c00 	call	8068c0 <__muldf3>
  8043a8:	05802074 	movhi	r22,129
  8043ac:	1023883a 	mov	r17,r2
  8043b0:	1827883a 	mov	r19,r3
  8043b4:	002b883a 	mov	r21,zero
  8043b8:	0009883a 	mov	r4,zero
  8043bc:	04800084 	movi	r18,2
  8043c0:	b5a5f604 	addi	r22,r22,-26664
  8043c4:	a0000d26 	beq	r20,zero,8043fc <_dtoa_r+0x62c>
  8043c8:	a140004c 	andi	r5,r20,1
  8043cc:	28000826 	beq	r5,zero,8043f0 <_dtoa_r+0x620>
  8043d0:	ad89883a 	add	r4,r21,r22
  8043d4:	21800017 	ldw	r6,0(r4)
  8043d8:	21c00117 	ldw	r7,4(r4)
  8043dc:	180b883a 	mov	r5,r3
  8043e0:	1009883a 	mov	r4,r2
  8043e4:	08068c00 	call	8068c0 <__muldf3>
  8043e8:	94800044 	addi	r18,r18,1
  8043ec:	01000044 	movi	r4,1
  8043f0:	a029d07a 	srai	r20,r20,1
  8043f4:	ad400204 	addi	r21,r21,8
  8043f8:	003ff206 	br	8043c4 <__alt_data_end+0xff8043c4>
  8043fc:	21003fcc 	andi	r4,r4,255
  804400:	20000426 	beq	r4,zero,804414 <_dtoa_r+0x644>
  804404:	1023883a 	mov	r17,r2
  804408:	1827883a 	mov	r19,r3
  80440c:	00000106 	br	804414 <_dtoa_r+0x644>
  804410:	04800084 	movi	r18,2
  804414:	d9000f17 	ldw	r4,60(sp)
  804418:	20001626 	beq	r4,zero,804474 <_dtoa_r+0x6a4>
  80441c:	000d883a 	mov	r6,zero
  804420:	01cffc34 	movhi	r7,16368
  804424:	8809883a 	mov	r4,r17
  804428:	980b883a 	mov	r5,r19
  80442c:	08067cc0 	call	8067cc <__ledf2>
  804430:	1000140e 	bge	r2,zero,804484 <_dtoa_r+0x6b4>
  804434:	d8800417 	ldw	r2,16(sp)
  804438:	10001626 	beq	r2,zero,804494 <_dtoa_r+0x6c4>
  80443c:	d8c00517 	ldw	r3,20(sp)
  804440:	00c0c90e 	bge	zero,r3,804768 <_dtoa_r+0x998>
  804444:	8809883a 	mov	r4,r17
  804448:	980b883a 	mov	r5,r19
  80444c:	000d883a 	mov	r6,zero
  804450:	01d00934 	movhi	r7,16420
  804454:	08068c00 	call	8068c0 <__muldf3>
  804458:	d9000517 	ldw	r4,20(sp)
  80445c:	e57fffc4 	addi	r21,fp,-1
  804460:	1023883a 	mov	r17,r2
  804464:	1827883a 	mov	r19,r3
  804468:	94800044 	addi	r18,r18,1
  80446c:	d9000c15 	stw	r4,48(sp)
  804470:	00000a06 	br	80449c <_dtoa_r+0x6cc>
  804474:	d8800417 	ldw	r2,16(sp)
  804478:	e02b883a 	mov	r21,fp
  80447c:	d8800c15 	stw	r2,48(sp)
  804480:	00000606 	br	80449c <_dtoa_r+0x6cc>
  804484:	d8c00417 	ldw	r3,16(sp)
  804488:	e02b883a 	mov	r21,fp
  80448c:	d8c00c15 	stw	r3,48(sp)
  804490:	00000206 	br	80449c <_dtoa_r+0x6cc>
  804494:	e02b883a 	mov	r21,fp
  804498:	d8000c15 	stw	zero,48(sp)
  80449c:	9009883a 	mov	r4,r18
  8044a0:	dc400e15 	stw	r17,56(sp)
  8044a4:	08013d80 	call	8013d8 <__floatsidf>
  8044a8:	880d883a 	mov	r6,r17
  8044ac:	980f883a 	mov	r7,r19
  8044b0:	1009883a 	mov	r4,r2
  8044b4:	180b883a 	mov	r5,r3
  8044b8:	08068c00 	call	8068c0 <__muldf3>
  8044bc:	1009883a 	mov	r4,r2
  8044c0:	000d883a 	mov	r6,zero
  8044c4:	01d00734 	movhi	r7,16412
  8044c8:	180b883a 	mov	r5,r3
  8044cc:	08053ec0 	call	8053ec <__adddf3>
  8044d0:	d9000c17 	ldw	r4,48(sp)
  8044d4:	04bf3034 	movhi	r18,64704
  8044d8:	9829883a 	mov	r20,r19
  8044dc:	102d883a 	mov	r22,r2
  8044e0:	1ca5883a 	add	r18,r3,r18
  8044e4:	2000141e 	bne	r4,zero,804538 <_dtoa_r+0x768>
  8044e8:	8809883a 	mov	r4,r17
  8044ec:	980b883a 	mov	r5,r19
  8044f0:	000d883a 	mov	r6,zero
  8044f4:	01d00534 	movhi	r7,16404
  8044f8:	08071280 	call	807128 <__subdf3>
  8044fc:	b00d883a 	mov	r6,r22
  804500:	900f883a 	mov	r7,r18
  804504:	1009883a 	mov	r4,r2
  804508:	180b883a 	mov	r5,r3
  80450c:	1027883a 	mov	r19,r2
  804510:	1823883a 	mov	r17,r3
  804514:	08066f00 	call	8066f0 <__gedf2>
  804518:	0081dc16 	blt	zero,r2,804c8c <_dtoa_r+0xebc>
  80451c:	91e0003c 	xorhi	r7,r18,32768
  804520:	b00d883a 	mov	r6,r22
  804524:	9809883a 	mov	r4,r19
  804528:	880b883a 	mov	r5,r17
  80452c:	08067cc0 	call	8067cc <__ledf2>
  804530:	1001d016 	blt	r2,zero,804c74 <_dtoa_r+0xea4>
  804534:	00008c06 	br	804768 <_dtoa_r+0x998>
  804538:	d9000c17 	ldw	r4,48(sp)
  80453c:	00802074 	movhi	r2,129
  804540:	10a60004 	addi	r2,r2,-26624
  804544:	20ffffc4 	addi	r3,r4,-1
  804548:	180690fa 	slli	r3,r3,3
  80454c:	d9000b17 	ldw	r4,44(sp)
  804550:	10c5883a 	add	r2,r2,r3
  804554:	20004526 	beq	r4,zero,80466c <_dtoa_r+0x89c>
  804558:	11800017 	ldw	r6,0(r2)
  80455c:	11c00117 	ldw	r7,4(r2)
  804560:	0009883a 	mov	r4,zero
  804564:	014ff834 	movhi	r5,16352
  804568:	0805c980 	call	805c98 <__divdf3>
  80456c:	900f883a 	mov	r7,r18
  804570:	b00d883a 	mov	r6,r22
  804574:	1009883a 	mov	r4,r2
  804578:	180b883a 	mov	r5,r3
  80457c:	08071280 	call	807128 <__subdf3>
  804580:	da400717 	ldw	r9,28(sp)
  804584:	1025883a 	mov	r18,r2
  804588:	1823883a 	mov	r17,r3
  80458c:	d9000e17 	ldw	r4,56(sp)
  804590:	a00b883a 	mov	r5,r20
  804594:	da401515 	stw	r9,84(sp)
  804598:	0807a240 	call	807a24 <__fixdfsi>
  80459c:	1009883a 	mov	r4,r2
  8045a0:	d8801415 	stw	r2,80(sp)
  8045a4:	08013d80 	call	8013d8 <__floatsidf>
  8045a8:	d9000e17 	ldw	r4,56(sp)
  8045ac:	a00b883a 	mov	r5,r20
  8045b0:	100d883a 	mov	r6,r2
  8045b4:	180f883a 	mov	r7,r3
  8045b8:	08071280 	call	807128 <__subdf3>
  8045bc:	da001417 	ldw	r8,80(sp)
  8045c0:	da401517 	ldw	r9,84(sp)
  8045c4:	900d883a 	mov	r6,r18
  8045c8:	42000c04 	addi	r8,r8,48
  8045cc:	4a000005 	stb	r8,0(r9)
  8045d0:	880f883a 	mov	r7,r17
  8045d4:	1009883a 	mov	r4,r2
  8045d8:	180b883a 	mov	r5,r3
  8045dc:	1029883a 	mov	r20,r2
  8045e0:	1827883a 	mov	r19,r3
  8045e4:	4d800044 	addi	r22,r9,1
  8045e8:	08067cc0 	call	8067cc <__ledf2>
  8045ec:	10028a16 	blt	r2,zero,805018 <_dtoa_r+0x1248>
  8045f0:	a00d883a 	mov	r6,r20
  8045f4:	980f883a 	mov	r7,r19
  8045f8:	0009883a 	mov	r4,zero
  8045fc:	014ffc34 	movhi	r5,16368
  804600:	08071280 	call	807128 <__subdf3>
  804604:	900d883a 	mov	r6,r18
  804608:	880f883a 	mov	r7,r17
  80460c:	1009883a 	mov	r4,r2
  804610:	180b883a 	mov	r5,r3
  804614:	08067cc0 	call	8067cc <__ledf2>
  804618:	1000a716 	blt	r2,zero,8048b8 <_dtoa_r+0xae8>
  80461c:	d8c00717 	ldw	r3,28(sp)
  804620:	d9000c17 	ldw	r4,48(sp)
  804624:	b0c5c83a 	sub	r2,r22,r3
  804628:	11004f0e 	bge	r2,r4,804768 <_dtoa_r+0x998>
  80462c:	9009883a 	mov	r4,r18
  804630:	880b883a 	mov	r5,r17
  804634:	000d883a 	mov	r6,zero
  804638:	01d00934 	movhi	r7,16420
  80463c:	08068c00 	call	8068c0 <__muldf3>
  804640:	a009883a 	mov	r4,r20
  804644:	000d883a 	mov	r6,zero
  804648:	01d00934 	movhi	r7,16420
  80464c:	980b883a 	mov	r5,r19
  804650:	1025883a 	mov	r18,r2
  804654:	1823883a 	mov	r17,r3
  804658:	08068c00 	call	8068c0 <__muldf3>
  80465c:	d8800e15 	stw	r2,56(sp)
  804660:	1829883a 	mov	r20,r3
  804664:	b013883a 	mov	r9,r22
  804668:	003fc806 	br	80458c <__alt_data_end+0xff80458c>
  80466c:	11000017 	ldw	r4,0(r2)
  804670:	11400117 	ldw	r5,4(r2)
  804674:	b00d883a 	mov	r6,r22
  804678:	900f883a 	mov	r7,r18
  80467c:	08068c00 	call	8068c0 <__muldf3>
  804680:	d8801115 	stw	r2,68(sp)
  804684:	dcc00717 	ldw	r19,28(sp)
  804688:	d8800c17 	ldw	r2,48(sp)
  80468c:	d8c01215 	stw	r3,72(sp)
  804690:	98ad883a 	add	r22,r19,r2
  804694:	d9000e17 	ldw	r4,56(sp)
  804698:	a00b883a 	mov	r5,r20
  80469c:	9cc00044 	addi	r19,r19,1
  8046a0:	0807a240 	call	807a24 <__fixdfsi>
  8046a4:	1009883a 	mov	r4,r2
  8046a8:	d8801515 	stw	r2,84(sp)
  8046ac:	08013d80 	call	8013d8 <__floatsidf>
  8046b0:	d9000e17 	ldw	r4,56(sp)
  8046b4:	100d883a 	mov	r6,r2
  8046b8:	180f883a 	mov	r7,r3
  8046bc:	a00b883a 	mov	r5,r20
  8046c0:	08071280 	call	807128 <__subdf3>
  8046c4:	da401517 	ldw	r9,84(sp)
  8046c8:	1025883a 	mov	r18,r2
  8046cc:	1823883a 	mov	r17,r3
  8046d0:	4a400c04 	addi	r9,r9,48
  8046d4:	9a7fffc5 	stb	r9,-1(r19)
  8046d8:	000d883a 	mov	r6,zero
  8046dc:	b4c01b1e 	bne	r22,r19,80474c <_dtoa_r+0x97c>
  8046e0:	d9001117 	ldw	r4,68(sp)
  8046e4:	d9401217 	ldw	r5,72(sp)
  8046e8:	01cff834 	movhi	r7,16352
  8046ec:	08053ec0 	call	8053ec <__adddf3>
  8046f0:	100d883a 	mov	r6,r2
  8046f4:	180f883a 	mov	r7,r3
  8046f8:	9009883a 	mov	r4,r18
  8046fc:	880b883a 	mov	r5,r17
  804700:	08066f00 	call	8066f0 <__gedf2>
  804704:	00806c16 	blt	zero,r2,8048b8 <_dtoa_r+0xae8>
  804708:	d9801117 	ldw	r6,68(sp)
  80470c:	d9c01217 	ldw	r7,72(sp)
  804710:	0009883a 	mov	r4,zero
  804714:	014ff834 	movhi	r5,16352
  804718:	08071280 	call	807128 <__subdf3>
  80471c:	100d883a 	mov	r6,r2
  804720:	180f883a 	mov	r7,r3
  804724:	9009883a 	mov	r4,r18
  804728:	880b883a 	mov	r5,r17
  80472c:	08067cc0 	call	8067cc <__ledf2>
  804730:	10000d0e 	bge	r2,zero,804768 <_dtoa_r+0x998>
  804734:	00c00c04 	movi	r3,48
  804738:	b0bfffc4 	addi	r2,r22,-1
  80473c:	11000007 	ldb	r4,0(r2)
  804740:	20c2351e 	bne	r4,r3,805018 <_dtoa_r+0x1248>
  804744:	102d883a 	mov	r22,r2
  804748:	003ffb06 	br	804738 <__alt_data_end+0xff804738>
  80474c:	01d00934 	movhi	r7,16420
  804750:	1009883a 	mov	r4,r2
  804754:	180b883a 	mov	r5,r3
  804758:	08068c00 	call	8068c0 <__muldf3>
  80475c:	d8800e15 	stw	r2,56(sp)
  804760:	1829883a 	mov	r20,r3
  804764:	003fcb06 	br	804694 <__alt_data_end+0xff804694>
  804768:	dcc01317 	ldw	r19,76(sp)
  80476c:	d8800117 	ldw	r2,4(sp)
  804770:	10007116 	blt	r2,zero,804938 <_dtoa_r+0xb68>
  804774:	00c00384 	movi	r3,14
  804778:	1f006f16 	blt	r3,fp,804938 <_dtoa_r+0xb68>
  80477c:	e00490fa 	slli	r2,fp,3
  804780:	00c02074 	movhi	r3,129
  804784:	18e60004 	addi	r3,r3,-26624
  804788:	1885883a 	add	r2,r3,r2
  80478c:	d8c02017 	ldw	r3,128(sp)
  804790:	14400017 	ldw	r17,0(r2)
  804794:	14800117 	ldw	r18,4(r2)
  804798:	1800110e 	bge	r3,zero,8047e0 <_dtoa_r+0xa10>
  80479c:	d9000417 	ldw	r4,16(sp)
  8047a0:	01000f16 	blt	zero,r4,8047e0 <_dtoa_r+0xa10>
  8047a4:	2001331e 	bne	r4,zero,804c74 <_dtoa_r+0xea4>
  8047a8:	8809883a 	mov	r4,r17
  8047ac:	900b883a 	mov	r5,r18
  8047b0:	000d883a 	mov	r6,zero
  8047b4:	01d00534 	movhi	r7,16404
  8047b8:	08068c00 	call	8068c0 <__muldf3>
  8047bc:	d9800917 	ldw	r6,36(sp)
  8047c0:	980f883a 	mov	r7,r19
  8047c4:	1009883a 	mov	r4,r2
  8047c8:	180b883a 	mov	r5,r3
  8047cc:	08066f00 	call	8066f0 <__gedf2>
  8047d0:	0025883a 	mov	r18,zero
  8047d4:	0023883a 	mov	r17,zero
  8047d8:	1001280e 	bge	r2,zero,804c7c <_dtoa_r+0xeac>
  8047dc:	00012e06 	br	804c98 <_dtoa_r+0xec8>
  8047e0:	d8c00417 	ldw	r3,16(sp)
  8047e4:	dd400717 	ldw	r21,28(sp)
  8047e8:	ddc00917 	ldw	r23,36(sp)
  8047ec:	18bfffc4 	addi	r2,r3,-1
  8047f0:	a885883a 	add	r2,r21,r2
  8047f4:	d8800415 	stw	r2,16(sp)
  8047f8:	880d883a 	mov	r6,r17
  8047fc:	900f883a 	mov	r7,r18
  804800:	b809883a 	mov	r4,r23
  804804:	980b883a 	mov	r5,r19
  804808:	0805c980 	call	805c98 <__divdf3>
  80480c:	180b883a 	mov	r5,r3
  804810:	1009883a 	mov	r4,r2
  804814:	0807a240 	call	807a24 <__fixdfsi>
  804818:	1009883a 	mov	r4,r2
  80481c:	1029883a 	mov	r20,r2
  804820:	08013d80 	call	8013d8 <__floatsidf>
  804824:	880d883a 	mov	r6,r17
  804828:	900f883a 	mov	r7,r18
  80482c:	1009883a 	mov	r4,r2
  804830:	180b883a 	mov	r5,r3
  804834:	08068c00 	call	8068c0 <__muldf3>
  804838:	b809883a 	mov	r4,r23
  80483c:	100d883a 	mov	r6,r2
  804840:	180f883a 	mov	r7,r3
  804844:	980b883a 	mov	r5,r19
  804848:	08071280 	call	807128 <__subdf3>
  80484c:	a1000c04 	addi	r4,r20,48
  804850:	a9000005 	stb	r4,0(r21)
  804854:	d9000417 	ldw	r4,16(sp)
  804858:	ad800044 	addi	r22,r21,1
  80485c:	a900271e 	bne	r21,r4,8048fc <_dtoa_r+0xb2c>
  804860:	100d883a 	mov	r6,r2
  804864:	180f883a 	mov	r7,r3
  804868:	1009883a 	mov	r4,r2
  80486c:	180b883a 	mov	r5,r3
  804870:	08053ec0 	call	8053ec <__adddf3>
  804874:	100d883a 	mov	r6,r2
  804878:	180f883a 	mov	r7,r3
  80487c:	8809883a 	mov	r4,r17
  804880:	900b883a 	mov	r5,r18
  804884:	102b883a 	mov	r21,r2
  804888:	1827883a 	mov	r19,r3
  80488c:	08067cc0 	call	8067cc <__ledf2>
  804890:	10000a16 	blt	r2,zero,8048bc <_dtoa_r+0xaec>
  804894:	a80d883a 	mov	r6,r21
  804898:	980f883a 	mov	r7,r19
  80489c:	8809883a 	mov	r4,r17
  8048a0:	900b883a 	mov	r5,r18
  8048a4:	08066680 	call	806668 <__eqdf2>
  8048a8:	1001dc1e 	bne	r2,zero,80501c <_dtoa_r+0x124c>
  8048ac:	a500004c 	andi	r20,r20,1
  8048b0:	a000021e 	bne	r20,zero,8048bc <_dtoa_r+0xaec>
  8048b4:	0001d906 	br	80501c <_dtoa_r+0x124c>
  8048b8:	a839883a 	mov	fp,r21
  8048bc:	00c00e44 	movi	r3,57
  8048c0:	b0bfffc4 	addi	r2,r22,-1
  8048c4:	11000007 	ldb	r4,0(r2)
  8048c8:	20c0081e 	bne	r4,r3,8048ec <_dtoa_r+0xb1c>
  8048cc:	d9000717 	ldw	r4,28(sp)
  8048d0:	2080041e 	bne	r4,r2,8048e4 <_dtoa_r+0xb14>
  8048d4:	00c00c04 	movi	r3,48
  8048d8:	e7000044 	addi	fp,fp,1
  8048dc:	20c00005 	stb	r3,0(r4)
  8048e0:	00000206 	br	8048ec <_dtoa_r+0xb1c>
  8048e4:	102d883a 	mov	r22,r2
  8048e8:	003ff506 	br	8048c0 <__alt_data_end+0xff8048c0>
  8048ec:	10c00003 	ldbu	r3,0(r2)
  8048f0:	18c00044 	addi	r3,r3,1
  8048f4:	10c00005 	stb	r3,0(r2)
  8048f8:	0001c806 	br	80501c <_dtoa_r+0x124c>
  8048fc:	000d883a 	mov	r6,zero
  804900:	01d00934 	movhi	r7,16420
  804904:	1009883a 	mov	r4,r2
  804908:	180b883a 	mov	r5,r3
  80490c:	08068c00 	call	8068c0 <__muldf3>
  804910:	000d883a 	mov	r6,zero
  804914:	000f883a 	mov	r7,zero
  804918:	1009883a 	mov	r4,r2
  80491c:	180b883a 	mov	r5,r3
  804920:	102f883a 	mov	r23,r2
  804924:	1827883a 	mov	r19,r3
  804928:	b02b883a 	mov	r21,r22
  80492c:	08066680 	call	806668 <__eqdf2>
  804930:	103fb11e 	bne	r2,zero,8047f8 <__alt_data_end+0xff8047f8>
  804934:	0001b906 	br	80501c <_dtoa_r+0x124c>
  804938:	d8c00b17 	ldw	r3,44(sp)
  80493c:	18002b26 	beq	r3,zero,8049ec <_dtoa_r+0xc1c>
  804940:	d9000817 	ldw	r4,32(sp)
  804944:	00c00044 	movi	r3,1
  804948:	19000a16 	blt	r3,r4,804974 <_dtoa_r+0xba4>
  80494c:	d8c01017 	ldw	r3,64(sp)
  804950:	18000226 	beq	r3,zero,80495c <_dtoa_r+0xb8c>
  804954:	10810cc4 	addi	r2,r2,1075
  804958:	00000306 	br	804968 <_dtoa_r+0xb98>
  80495c:	d8c00217 	ldw	r3,8(sp)
  804960:	00800d84 	movi	r2,54
  804964:	10c5c83a 	sub	r2,r2,r3
  804968:	dc800a17 	ldw	r18,40(sp)
  80496c:	dd000617 	ldw	r20,24(sp)
  804970:	00001506 	br	8049c8 <_dtoa_r+0xbf8>
  804974:	d9000417 	ldw	r4,16(sp)
  804978:	d8800a17 	ldw	r2,40(sp)
  80497c:	24bfffc4 	addi	r18,r4,-1
  804980:	14800216 	blt	r2,r18,80498c <_dtoa_r+0xbbc>
  804984:	14a5c83a 	sub	r18,r2,r18
  804988:	00000706 	br	8049a8 <_dtoa_r+0xbd8>
  80498c:	d8c00a17 	ldw	r3,40(sp)
  804990:	d9000d17 	ldw	r4,52(sp)
  804994:	dc800a15 	stw	r18,40(sp)
  804998:	90cdc83a 	sub	r6,r18,r3
  80499c:	2189883a 	add	r4,r4,r6
  8049a0:	d9000d15 	stw	r4,52(sp)
  8049a4:	0025883a 	mov	r18,zero
  8049a8:	d8800417 	ldw	r2,16(sp)
  8049ac:	1000040e 	bge	r2,zero,8049c0 <_dtoa_r+0xbf0>
  8049b0:	d8c00617 	ldw	r3,24(sp)
  8049b4:	18a9c83a 	sub	r20,r3,r2
  8049b8:	0005883a 	mov	r2,zero
  8049bc:	00000206 	br	8049c8 <_dtoa_r+0xbf8>
  8049c0:	dd000617 	ldw	r20,24(sp)
  8049c4:	d8800417 	ldw	r2,16(sp)
  8049c8:	d9000617 	ldw	r4,24(sp)
  8049cc:	01400044 	movi	r5,1
  8049d0:	b8af883a 	add	r23,r23,r2
  8049d4:	2089883a 	add	r4,r4,r2
  8049d8:	d9000615 	stw	r4,24(sp)
  8049dc:	8009883a 	mov	r4,r16
  8049e0:	0802d140 	call	802d14 <__i2b>
  8049e4:	1023883a 	mov	r17,r2
  8049e8:	00000306 	br	8049f8 <_dtoa_r+0xc28>
  8049ec:	dc800a17 	ldw	r18,40(sp)
  8049f0:	dd000617 	ldw	r20,24(sp)
  8049f4:	0023883a 	mov	r17,zero
  8049f8:	a0000926 	beq	r20,zero,804a20 <_dtoa_r+0xc50>
  8049fc:	05c0080e 	bge	zero,r23,804a20 <_dtoa_r+0xc50>
  804a00:	a005883a 	mov	r2,r20
  804a04:	bd00010e 	bge	r23,r20,804a0c <_dtoa_r+0xc3c>
  804a08:	b805883a 	mov	r2,r23
  804a0c:	d8c00617 	ldw	r3,24(sp)
  804a10:	a0a9c83a 	sub	r20,r20,r2
  804a14:	b8afc83a 	sub	r23,r23,r2
  804a18:	1887c83a 	sub	r3,r3,r2
  804a1c:	d8c00615 	stw	r3,24(sp)
  804a20:	d9000a17 	ldw	r4,40(sp)
  804a24:	01001a0e 	bge	zero,r4,804a90 <_dtoa_r+0xcc0>
  804a28:	d8800b17 	ldw	r2,44(sp)
  804a2c:	10001326 	beq	r2,zero,804a7c <_dtoa_r+0xcac>
  804a30:	90000e26 	beq	r18,zero,804a6c <_dtoa_r+0xc9c>
  804a34:	880b883a 	mov	r5,r17
  804a38:	900d883a 	mov	r6,r18
  804a3c:	8009883a 	mov	r4,r16
  804a40:	0802fc80 	call	802fc8 <__pow5mult>
  804a44:	d9800317 	ldw	r6,12(sp)
  804a48:	100b883a 	mov	r5,r2
  804a4c:	8009883a 	mov	r4,r16
  804a50:	1023883a 	mov	r17,r2
  804a54:	0802d500 	call	802d50 <__multiply>
  804a58:	d9400317 	ldw	r5,12(sp)
  804a5c:	102b883a 	mov	r21,r2
  804a60:	8009883a 	mov	r4,r16
  804a64:	08029540 	call	802954 <_Bfree>
  804a68:	dd400315 	stw	r21,12(sp)
  804a6c:	d8c00a17 	ldw	r3,40(sp)
  804a70:	1c8dc83a 	sub	r6,r3,r18
  804a74:	30000626 	beq	r6,zero,804a90 <_dtoa_r+0xcc0>
  804a78:	00000106 	br	804a80 <_dtoa_r+0xcb0>
  804a7c:	d9800a17 	ldw	r6,40(sp)
  804a80:	d9400317 	ldw	r5,12(sp)
  804a84:	8009883a 	mov	r4,r16
  804a88:	0802fc80 	call	802fc8 <__pow5mult>
  804a8c:	d8800315 	stw	r2,12(sp)
  804a90:	05400044 	movi	r21,1
  804a94:	8009883a 	mov	r4,r16
  804a98:	a80b883a 	mov	r5,r21
  804a9c:	0802d140 	call	802d14 <__i2b>
  804aa0:	d9000d17 	ldw	r4,52(sp)
  804aa4:	1025883a 	mov	r18,r2
  804aa8:	20016c26 	beq	r4,zero,80505c <_dtoa_r+0x128c>
  804aac:	200d883a 	mov	r6,r4
  804ab0:	100b883a 	mov	r5,r2
  804ab4:	8009883a 	mov	r4,r16
  804ab8:	0802fc80 	call	802fc8 <__pow5mult>
  804abc:	1025883a 	mov	r18,r2
  804ac0:	d8800817 	ldw	r2,32(sp)
  804ac4:	a8801216 	blt	r21,r2,804b10 <_dtoa_r+0xd40>
  804ac8:	d8c00917 	ldw	r3,36(sp)
  804acc:	18000c1e 	bne	r3,zero,804b00 <_dtoa_r+0xd30>
  804ad0:	00800434 	movhi	r2,16
  804ad4:	10bfffc4 	addi	r2,r2,-1
  804ad8:	9884703a 	and	r2,r19,r2
  804adc:	1000081e 	bne	r2,zero,804b00 <_dtoa_r+0xd30>
  804ae0:	9cdffc2c 	andhi	r19,r19,32752
  804ae4:	98000626 	beq	r19,zero,804b00 <_dtoa_r+0xd30>
  804ae8:	d9000617 	ldw	r4,24(sp)
  804aec:	bdc00044 	addi	r23,r23,1
  804af0:	04c00044 	movi	r19,1
  804af4:	21000044 	addi	r4,r4,1
  804af8:	d9000615 	stw	r4,24(sp)
  804afc:	00000106 	br	804b04 <_dtoa_r+0xd34>
  804b00:	0027883a 	mov	r19,zero
  804b04:	d8800d17 	ldw	r2,52(sp)
  804b08:	10000c26 	beq	r2,zero,804b3c <_dtoa_r+0xd6c>
  804b0c:	00000106 	br	804b14 <_dtoa_r+0xd44>
  804b10:	0027883a 	mov	r19,zero
  804b14:	90800417 	ldw	r2,16(r18)
  804b18:	05400804 	movi	r21,32
  804b1c:	10800104 	addi	r2,r2,4
  804b20:	1085883a 	add	r2,r2,r2
  804b24:	1085883a 	add	r2,r2,r2
  804b28:	9085883a 	add	r2,r18,r2
  804b2c:	11000017 	ldw	r4,0(r2)
  804b30:	0802bfc0 	call	802bfc <__hi0bits>
  804b34:	a885c83a 	sub	r2,r21,r2
  804b38:	00000106 	br	804b40 <_dtoa_r+0xd70>
  804b3c:	00800044 	movi	r2,1
  804b40:	15eb883a 	add	r21,r2,r23
  804b44:	a88007cc 	andi	r2,r21,31
  804b48:	10000c26 	beq	r2,zero,804b7c <_dtoa_r+0xdac>
  804b4c:	00c00804 	movi	r3,32
  804b50:	1887c83a 	sub	r3,r3,r2
  804b54:	01000104 	movi	r4,4
  804b58:	20c0060e 	bge	r4,r3,804b74 <_dtoa_r+0xda4>
  804b5c:	00c00704 	movi	r3,28
  804b60:	1885c83a 	sub	r2,r3,r2
  804b64:	d8c00617 	ldw	r3,24(sp)
  804b68:	1887883a 	add	r3,r3,r2
  804b6c:	d8c00615 	stw	r3,24(sp)
  804b70:	00000606 	br	804b8c <_dtoa_r+0xdbc>
  804b74:	19000726 	beq	r3,r4,804b94 <_dtoa_r+0xdc4>
  804b78:	1805883a 	mov	r2,r3
  804b7c:	d9000617 	ldw	r4,24(sp)
  804b80:	10800704 	addi	r2,r2,28
  804b84:	2089883a 	add	r4,r4,r2
  804b88:	d9000615 	stw	r4,24(sp)
  804b8c:	a0a9883a 	add	r20,r20,r2
  804b90:	b8af883a 	add	r23,r23,r2
  804b94:	d8800617 	ldw	r2,24(sp)
  804b98:	0080050e 	bge	zero,r2,804bb0 <_dtoa_r+0xde0>
  804b9c:	d9400317 	ldw	r5,12(sp)
  804ba0:	100d883a 	mov	r6,r2
  804ba4:	8009883a 	mov	r4,r16
  804ba8:	08030fc0 	call	8030fc <__lshift>
  804bac:	d8800315 	stw	r2,12(sp)
  804bb0:	05c0050e 	bge	zero,r23,804bc8 <_dtoa_r+0xdf8>
  804bb4:	900b883a 	mov	r5,r18
  804bb8:	b80d883a 	mov	r6,r23
  804bbc:	8009883a 	mov	r4,r16
  804bc0:	08030fc0 	call	8030fc <__lshift>
  804bc4:	1025883a 	mov	r18,r2
  804bc8:	d8c00f17 	ldw	r3,60(sp)
  804bcc:	18001626 	beq	r3,zero,804c28 <_dtoa_r+0xe58>
  804bd0:	d9000317 	ldw	r4,12(sp)
  804bd4:	900b883a 	mov	r5,r18
  804bd8:	08032440 	call	803244 <__mcmp>
  804bdc:	1000120e 	bge	r2,zero,804c28 <_dtoa_r+0xe58>
  804be0:	d9400317 	ldw	r5,12(sp)
  804be4:	8009883a 	mov	r4,r16
  804be8:	000f883a 	mov	r7,zero
  804bec:	01800284 	movi	r6,10
  804bf0:	08029cc0 	call	8029cc <__multadd>
  804bf4:	d9000b17 	ldw	r4,44(sp)
  804bf8:	d8800315 	stw	r2,12(sp)
  804bfc:	e73fffc4 	addi	fp,fp,-1
  804c00:	20011b26 	beq	r4,zero,805070 <_dtoa_r+0x12a0>
  804c04:	880b883a 	mov	r5,r17
  804c08:	000f883a 	mov	r7,zero
  804c0c:	01800284 	movi	r6,10
  804c10:	8009883a 	mov	r4,r16
  804c14:	08029cc0 	call	8029cc <__multadd>
  804c18:	1023883a 	mov	r17,r2
  804c1c:	d8800517 	ldw	r2,20(sp)
  804c20:	00802d16 	blt	zero,r2,804cd8 <_dtoa_r+0xf08>
  804c24:	00011806 	br	805088 <_dtoa_r+0x12b8>
  804c28:	d8c00417 	ldw	r3,16(sp)
  804c2c:	00c02216 	blt	zero,r3,804cb8 <_dtoa_r+0xee8>
  804c30:	d9000817 	ldw	r4,32(sp)
  804c34:	00800084 	movi	r2,2
  804c38:	11001f0e 	bge	r2,r4,804cb8 <_dtoa_r+0xee8>
  804c3c:	d8c00515 	stw	r3,20(sp)
  804c40:	d8800517 	ldw	r2,20(sp)
  804c44:	10000d1e 	bne	r2,zero,804c7c <_dtoa_r+0xeac>
  804c48:	900b883a 	mov	r5,r18
  804c4c:	8009883a 	mov	r4,r16
  804c50:	000f883a 	mov	r7,zero
  804c54:	01800144 	movi	r6,5
  804c58:	08029cc0 	call	8029cc <__multadd>
  804c5c:	d9000317 	ldw	r4,12(sp)
  804c60:	100b883a 	mov	r5,r2
  804c64:	1025883a 	mov	r18,r2
  804c68:	08032440 	call	803244 <__mcmp>
  804c6c:	00800a16 	blt	zero,r2,804c98 <_dtoa_r+0xec8>
  804c70:	00000206 	br	804c7c <_dtoa_r+0xeac>
  804c74:	0025883a 	mov	r18,zero
  804c78:	0023883a 	mov	r17,zero
  804c7c:	d8c02017 	ldw	r3,128(sp)
  804c80:	dd800717 	ldw	r22,28(sp)
  804c84:	00f8303a 	nor	fp,zero,r3
  804c88:	00000806 	br	804cac <_dtoa_r+0xedc>
  804c8c:	a839883a 	mov	fp,r21
  804c90:	0025883a 	mov	r18,zero
  804c94:	0023883a 	mov	r17,zero
  804c98:	d9000717 	ldw	r4,28(sp)
  804c9c:	00800c44 	movi	r2,49
  804ca0:	e7000044 	addi	fp,fp,1
  804ca4:	25800044 	addi	r22,r4,1
  804ca8:	20800005 	stb	r2,0(r4)
  804cac:	8827883a 	mov	r19,r17
  804cb0:	0023883a 	mov	r17,zero
  804cb4:	0000cb06 	br	804fe4 <_dtoa_r+0x1214>
  804cb8:	d8800b17 	ldw	r2,44(sp)
  804cbc:	1000041e 	bne	r2,zero,804cd0 <_dtoa_r+0xf00>
  804cc0:	d8c00417 	ldw	r3,16(sp)
  804cc4:	d8c00515 	stw	r3,20(sp)
  804cc8:	dcc00717 	ldw	r19,28(sp)
  804ccc:	00009006 	br	804f10 <_dtoa_r+0x1140>
  804cd0:	d9000417 	ldw	r4,16(sp)
  804cd4:	d9000515 	stw	r4,20(sp)
  804cd8:	0500050e 	bge	zero,r20,804cf0 <_dtoa_r+0xf20>
  804cdc:	880b883a 	mov	r5,r17
  804ce0:	a00d883a 	mov	r6,r20
  804ce4:	8009883a 	mov	r4,r16
  804ce8:	08030fc0 	call	8030fc <__lshift>
  804cec:	1023883a 	mov	r17,r2
  804cf0:	98001126 	beq	r19,zero,804d38 <_dtoa_r+0xf68>
  804cf4:	89400117 	ldw	r5,4(r17)
  804cf8:	8009883a 	mov	r4,r16
  804cfc:	08028700 	call	802870 <_Balloc>
  804d00:	89800417 	ldw	r6,16(r17)
  804d04:	89400304 	addi	r5,r17,12
  804d08:	11000304 	addi	r4,r2,12
  804d0c:	31800084 	addi	r6,r6,2
  804d10:	318d883a 	add	r6,r6,r6
  804d14:	318d883a 	add	r6,r6,r6
  804d18:	1027883a 	mov	r19,r2
  804d1c:	08050f00 	call	8050f0 <memcpy>
  804d20:	980b883a 	mov	r5,r19
  804d24:	01800044 	movi	r6,1
  804d28:	8009883a 	mov	r4,r16
  804d2c:	08030fc0 	call	8030fc <__lshift>
  804d30:	1027883a 	mov	r19,r2
  804d34:	00000106 	br	804d3c <_dtoa_r+0xf6c>
  804d38:	8827883a 	mov	r19,r17
  804d3c:	d8800517 	ldw	r2,20(sp)
  804d40:	ddc00717 	ldw	r23,28(sp)
  804d44:	d8c00917 	ldw	r3,36(sp)
  804d48:	157fffc4 	addi	r21,r2,-1
  804d4c:	bd6b883a 	add	r21,r23,r21
  804d50:	18c0004c 	andi	r3,r3,1
  804d54:	dd400615 	stw	r21,24(sp)
  804d58:	d8c00515 	stw	r3,20(sp)
  804d5c:	d9000317 	ldw	r4,12(sp)
  804d60:	900b883a 	mov	r5,r18
  804d64:	0803bb00 	call	803bb0 <quorem>
  804d68:	d9000317 	ldw	r4,12(sp)
  804d6c:	880b883a 	mov	r5,r17
  804d70:	102d883a 	mov	r22,r2
  804d74:	15400c04 	addi	r21,r2,48
  804d78:	08032440 	call	803244 <__mcmp>
  804d7c:	980d883a 	mov	r6,r19
  804d80:	900b883a 	mov	r5,r18
  804d84:	8009883a 	mov	r4,r16
  804d88:	d8800415 	stw	r2,16(sp)
  804d8c:	08032a00 	call	8032a0 <__mdiff>
  804d90:	1029883a 	mov	r20,r2
  804d94:	10800317 	ldw	r2,12(r2)
  804d98:	1000041e 	bne	r2,zero,804dac <_dtoa_r+0xfdc>
  804d9c:	d9000317 	ldw	r4,12(sp)
  804da0:	a00b883a 	mov	r5,r20
  804da4:	08032440 	call	803244 <__mcmp>
  804da8:	00000106 	br	804db0 <_dtoa_r+0xfe0>
  804dac:	00800044 	movi	r2,1
  804db0:	a00b883a 	mov	r5,r20
  804db4:	8009883a 	mov	r4,r16
  804db8:	d8801415 	stw	r2,80(sp)
  804dbc:	08029540 	call	802954 <_Bfree>
  804dc0:	d8801417 	ldw	r2,80(sp)
  804dc4:	bd000044 	addi	r20,r23,1
  804dc8:	1000091e 	bne	r2,zero,804df0 <_dtoa_r+0x1020>
  804dcc:	d9000817 	ldw	r4,32(sp)
  804dd0:	2000071e 	bne	r4,zero,804df0 <_dtoa_r+0x1020>
  804dd4:	d8c00517 	ldw	r3,20(sp)
  804dd8:	1800051e 	bne	r3,zero,804df0 <_dtoa_r+0x1020>
  804ddc:	00800e44 	movi	r2,57
  804de0:	a8802026 	beq	r21,r2,804e64 <_dtoa_r+0x1094>
  804de4:	d8c00417 	ldw	r3,16(sp)
  804de8:	00c01716 	blt	zero,r3,804e48 <_dtoa_r+0x1078>
  804dec:	00001706 	br	804e4c <_dtoa_r+0x107c>
  804df0:	d8c00417 	ldw	r3,16(sp)
  804df4:	18000516 	blt	r3,zero,804e0c <_dtoa_r+0x103c>
  804df8:	1800171e 	bne	r3,zero,804e58 <_dtoa_r+0x1088>
  804dfc:	d9000817 	ldw	r4,32(sp)
  804e00:	2000151e 	bne	r4,zero,804e58 <_dtoa_r+0x1088>
  804e04:	d8c00517 	ldw	r3,20(sp)
  804e08:	1800131e 	bne	r3,zero,804e58 <_dtoa_r+0x1088>
  804e0c:	00800f0e 	bge	zero,r2,804e4c <_dtoa_r+0x107c>
  804e10:	d9400317 	ldw	r5,12(sp)
  804e14:	8009883a 	mov	r4,r16
  804e18:	01800044 	movi	r6,1
  804e1c:	08030fc0 	call	8030fc <__lshift>
  804e20:	900b883a 	mov	r5,r18
  804e24:	1009883a 	mov	r4,r2
  804e28:	d8800315 	stw	r2,12(sp)
  804e2c:	08032440 	call	803244 <__mcmp>
  804e30:	00800316 	blt	zero,r2,804e40 <_dtoa_r+0x1070>
  804e34:	1000051e 	bne	r2,zero,804e4c <_dtoa_r+0x107c>
  804e38:	a880004c 	andi	r2,r21,1
  804e3c:	10000326 	beq	r2,zero,804e4c <_dtoa_r+0x107c>
  804e40:	00800e44 	movi	r2,57
  804e44:	a8800726 	beq	r21,r2,804e64 <_dtoa_r+0x1094>
  804e48:	b5400c44 	addi	r21,r22,49
  804e4c:	a02d883a 	mov	r22,r20
  804e50:	bd400005 	stb	r21,0(r23)
  804e54:	00006306 	br	804fe4 <_dtoa_r+0x1214>
  804e58:	00800a0e 	bge	zero,r2,804e84 <_dtoa_r+0x10b4>
  804e5c:	00800e44 	movi	r2,57
  804e60:	a880041e 	bne	r21,r2,804e74 <_dtoa_r+0x10a4>
  804e64:	00800e44 	movi	r2,57
  804e68:	a02d883a 	mov	r22,r20
  804e6c:	b8800005 	stb	r2,0(r23)
  804e70:	00004406 	br	804f84 <_dtoa_r+0x11b4>
  804e74:	a8c00044 	addi	r3,r21,1
  804e78:	a02d883a 	mov	r22,r20
  804e7c:	b8c00005 	stb	r3,0(r23)
  804e80:	00005806 	br	804fe4 <_dtoa_r+0x1214>
  804e84:	d8c00617 	ldw	r3,24(sp)
  804e88:	bd400005 	stb	r21,0(r23)
  804e8c:	a02d883a 	mov	r22,r20
  804e90:	b8c03026 	beq	r23,r3,804f54 <_dtoa_r+0x1184>
  804e94:	d9400317 	ldw	r5,12(sp)
  804e98:	000f883a 	mov	r7,zero
  804e9c:	01800284 	movi	r6,10
  804ea0:	8009883a 	mov	r4,r16
  804ea4:	08029cc0 	call	8029cc <__multadd>
  804ea8:	d8800315 	stw	r2,12(sp)
  804eac:	000f883a 	mov	r7,zero
  804eb0:	01800284 	movi	r6,10
  804eb4:	880b883a 	mov	r5,r17
  804eb8:	8009883a 	mov	r4,r16
  804ebc:	8cc0041e 	bne	r17,r19,804ed0 <_dtoa_r+0x1100>
  804ec0:	08029cc0 	call	8029cc <__multadd>
  804ec4:	1023883a 	mov	r17,r2
  804ec8:	1027883a 	mov	r19,r2
  804ecc:	00000806 	br	804ef0 <_dtoa_r+0x1120>
  804ed0:	08029cc0 	call	8029cc <__multadd>
  804ed4:	980b883a 	mov	r5,r19
  804ed8:	000f883a 	mov	r7,zero
  804edc:	01800284 	movi	r6,10
  804ee0:	8009883a 	mov	r4,r16
  804ee4:	1023883a 	mov	r17,r2
  804ee8:	08029cc0 	call	8029cc <__multadd>
  804eec:	1027883a 	mov	r19,r2
  804ef0:	a02f883a 	mov	r23,r20
  804ef4:	003f9906 	br	804d5c <__alt_data_end+0xff804d5c>
  804ef8:	d9400317 	ldw	r5,12(sp)
  804efc:	000f883a 	mov	r7,zero
  804f00:	01800284 	movi	r6,10
  804f04:	8009883a 	mov	r4,r16
  804f08:	08029cc0 	call	8029cc <__multadd>
  804f0c:	d8800315 	stw	r2,12(sp)
  804f10:	d9000317 	ldw	r4,12(sp)
  804f14:	900b883a 	mov	r5,r18
  804f18:	9cc00044 	addi	r19,r19,1
  804f1c:	0803bb00 	call	803bb0 <quorem>
  804f20:	d9000717 	ldw	r4,28(sp)
  804f24:	15400c04 	addi	r21,r2,48
  804f28:	d8c00517 	ldw	r3,20(sp)
  804f2c:	9d7fffc5 	stb	r21,-1(r19)
  804f30:	9905c83a 	sub	r2,r19,r4
  804f34:	10fff016 	blt	r2,r3,804ef8 <__alt_data_end+0xff804ef8>
  804f38:	182d883a 	mov	r22,r3
  804f3c:	00c00116 	blt	zero,r3,804f44 <_dtoa_r+0x1174>
  804f40:	05800044 	movi	r22,1
  804f44:	d9000717 	ldw	r4,28(sp)
  804f48:	8827883a 	mov	r19,r17
  804f4c:	0023883a 	mov	r17,zero
  804f50:	25ad883a 	add	r22,r4,r22
  804f54:	d9400317 	ldw	r5,12(sp)
  804f58:	8009883a 	mov	r4,r16
  804f5c:	01800044 	movi	r6,1
  804f60:	08030fc0 	call	8030fc <__lshift>
  804f64:	900b883a 	mov	r5,r18
  804f68:	1009883a 	mov	r4,r2
  804f6c:	d8800315 	stw	r2,12(sp)
  804f70:	08032440 	call	803244 <__mcmp>
  804f74:	00800316 	blt	zero,r2,804f84 <_dtoa_r+0x11b4>
  804f78:	1000141e 	bne	r2,zero,804fcc <_dtoa_r+0x11fc>
  804f7c:	a8c0004c 	andi	r3,r21,1
  804f80:	18001226 	beq	r3,zero,804fcc <_dtoa_r+0x11fc>
  804f84:	01000e44 	movi	r4,57
  804f88:	b0bfffc4 	addi	r2,r22,-1
  804f8c:	10c00003 	ldbu	r3,0(r2)
  804f90:	19403fcc 	andi	r5,r3,255
  804f94:	2940201c 	xori	r5,r5,128
  804f98:	297fe004 	addi	r5,r5,-128
  804f9c:	2900081e 	bne	r5,r4,804fc0 <_dtoa_r+0x11f0>
  804fa0:	d8c00717 	ldw	r3,28(sp)
  804fa4:	1880041e 	bne	r3,r2,804fb8 <_dtoa_r+0x11e8>
  804fa8:	00800c44 	movi	r2,49
  804fac:	e7000044 	addi	fp,fp,1
  804fb0:	18800005 	stb	r2,0(r3)
  804fb4:	00000b06 	br	804fe4 <_dtoa_r+0x1214>
  804fb8:	102d883a 	mov	r22,r2
  804fbc:	003ff206 	br	804f88 <__alt_data_end+0xff804f88>
  804fc0:	18c00044 	addi	r3,r3,1
  804fc4:	10c00005 	stb	r3,0(r2)
  804fc8:	00000606 	br	804fe4 <_dtoa_r+0x1214>
  804fcc:	00c00c04 	movi	r3,48
  804fd0:	b0bfffc4 	addi	r2,r22,-1
  804fd4:	11000007 	ldb	r4,0(r2)
  804fd8:	20c0021e 	bne	r4,r3,804fe4 <_dtoa_r+0x1214>
  804fdc:	102d883a 	mov	r22,r2
  804fe0:	003ffb06 	br	804fd0 <__alt_data_end+0xff804fd0>
  804fe4:	900b883a 	mov	r5,r18
  804fe8:	8009883a 	mov	r4,r16
  804fec:	08029540 	call	802954 <_Bfree>
  804ff0:	98000a26 	beq	r19,zero,80501c <_dtoa_r+0x124c>
  804ff4:	88000426 	beq	r17,zero,805008 <_dtoa_r+0x1238>
  804ff8:	8cc00326 	beq	r17,r19,805008 <_dtoa_r+0x1238>
  804ffc:	880b883a 	mov	r5,r17
  805000:	8009883a 	mov	r4,r16
  805004:	08029540 	call	802954 <_Bfree>
  805008:	980b883a 	mov	r5,r19
  80500c:	8009883a 	mov	r4,r16
  805010:	08029540 	call	802954 <_Bfree>
  805014:	00000106 	br	80501c <_dtoa_r+0x124c>
  805018:	a839883a 	mov	fp,r21
  80501c:	d9400317 	ldw	r5,12(sp)
  805020:	8009883a 	mov	r4,r16
  805024:	08029540 	call	802954 <_Bfree>
  805028:	d9002117 	ldw	r4,132(sp)
  80502c:	e0800044 	addi	r2,fp,1
  805030:	b0000005 	stb	zero,0(r22)
  805034:	20800015 	stw	r2,0(r4)
  805038:	d8802317 	ldw	r2,140(sp)
  80503c:	10000526 	beq	r2,zero,805054 <_dtoa_r+0x1284>
  805040:	15800015 	stw	r22,0(r2)
  805044:	00000306 	br	805054 <_dtoa_r+0x1284>
  805048:	00802074 	movhi	r2,129
  80504c:	10a63604 	addi	r2,r2,-26408
  805050:	00001106 	br	805098 <_dtoa_r+0x12c8>
  805054:	d8800717 	ldw	r2,28(sp)
  805058:	00000f06 	br	805098 <_dtoa_r+0x12c8>
  80505c:	d8c00817 	ldw	r3,32(sp)
  805060:	a8fe990e 	bge	r21,r3,804ac8 <__alt_data_end+0xff804ac8>
  805064:	0027883a 	mov	r19,zero
  805068:	a805883a 	mov	r2,r21
  80506c:	003eb406 	br	804b40 <__alt_data_end+0xff804b40>
  805070:	d9000517 	ldw	r4,20(sp)
  805074:	013f1416 	blt	zero,r4,804cc8 <__alt_data_end+0xff804cc8>
  805078:	d8c00817 	ldw	r3,32(sp)
  80507c:	00800084 	movi	r2,2
  805080:	10ff110e 	bge	r2,r3,804cc8 <__alt_data_end+0xff804cc8>
  805084:	003eee06 	br	804c40 <__alt_data_end+0xff804c40>
  805088:	d9000817 	ldw	r4,32(sp)
  80508c:	00800084 	movi	r2,2
  805090:	113f110e 	bge	r2,r4,804cd8 <__alt_data_end+0xff804cd8>
  805094:	003eea06 	br	804c40 <__alt_data_end+0xff804c40>
  805098:	dfc01f17 	ldw	ra,124(sp)
  80509c:	df001e17 	ldw	fp,120(sp)
  8050a0:	ddc01d17 	ldw	r23,116(sp)
  8050a4:	dd801c17 	ldw	r22,112(sp)
  8050a8:	dd401b17 	ldw	r21,108(sp)
  8050ac:	dd001a17 	ldw	r20,104(sp)
  8050b0:	dcc01917 	ldw	r19,100(sp)
  8050b4:	dc801817 	ldw	r18,96(sp)
  8050b8:	dc401717 	ldw	r17,92(sp)
  8050bc:	dc001617 	ldw	r16,88(sp)
  8050c0:	dec02004 	addi	sp,sp,128
  8050c4:	f800283a 	ret

008050c8 <malloc>:
  8050c8:	00802074 	movhi	r2,129
  8050cc:	10a6f004 	addi	r2,r2,-25664
  8050d0:	200b883a 	mov	r5,r4
  8050d4:	11000017 	ldw	r4,0(r2)
  8050d8:	08038e01 	jmpi	8038e0 <_malloc_r>

008050dc <free>:
  8050dc:	00802074 	movhi	r2,129
  8050e0:	10a6f004 	addi	r2,r2,-25664
  8050e4:	200b883a 	mov	r5,r4
  8050e8:	11000017 	ldw	r4,0(r2)
  8050ec:	08051381 	jmpi	805138 <_free_r>

008050f0 <memcpy>:
  8050f0:	2005883a 	mov	r2,r4
  8050f4:	2007883a 	mov	r3,r4
  8050f8:	218d883a 	add	r6,r4,r6
  8050fc:	19800526 	beq	r3,r6,805114 <memcpy+0x24>
  805100:	29000003 	ldbu	r4,0(r5)
  805104:	18c00044 	addi	r3,r3,1
  805108:	29400044 	addi	r5,r5,1
  80510c:	193fffc5 	stb	r4,-1(r3)
  805110:	003ffa06 	br	8050fc <__alt_data_end+0xff8050fc>
  805114:	f800283a 	ret

00805118 <memset>:
  805118:	2005883a 	mov	r2,r4
  80511c:	2007883a 	mov	r3,r4
  805120:	218d883a 	add	r6,r4,r6
  805124:	19800326 	beq	r3,r6,805134 <memset+0x1c>
  805128:	19400005 	stb	r5,0(r3)
  80512c:	18c00044 	addi	r3,r3,1
  805130:	003ffc06 	br	805124 <__alt_data_end+0xff805124>
  805134:	f800283a 	ret

00805138 <_free_r>:
  805138:	28003726 	beq	r5,zero,805218 <_free_r+0xe0>
  80513c:	28ffff17 	ldw	r3,-4(r5)
  805140:	28bfff04 	addi	r2,r5,-4
  805144:	1800010e 	bge	r3,zero,80514c <_free_r+0x14>
  805148:	10c5883a 	add	r2,r2,r3
  80514c:	01402074 	movhi	r5,129
  805150:	2967b504 	addi	r5,r5,-24876
  805154:	28c00017 	ldw	r3,0(r5)
  805158:	280d883a 	mov	r6,r5
  80515c:	1800031e 	bne	r3,zero,80516c <_free_r+0x34>
  805160:	10000115 	stw	zero,4(r2)
  805164:	28800015 	stw	r2,0(r5)
  805168:	f800283a 	ret
  80516c:	10c00c2e 	bgeu	r2,r3,8051a0 <_free_r+0x68>
  805170:	11000017 	ldw	r4,0(r2)
  805174:	110b883a 	add	r5,r2,r4
  805178:	1940041e 	bne	r3,r5,80518c <_free_r+0x54>
  80517c:	19400017 	ldw	r5,0(r3)
  805180:	18c00117 	ldw	r3,4(r3)
  805184:	2909883a 	add	r4,r5,r4
  805188:	11000015 	stw	r4,0(r2)
  80518c:	10c00115 	stw	r3,4(r2)
  805190:	30800015 	stw	r2,0(r6)
  805194:	f800283a 	ret
  805198:	11400336 	bltu	r2,r5,8051a8 <_free_r+0x70>
  80519c:	2807883a 	mov	r3,r5
  8051a0:	19400117 	ldw	r5,4(r3)
  8051a4:	283ffc1e 	bne	r5,zero,805198 <__alt_data_end+0xff805198>
  8051a8:	19c00017 	ldw	r7,0(r3)
  8051ac:	19cd883a 	add	r6,r3,r7
  8051b0:	30800a1e 	bne	r6,r2,8051dc <_free_r+0xa4>
  8051b4:	10800017 	ldw	r2,0(r2)
  8051b8:	3885883a 	add	r2,r7,r2
  8051bc:	18800015 	stw	r2,0(r3)
  8051c0:	1889883a 	add	r4,r3,r2
  8051c4:	2900141e 	bne	r5,r4,805218 <_free_r+0xe0>
  8051c8:	29000017 	ldw	r4,0(r5)
  8051cc:	2085883a 	add	r2,r4,r2
  8051d0:	18800015 	stw	r2,0(r3)
  8051d4:	28800117 	ldw	r2,4(r5)
  8051d8:	00000e06 	br	805214 <_free_r+0xdc>
  8051dc:	1180032e 	bgeu	r2,r6,8051ec <_free_r+0xb4>
  8051e0:	00800304 	movi	r2,12
  8051e4:	20800015 	stw	r2,0(r4)
  8051e8:	f800283a 	ret
  8051ec:	11000017 	ldw	r4,0(r2)
  8051f0:	110d883a 	add	r6,r2,r4
  8051f4:	2980061e 	bne	r5,r6,805210 <_free_r+0xd8>
  8051f8:	29800017 	ldw	r6,0(r5)
  8051fc:	3109883a 	add	r4,r6,r4
  805200:	11000015 	stw	r4,0(r2)
  805204:	29000117 	ldw	r4,4(r5)
  805208:	11000115 	stw	r4,4(r2)
  80520c:	00000106 	br	805214 <_free_r+0xdc>
  805210:	11400115 	stw	r5,4(r2)
  805214:	18800115 	stw	r2,4(r3)
  805218:	f800283a 	ret

0080521c <_malloc_usable_size_r>:
  80521c:	28bfff17 	ldw	r2,-4(r5)
  805220:	1000030e 	bge	r2,zero,805230 <_malloc_usable_size_r+0x14>
  805224:	288b883a 	add	r5,r5,r2
  805228:	28ffff17 	ldw	r3,-4(r5)
  80522c:	10c5883a 	add	r2,r2,r3
  805230:	10bfff04 	addi	r2,r2,-4
  805234:	f800283a 	ret

00805238 <__divsi3>:
  805238:	20001b16 	blt	r4,zero,8052a8 <__divsi3+0x70>
  80523c:	000f883a 	mov	r7,zero
  805240:	28001616 	blt	r5,zero,80529c <__divsi3+0x64>
  805244:	200d883a 	mov	r6,r4
  805248:	29001a2e 	bgeu	r5,r4,8052b4 <__divsi3+0x7c>
  80524c:	00800804 	movi	r2,32
  805250:	00c00044 	movi	r3,1
  805254:	00000106 	br	80525c <__divsi3+0x24>
  805258:	10000d26 	beq	r2,zero,805290 <__divsi3+0x58>
  80525c:	294b883a 	add	r5,r5,r5
  805260:	10bfffc4 	addi	r2,r2,-1
  805264:	18c7883a 	add	r3,r3,r3
  805268:	293ffb36 	bltu	r5,r4,805258 <__alt_data_end+0xff805258>
  80526c:	0005883a 	mov	r2,zero
  805270:	18000726 	beq	r3,zero,805290 <__divsi3+0x58>
  805274:	0005883a 	mov	r2,zero
  805278:	31400236 	bltu	r6,r5,805284 <__divsi3+0x4c>
  80527c:	314dc83a 	sub	r6,r6,r5
  805280:	10c4b03a 	or	r2,r2,r3
  805284:	1806d07a 	srli	r3,r3,1
  805288:	280ad07a 	srli	r5,r5,1
  80528c:	183ffa1e 	bne	r3,zero,805278 <__alt_data_end+0xff805278>
  805290:	38000126 	beq	r7,zero,805298 <__divsi3+0x60>
  805294:	0085c83a 	sub	r2,zero,r2
  805298:	f800283a 	ret
  80529c:	014bc83a 	sub	r5,zero,r5
  8052a0:	39c0005c 	xori	r7,r7,1
  8052a4:	003fe706 	br	805244 <__alt_data_end+0xff805244>
  8052a8:	0109c83a 	sub	r4,zero,r4
  8052ac:	01c00044 	movi	r7,1
  8052b0:	003fe306 	br	805240 <__alt_data_end+0xff805240>
  8052b4:	00c00044 	movi	r3,1
  8052b8:	003fee06 	br	805274 <__alt_data_end+0xff805274>

008052bc <__modsi3>:
  8052bc:	20001716 	blt	r4,zero,80531c <__modsi3+0x60>
  8052c0:	000f883a 	mov	r7,zero
  8052c4:	2005883a 	mov	r2,r4
  8052c8:	28001216 	blt	r5,zero,805314 <__modsi3+0x58>
  8052cc:	2900162e 	bgeu	r5,r4,805328 <__modsi3+0x6c>
  8052d0:	01800804 	movi	r6,32
  8052d4:	00c00044 	movi	r3,1
  8052d8:	00000106 	br	8052e0 <__modsi3+0x24>
  8052dc:	30000a26 	beq	r6,zero,805308 <__modsi3+0x4c>
  8052e0:	294b883a 	add	r5,r5,r5
  8052e4:	31bfffc4 	addi	r6,r6,-1
  8052e8:	18c7883a 	add	r3,r3,r3
  8052ec:	293ffb36 	bltu	r5,r4,8052dc <__alt_data_end+0xff8052dc>
  8052f0:	18000526 	beq	r3,zero,805308 <__modsi3+0x4c>
  8052f4:	1806d07a 	srli	r3,r3,1
  8052f8:	11400136 	bltu	r2,r5,805300 <__modsi3+0x44>
  8052fc:	1145c83a 	sub	r2,r2,r5
  805300:	280ad07a 	srli	r5,r5,1
  805304:	183ffb1e 	bne	r3,zero,8052f4 <__alt_data_end+0xff8052f4>
  805308:	38000126 	beq	r7,zero,805310 <__modsi3+0x54>
  80530c:	0085c83a 	sub	r2,zero,r2
  805310:	f800283a 	ret
  805314:	014bc83a 	sub	r5,zero,r5
  805318:	003fec06 	br	8052cc <__alt_data_end+0xff8052cc>
  80531c:	0109c83a 	sub	r4,zero,r4
  805320:	01c00044 	movi	r7,1
  805324:	003fe706 	br	8052c4 <__alt_data_end+0xff8052c4>
  805328:	00c00044 	movi	r3,1
  80532c:	003ff106 	br	8052f4 <__alt_data_end+0xff8052f4>

00805330 <__udivsi3>:
  805330:	200d883a 	mov	r6,r4
  805334:	2900152e 	bgeu	r5,r4,80538c <__udivsi3+0x5c>
  805338:	28001416 	blt	r5,zero,80538c <__udivsi3+0x5c>
  80533c:	00800804 	movi	r2,32
  805340:	00c00044 	movi	r3,1
  805344:	00000206 	br	805350 <__udivsi3+0x20>
  805348:	10000e26 	beq	r2,zero,805384 <__udivsi3+0x54>
  80534c:	28000516 	blt	r5,zero,805364 <__udivsi3+0x34>
  805350:	294b883a 	add	r5,r5,r5
  805354:	10bfffc4 	addi	r2,r2,-1
  805358:	18c7883a 	add	r3,r3,r3
  80535c:	293ffa36 	bltu	r5,r4,805348 <__alt_data_end+0xff805348>
  805360:	18000826 	beq	r3,zero,805384 <__udivsi3+0x54>
  805364:	0005883a 	mov	r2,zero
  805368:	31400236 	bltu	r6,r5,805374 <__udivsi3+0x44>
  80536c:	314dc83a 	sub	r6,r6,r5
  805370:	10c4b03a 	or	r2,r2,r3
  805374:	1806d07a 	srli	r3,r3,1
  805378:	280ad07a 	srli	r5,r5,1
  80537c:	183ffa1e 	bne	r3,zero,805368 <__alt_data_end+0xff805368>
  805380:	f800283a 	ret
  805384:	0005883a 	mov	r2,zero
  805388:	f800283a 	ret
  80538c:	00c00044 	movi	r3,1
  805390:	003ff406 	br	805364 <__alt_data_end+0xff805364>

00805394 <__umodsi3>:
  805394:	2005883a 	mov	r2,r4
  805398:	2900122e 	bgeu	r5,r4,8053e4 <__umodsi3+0x50>
  80539c:	28001116 	blt	r5,zero,8053e4 <__umodsi3+0x50>
  8053a0:	01800804 	movi	r6,32
  8053a4:	00c00044 	movi	r3,1
  8053a8:	00000206 	br	8053b4 <__umodsi3+0x20>
  8053ac:	30000c26 	beq	r6,zero,8053e0 <__umodsi3+0x4c>
  8053b0:	28000516 	blt	r5,zero,8053c8 <__umodsi3+0x34>
  8053b4:	294b883a 	add	r5,r5,r5
  8053b8:	31bfffc4 	addi	r6,r6,-1
  8053bc:	18c7883a 	add	r3,r3,r3
  8053c0:	293ffa36 	bltu	r5,r4,8053ac <__alt_data_end+0xff8053ac>
  8053c4:	18000626 	beq	r3,zero,8053e0 <__umodsi3+0x4c>
  8053c8:	1806d07a 	srli	r3,r3,1
  8053cc:	11400136 	bltu	r2,r5,8053d4 <__umodsi3+0x40>
  8053d0:	1145c83a 	sub	r2,r2,r5
  8053d4:	280ad07a 	srli	r5,r5,1
  8053d8:	183ffb1e 	bne	r3,zero,8053c8 <__alt_data_end+0xff8053c8>
  8053dc:	f800283a 	ret
  8053e0:	f800283a 	ret
  8053e4:	00c00044 	movi	r3,1
  8053e8:	003ff706 	br	8053c8 <__alt_data_end+0xff8053c8>

008053ec <__adddf3>:
  8053ec:	02c00434 	movhi	r11,16
  8053f0:	5affffc4 	addi	r11,r11,-1
  8053f4:	2806d7fa 	srli	r3,r5,31
  8053f8:	2ad4703a 	and	r10,r5,r11
  8053fc:	3ad2703a 	and	r9,r7,r11
  805400:	3804d53a 	srli	r2,r7,20
  805404:	3018d77a 	srli	r12,r6,29
  805408:	280ad53a 	srli	r5,r5,20
  80540c:	501490fa 	slli	r10,r10,3
  805410:	2010d77a 	srli	r8,r4,29
  805414:	481290fa 	slli	r9,r9,3
  805418:	380ed7fa 	srli	r7,r7,31
  80541c:	defffb04 	addi	sp,sp,-20
  805420:	dc800215 	stw	r18,8(sp)
  805424:	dc400115 	stw	r17,4(sp)
  805428:	dc000015 	stw	r16,0(sp)
  80542c:	dfc00415 	stw	ra,16(sp)
  805430:	dcc00315 	stw	r19,12(sp)
  805434:	1c803fcc 	andi	r18,r3,255
  805438:	2c01ffcc 	andi	r16,r5,2047
  80543c:	5210b03a 	or	r8,r10,r8
  805440:	202290fa 	slli	r17,r4,3
  805444:	1081ffcc 	andi	r2,r2,2047
  805448:	4b12b03a 	or	r9,r9,r12
  80544c:	300c90fa 	slli	r6,r6,3
  805450:	91c07526 	beq	r18,r7,805628 <__adddf3+0x23c>
  805454:	8087c83a 	sub	r3,r16,r2
  805458:	00c0ab0e 	bge	zero,r3,805708 <__adddf3+0x31c>
  80545c:	10002a1e 	bne	r2,zero,805508 <__adddf3+0x11c>
  805460:	4984b03a 	or	r2,r9,r6
  805464:	1000961e 	bne	r2,zero,8056c0 <__adddf3+0x2d4>
  805468:	888001cc 	andi	r2,r17,7
  80546c:	10000726 	beq	r2,zero,80548c <__adddf3+0xa0>
  805470:	888003cc 	andi	r2,r17,15
  805474:	00c00104 	movi	r3,4
  805478:	10c00426 	beq	r2,r3,80548c <__adddf3+0xa0>
  80547c:	88c7883a 	add	r3,r17,r3
  805480:	1c63803a 	cmpltu	r17,r3,r17
  805484:	4451883a 	add	r8,r8,r17
  805488:	1823883a 	mov	r17,r3
  80548c:	4080202c 	andhi	r2,r8,128
  805490:	10005926 	beq	r2,zero,8055f8 <__adddf3+0x20c>
  805494:	84000044 	addi	r16,r16,1
  805498:	0081ffc4 	movi	r2,2047
  80549c:	8080ba26 	beq	r16,r2,805788 <__adddf3+0x39c>
  8054a0:	00bfe034 	movhi	r2,65408
  8054a4:	10bfffc4 	addi	r2,r2,-1
  8054a8:	4090703a 	and	r8,r8,r2
  8054ac:	4004977a 	slli	r2,r8,29
  8054b0:	4010927a 	slli	r8,r8,9
  8054b4:	8822d0fa 	srli	r17,r17,3
  8054b8:	8401ffcc 	andi	r16,r16,2047
  8054bc:	4010d33a 	srli	r8,r8,12
  8054c0:	9007883a 	mov	r3,r18
  8054c4:	1444b03a 	or	r2,r2,r17
  8054c8:	8401ffcc 	andi	r16,r16,2047
  8054cc:	8020953a 	slli	r16,r16,20
  8054d0:	18c03fcc 	andi	r3,r3,255
  8054d4:	01000434 	movhi	r4,16
  8054d8:	213fffc4 	addi	r4,r4,-1
  8054dc:	180697fa 	slli	r3,r3,31
  8054e0:	4110703a 	and	r8,r8,r4
  8054e4:	4410b03a 	or	r8,r8,r16
  8054e8:	40c6b03a 	or	r3,r8,r3
  8054ec:	dfc00417 	ldw	ra,16(sp)
  8054f0:	dcc00317 	ldw	r19,12(sp)
  8054f4:	dc800217 	ldw	r18,8(sp)
  8054f8:	dc400117 	ldw	r17,4(sp)
  8054fc:	dc000017 	ldw	r16,0(sp)
  805500:	dec00504 	addi	sp,sp,20
  805504:	f800283a 	ret
  805508:	0081ffc4 	movi	r2,2047
  80550c:	80bfd626 	beq	r16,r2,805468 <__alt_data_end+0xff805468>
  805510:	4a402034 	orhi	r9,r9,128
  805514:	00800e04 	movi	r2,56
  805518:	10c09f16 	blt	r2,r3,805798 <__adddf3+0x3ac>
  80551c:	008007c4 	movi	r2,31
  805520:	10c0c216 	blt	r2,r3,80582c <__adddf3+0x440>
  805524:	00800804 	movi	r2,32
  805528:	10c5c83a 	sub	r2,r2,r3
  80552c:	488a983a 	sll	r5,r9,r2
  805530:	30c8d83a 	srl	r4,r6,r3
  805534:	3084983a 	sll	r2,r6,r2
  805538:	48c6d83a 	srl	r3,r9,r3
  80553c:	290cb03a 	or	r6,r5,r4
  805540:	1004c03a 	cmpne	r2,r2,zero
  805544:	308cb03a 	or	r6,r6,r2
  805548:	898dc83a 	sub	r6,r17,r6
  80554c:	89a3803a 	cmpltu	r17,r17,r6
  805550:	40d1c83a 	sub	r8,r8,r3
  805554:	4451c83a 	sub	r8,r8,r17
  805558:	3023883a 	mov	r17,r6
  80555c:	4080202c 	andhi	r2,r8,128
  805560:	10002326 	beq	r2,zero,8055f0 <__adddf3+0x204>
  805564:	04c02034 	movhi	r19,128
  805568:	9cffffc4 	addi	r19,r19,-1
  80556c:	44e6703a 	and	r19,r8,r19
  805570:	98007626 	beq	r19,zero,80574c <__adddf3+0x360>
  805574:	9809883a 	mov	r4,r19
  805578:	08014b40 	call	8014b4 <__clzsi2>
  80557c:	10fffe04 	addi	r3,r2,-8
  805580:	010007c4 	movi	r4,31
  805584:	20c07716 	blt	r4,r3,805764 <__adddf3+0x378>
  805588:	00800804 	movi	r2,32
  80558c:	10c5c83a 	sub	r2,r2,r3
  805590:	8884d83a 	srl	r2,r17,r2
  805594:	98d0983a 	sll	r8,r19,r3
  805598:	88e2983a 	sll	r17,r17,r3
  80559c:	1204b03a 	or	r2,r2,r8
  8055a0:	1c007416 	blt	r3,r16,805774 <__adddf3+0x388>
  8055a4:	1c21c83a 	sub	r16,r3,r16
  8055a8:	82000044 	addi	r8,r16,1
  8055ac:	00c007c4 	movi	r3,31
  8055b0:	1a009116 	blt	r3,r8,8057f8 <__adddf3+0x40c>
  8055b4:	00c00804 	movi	r3,32
  8055b8:	1a07c83a 	sub	r3,r3,r8
  8055bc:	8a08d83a 	srl	r4,r17,r8
  8055c0:	88e2983a 	sll	r17,r17,r3
  8055c4:	10c6983a 	sll	r3,r2,r3
  8055c8:	1210d83a 	srl	r8,r2,r8
  8055cc:	8804c03a 	cmpne	r2,r17,zero
  8055d0:	1906b03a 	or	r3,r3,r4
  8055d4:	18a2b03a 	or	r17,r3,r2
  8055d8:	0021883a 	mov	r16,zero
  8055dc:	003fa206 	br	805468 <__alt_data_end+0xff805468>
  8055e0:	1890b03a 	or	r8,r3,r2
  8055e4:	40017d26 	beq	r8,zero,805bdc <__adddf3+0x7f0>
  8055e8:	1011883a 	mov	r8,r2
  8055ec:	1823883a 	mov	r17,r3
  8055f0:	888001cc 	andi	r2,r17,7
  8055f4:	103f9e1e 	bne	r2,zero,805470 <__alt_data_end+0xff805470>
  8055f8:	4004977a 	slli	r2,r8,29
  8055fc:	8822d0fa 	srli	r17,r17,3
  805600:	4010d0fa 	srli	r8,r8,3
  805604:	9007883a 	mov	r3,r18
  805608:	1444b03a 	or	r2,r2,r17
  80560c:	0101ffc4 	movi	r4,2047
  805610:	81002426 	beq	r16,r4,8056a4 <__adddf3+0x2b8>
  805614:	8120703a 	and	r16,r16,r4
  805618:	01000434 	movhi	r4,16
  80561c:	213fffc4 	addi	r4,r4,-1
  805620:	4110703a 	and	r8,r8,r4
  805624:	003fa806 	br	8054c8 <__alt_data_end+0xff8054c8>
  805628:	8089c83a 	sub	r4,r16,r2
  80562c:	01005e0e 	bge	zero,r4,8057a8 <__adddf3+0x3bc>
  805630:	10002b26 	beq	r2,zero,8056e0 <__adddf3+0x2f4>
  805634:	0081ffc4 	movi	r2,2047
  805638:	80bf8b26 	beq	r16,r2,805468 <__alt_data_end+0xff805468>
  80563c:	4a402034 	orhi	r9,r9,128
  805640:	00800e04 	movi	r2,56
  805644:	1100a40e 	bge	r2,r4,8058d8 <__adddf3+0x4ec>
  805648:	498cb03a 	or	r6,r9,r6
  80564c:	300ac03a 	cmpne	r5,r6,zero
  805650:	0013883a 	mov	r9,zero
  805654:	2c4b883a 	add	r5,r5,r17
  805658:	2c63803a 	cmpltu	r17,r5,r17
  80565c:	4a11883a 	add	r8,r9,r8
  805660:	8a11883a 	add	r8,r17,r8
  805664:	2823883a 	mov	r17,r5
  805668:	4080202c 	andhi	r2,r8,128
  80566c:	103fe026 	beq	r2,zero,8055f0 <__alt_data_end+0xff8055f0>
  805670:	84000044 	addi	r16,r16,1
  805674:	0081ffc4 	movi	r2,2047
  805678:	8080d226 	beq	r16,r2,8059c4 <__adddf3+0x5d8>
  80567c:	00bfe034 	movhi	r2,65408
  805680:	10bfffc4 	addi	r2,r2,-1
  805684:	4090703a 	and	r8,r8,r2
  805688:	880ad07a 	srli	r5,r17,1
  80568c:	400897fa 	slli	r4,r8,31
  805690:	88c0004c 	andi	r3,r17,1
  805694:	28e2b03a 	or	r17,r5,r3
  805698:	4010d07a 	srli	r8,r8,1
  80569c:	2462b03a 	or	r17,r4,r17
  8056a0:	003f7106 	br	805468 <__alt_data_end+0xff805468>
  8056a4:	4088b03a 	or	r4,r8,r2
  8056a8:	20014526 	beq	r4,zero,805bc0 <__adddf3+0x7d4>
  8056ac:	01000434 	movhi	r4,16
  8056b0:	42000234 	orhi	r8,r8,8
  8056b4:	213fffc4 	addi	r4,r4,-1
  8056b8:	4110703a 	and	r8,r8,r4
  8056bc:	003f8206 	br	8054c8 <__alt_data_end+0xff8054c8>
  8056c0:	18ffffc4 	addi	r3,r3,-1
  8056c4:	1800491e 	bne	r3,zero,8057ec <__adddf3+0x400>
  8056c8:	898bc83a 	sub	r5,r17,r6
  8056cc:	8963803a 	cmpltu	r17,r17,r5
  8056d0:	4251c83a 	sub	r8,r8,r9
  8056d4:	4451c83a 	sub	r8,r8,r17
  8056d8:	2823883a 	mov	r17,r5
  8056dc:	003f9f06 	br	80555c <__alt_data_end+0xff80555c>
  8056e0:	4984b03a 	or	r2,r9,r6
  8056e4:	103f6026 	beq	r2,zero,805468 <__alt_data_end+0xff805468>
  8056e8:	213fffc4 	addi	r4,r4,-1
  8056ec:	2000931e 	bne	r4,zero,80593c <__adddf3+0x550>
  8056f0:	898d883a 	add	r6,r17,r6
  8056f4:	3463803a 	cmpltu	r17,r6,r17
  8056f8:	4251883a 	add	r8,r8,r9
  8056fc:	8a11883a 	add	r8,r17,r8
  805700:	3023883a 	mov	r17,r6
  805704:	003fd806 	br	805668 <__alt_data_end+0xff805668>
  805708:	1800541e 	bne	r3,zero,80585c <__adddf3+0x470>
  80570c:	80800044 	addi	r2,r16,1
  805710:	1081ffcc 	andi	r2,r2,2047
  805714:	00c00044 	movi	r3,1
  805718:	1880a00e 	bge	r3,r2,80599c <__adddf3+0x5b0>
  80571c:	8989c83a 	sub	r4,r17,r6
  805720:	8905803a 	cmpltu	r2,r17,r4
  805724:	4267c83a 	sub	r19,r8,r9
  805728:	98a7c83a 	sub	r19,r19,r2
  80572c:	9880202c 	andhi	r2,r19,128
  805730:	10006326 	beq	r2,zero,8058c0 <__adddf3+0x4d4>
  805734:	3463c83a 	sub	r17,r6,r17
  805738:	4a07c83a 	sub	r3,r9,r8
  80573c:	344d803a 	cmpltu	r6,r6,r17
  805740:	19a7c83a 	sub	r19,r3,r6
  805744:	3825883a 	mov	r18,r7
  805748:	983f8a1e 	bne	r19,zero,805574 <__alt_data_end+0xff805574>
  80574c:	8809883a 	mov	r4,r17
  805750:	08014b40 	call	8014b4 <__clzsi2>
  805754:	10800804 	addi	r2,r2,32
  805758:	10fffe04 	addi	r3,r2,-8
  80575c:	010007c4 	movi	r4,31
  805760:	20ff890e 	bge	r4,r3,805588 <__alt_data_end+0xff805588>
  805764:	10bff604 	addi	r2,r2,-40
  805768:	8884983a 	sll	r2,r17,r2
  80576c:	0023883a 	mov	r17,zero
  805770:	1c3f8c0e 	bge	r3,r16,8055a4 <__alt_data_end+0xff8055a4>
  805774:	023fe034 	movhi	r8,65408
  805778:	423fffc4 	addi	r8,r8,-1
  80577c:	80e1c83a 	sub	r16,r16,r3
  805780:	1210703a 	and	r8,r2,r8
  805784:	003f3806 	br	805468 <__alt_data_end+0xff805468>
  805788:	9007883a 	mov	r3,r18
  80578c:	0011883a 	mov	r8,zero
  805790:	0005883a 	mov	r2,zero
  805794:	003f4c06 	br	8054c8 <__alt_data_end+0xff8054c8>
  805798:	498cb03a 	or	r6,r9,r6
  80579c:	300cc03a 	cmpne	r6,r6,zero
  8057a0:	0007883a 	mov	r3,zero
  8057a4:	003f6806 	br	805548 <__alt_data_end+0xff805548>
  8057a8:	20009c1e 	bne	r4,zero,805a1c <__adddf3+0x630>
  8057ac:	80800044 	addi	r2,r16,1
  8057b0:	1141ffcc 	andi	r5,r2,2047
  8057b4:	01000044 	movi	r4,1
  8057b8:	2140670e 	bge	r4,r5,805958 <__adddf3+0x56c>
  8057bc:	0101ffc4 	movi	r4,2047
  8057c0:	11007f26 	beq	r2,r4,8059c0 <__adddf3+0x5d4>
  8057c4:	898d883a 	add	r6,r17,r6
  8057c8:	4247883a 	add	r3,r8,r9
  8057cc:	3451803a 	cmpltu	r8,r6,r17
  8057d0:	40d1883a 	add	r8,r8,r3
  8057d4:	402297fa 	slli	r17,r8,31
  8057d8:	300cd07a 	srli	r6,r6,1
  8057dc:	4010d07a 	srli	r8,r8,1
  8057e0:	1021883a 	mov	r16,r2
  8057e4:	89a2b03a 	or	r17,r17,r6
  8057e8:	003f1f06 	br	805468 <__alt_data_end+0xff805468>
  8057ec:	0081ffc4 	movi	r2,2047
  8057f0:	80bf481e 	bne	r16,r2,805514 <__alt_data_end+0xff805514>
  8057f4:	003f1c06 	br	805468 <__alt_data_end+0xff805468>
  8057f8:	843ff844 	addi	r16,r16,-31
  8057fc:	01000804 	movi	r4,32
  805800:	1406d83a 	srl	r3,r2,r16
  805804:	41005026 	beq	r8,r4,805948 <__adddf3+0x55c>
  805808:	01001004 	movi	r4,64
  80580c:	2211c83a 	sub	r8,r4,r8
  805810:	1204983a 	sll	r2,r2,r8
  805814:	88a2b03a 	or	r17,r17,r2
  805818:	8822c03a 	cmpne	r17,r17,zero
  80581c:	1c62b03a 	or	r17,r3,r17
  805820:	0011883a 	mov	r8,zero
  805824:	0021883a 	mov	r16,zero
  805828:	003f7106 	br	8055f0 <__alt_data_end+0xff8055f0>
  80582c:	193ff804 	addi	r4,r3,-32
  805830:	00800804 	movi	r2,32
  805834:	4908d83a 	srl	r4,r9,r4
  805838:	18804526 	beq	r3,r2,805950 <__adddf3+0x564>
  80583c:	00801004 	movi	r2,64
  805840:	10c5c83a 	sub	r2,r2,r3
  805844:	4886983a 	sll	r3,r9,r2
  805848:	198cb03a 	or	r6,r3,r6
  80584c:	300cc03a 	cmpne	r6,r6,zero
  805850:	218cb03a 	or	r6,r4,r6
  805854:	0007883a 	mov	r3,zero
  805858:	003f3b06 	br	805548 <__alt_data_end+0xff805548>
  80585c:	80002a26 	beq	r16,zero,805908 <__adddf3+0x51c>
  805860:	0101ffc4 	movi	r4,2047
  805864:	11006826 	beq	r2,r4,805a08 <__adddf3+0x61c>
  805868:	00c7c83a 	sub	r3,zero,r3
  80586c:	42002034 	orhi	r8,r8,128
  805870:	01000e04 	movi	r4,56
  805874:	20c07c16 	blt	r4,r3,805a68 <__adddf3+0x67c>
  805878:	010007c4 	movi	r4,31
  80587c:	20c0da16 	blt	r4,r3,805be8 <__adddf3+0x7fc>
  805880:	01000804 	movi	r4,32
  805884:	20c9c83a 	sub	r4,r4,r3
  805888:	4114983a 	sll	r10,r8,r4
  80588c:	88cad83a 	srl	r5,r17,r3
  805890:	8908983a 	sll	r4,r17,r4
  805894:	40c6d83a 	srl	r3,r8,r3
  805898:	5162b03a 	or	r17,r10,r5
  80589c:	2008c03a 	cmpne	r4,r4,zero
  8058a0:	8922b03a 	or	r17,r17,r4
  8058a4:	3463c83a 	sub	r17,r6,r17
  8058a8:	48c7c83a 	sub	r3,r9,r3
  8058ac:	344d803a 	cmpltu	r6,r6,r17
  8058b0:	1991c83a 	sub	r8,r3,r6
  8058b4:	1021883a 	mov	r16,r2
  8058b8:	3825883a 	mov	r18,r7
  8058bc:	003f2706 	br	80555c <__alt_data_end+0xff80555c>
  8058c0:	24d0b03a 	or	r8,r4,r19
  8058c4:	40001b1e 	bne	r8,zero,805934 <__adddf3+0x548>
  8058c8:	0005883a 	mov	r2,zero
  8058cc:	0007883a 	mov	r3,zero
  8058d0:	0021883a 	mov	r16,zero
  8058d4:	003f4d06 	br	80560c <__alt_data_end+0xff80560c>
  8058d8:	008007c4 	movi	r2,31
  8058dc:	11003c16 	blt	r2,r4,8059d0 <__adddf3+0x5e4>
  8058e0:	00800804 	movi	r2,32
  8058e4:	1105c83a 	sub	r2,r2,r4
  8058e8:	488e983a 	sll	r7,r9,r2
  8058ec:	310ad83a 	srl	r5,r6,r4
  8058f0:	3084983a 	sll	r2,r6,r2
  8058f4:	4912d83a 	srl	r9,r9,r4
  8058f8:	394ab03a 	or	r5,r7,r5
  8058fc:	1004c03a 	cmpne	r2,r2,zero
  805900:	288ab03a 	or	r5,r5,r2
  805904:	003f5306 	br	805654 <__alt_data_end+0xff805654>
  805908:	4448b03a 	or	r4,r8,r17
  80590c:	20003e26 	beq	r4,zero,805a08 <__adddf3+0x61c>
  805910:	00c6303a 	nor	r3,zero,r3
  805914:	18003a1e 	bne	r3,zero,805a00 <__adddf3+0x614>
  805918:	3463c83a 	sub	r17,r6,r17
  80591c:	4a07c83a 	sub	r3,r9,r8
  805920:	344d803a 	cmpltu	r6,r6,r17
  805924:	1991c83a 	sub	r8,r3,r6
  805928:	1021883a 	mov	r16,r2
  80592c:	3825883a 	mov	r18,r7
  805930:	003f0a06 	br	80555c <__alt_data_end+0xff80555c>
  805934:	2023883a 	mov	r17,r4
  805938:	003f0d06 	br	805570 <__alt_data_end+0xff805570>
  80593c:	0081ffc4 	movi	r2,2047
  805940:	80bf3f1e 	bne	r16,r2,805640 <__alt_data_end+0xff805640>
  805944:	003ec806 	br	805468 <__alt_data_end+0xff805468>
  805948:	0005883a 	mov	r2,zero
  80594c:	003fb106 	br	805814 <__alt_data_end+0xff805814>
  805950:	0007883a 	mov	r3,zero
  805954:	003fbc06 	br	805848 <__alt_data_end+0xff805848>
  805958:	4444b03a 	or	r2,r8,r17
  80595c:	8000871e 	bne	r16,zero,805b7c <__adddf3+0x790>
  805960:	1000ba26 	beq	r2,zero,805c4c <__adddf3+0x860>
  805964:	4984b03a 	or	r2,r9,r6
  805968:	103ebf26 	beq	r2,zero,805468 <__alt_data_end+0xff805468>
  80596c:	8985883a 	add	r2,r17,r6
  805970:	4247883a 	add	r3,r8,r9
  805974:	1451803a 	cmpltu	r8,r2,r17
  805978:	40d1883a 	add	r8,r8,r3
  80597c:	40c0202c 	andhi	r3,r8,128
  805980:	1023883a 	mov	r17,r2
  805984:	183f1a26 	beq	r3,zero,8055f0 <__alt_data_end+0xff8055f0>
  805988:	00bfe034 	movhi	r2,65408
  80598c:	10bfffc4 	addi	r2,r2,-1
  805990:	2021883a 	mov	r16,r4
  805994:	4090703a 	and	r8,r8,r2
  805998:	003eb306 	br	805468 <__alt_data_end+0xff805468>
  80599c:	4444b03a 	or	r2,r8,r17
  8059a0:	8000291e 	bne	r16,zero,805a48 <__adddf3+0x65c>
  8059a4:	10004b1e 	bne	r2,zero,805ad4 <__adddf3+0x6e8>
  8059a8:	4990b03a 	or	r8,r9,r6
  8059ac:	40008b26 	beq	r8,zero,805bdc <__adddf3+0x7f0>
  8059b0:	4811883a 	mov	r8,r9
  8059b4:	3023883a 	mov	r17,r6
  8059b8:	3825883a 	mov	r18,r7
  8059bc:	003eaa06 	br	805468 <__alt_data_end+0xff805468>
  8059c0:	1021883a 	mov	r16,r2
  8059c4:	0011883a 	mov	r8,zero
  8059c8:	0005883a 	mov	r2,zero
  8059cc:	003f0f06 	br	80560c <__alt_data_end+0xff80560c>
  8059d0:	217ff804 	addi	r5,r4,-32
  8059d4:	00800804 	movi	r2,32
  8059d8:	494ad83a 	srl	r5,r9,r5
  8059dc:	20807d26 	beq	r4,r2,805bd4 <__adddf3+0x7e8>
  8059e0:	00801004 	movi	r2,64
  8059e4:	1109c83a 	sub	r4,r2,r4
  8059e8:	4912983a 	sll	r9,r9,r4
  8059ec:	498cb03a 	or	r6,r9,r6
  8059f0:	300cc03a 	cmpne	r6,r6,zero
  8059f4:	298ab03a 	or	r5,r5,r6
  8059f8:	0013883a 	mov	r9,zero
  8059fc:	003f1506 	br	805654 <__alt_data_end+0xff805654>
  805a00:	0101ffc4 	movi	r4,2047
  805a04:	113f9a1e 	bne	r2,r4,805870 <__alt_data_end+0xff805870>
  805a08:	4811883a 	mov	r8,r9
  805a0c:	3023883a 	mov	r17,r6
  805a10:	1021883a 	mov	r16,r2
  805a14:	3825883a 	mov	r18,r7
  805a18:	003e9306 	br	805468 <__alt_data_end+0xff805468>
  805a1c:	8000161e 	bne	r16,zero,805a78 <__adddf3+0x68c>
  805a20:	444ab03a 	or	r5,r8,r17
  805a24:	28005126 	beq	r5,zero,805b6c <__adddf3+0x780>
  805a28:	0108303a 	nor	r4,zero,r4
  805a2c:	20004d1e 	bne	r4,zero,805b64 <__adddf3+0x778>
  805a30:	89a3883a 	add	r17,r17,r6
  805a34:	4253883a 	add	r9,r8,r9
  805a38:	898d803a 	cmpltu	r6,r17,r6
  805a3c:	3251883a 	add	r8,r6,r9
  805a40:	1021883a 	mov	r16,r2
  805a44:	003f0806 	br	805668 <__alt_data_end+0xff805668>
  805a48:	1000301e 	bne	r2,zero,805b0c <__adddf3+0x720>
  805a4c:	4984b03a 	or	r2,r9,r6
  805a50:	10007126 	beq	r2,zero,805c18 <__adddf3+0x82c>
  805a54:	4811883a 	mov	r8,r9
  805a58:	3023883a 	mov	r17,r6
  805a5c:	3825883a 	mov	r18,r7
  805a60:	0401ffc4 	movi	r16,2047
  805a64:	003e8006 	br	805468 <__alt_data_end+0xff805468>
  805a68:	4462b03a 	or	r17,r8,r17
  805a6c:	8822c03a 	cmpne	r17,r17,zero
  805a70:	0007883a 	mov	r3,zero
  805a74:	003f8b06 	br	8058a4 <__alt_data_end+0xff8058a4>
  805a78:	0141ffc4 	movi	r5,2047
  805a7c:	11403b26 	beq	r2,r5,805b6c <__adddf3+0x780>
  805a80:	0109c83a 	sub	r4,zero,r4
  805a84:	42002034 	orhi	r8,r8,128
  805a88:	01400e04 	movi	r5,56
  805a8c:	29006716 	blt	r5,r4,805c2c <__adddf3+0x840>
  805a90:	014007c4 	movi	r5,31
  805a94:	29007016 	blt	r5,r4,805c58 <__adddf3+0x86c>
  805a98:	01400804 	movi	r5,32
  805a9c:	290bc83a 	sub	r5,r5,r4
  805aa0:	4154983a 	sll	r10,r8,r5
  805aa4:	890ed83a 	srl	r7,r17,r4
  805aa8:	894a983a 	sll	r5,r17,r5
  805aac:	4108d83a 	srl	r4,r8,r4
  805ab0:	51e2b03a 	or	r17,r10,r7
  805ab4:	280ac03a 	cmpne	r5,r5,zero
  805ab8:	8962b03a 	or	r17,r17,r5
  805abc:	89a3883a 	add	r17,r17,r6
  805ac0:	2253883a 	add	r9,r4,r9
  805ac4:	898d803a 	cmpltu	r6,r17,r6
  805ac8:	3251883a 	add	r8,r6,r9
  805acc:	1021883a 	mov	r16,r2
  805ad0:	003ee506 	br	805668 <__alt_data_end+0xff805668>
  805ad4:	4984b03a 	or	r2,r9,r6
  805ad8:	103e6326 	beq	r2,zero,805468 <__alt_data_end+0xff805468>
  805adc:	8987c83a 	sub	r3,r17,r6
  805ae0:	88c9803a 	cmpltu	r4,r17,r3
  805ae4:	4245c83a 	sub	r2,r8,r9
  805ae8:	1105c83a 	sub	r2,r2,r4
  805aec:	1100202c 	andhi	r4,r2,128
  805af0:	203ebb26 	beq	r4,zero,8055e0 <__alt_data_end+0xff8055e0>
  805af4:	3463c83a 	sub	r17,r6,r17
  805af8:	4a07c83a 	sub	r3,r9,r8
  805afc:	344d803a 	cmpltu	r6,r6,r17
  805b00:	1991c83a 	sub	r8,r3,r6
  805b04:	3825883a 	mov	r18,r7
  805b08:	003e5706 	br	805468 <__alt_data_end+0xff805468>
  805b0c:	4984b03a 	or	r2,r9,r6
  805b10:	10002e26 	beq	r2,zero,805bcc <__adddf3+0x7e0>
  805b14:	4004d0fa 	srli	r2,r8,3
  805b18:	8822d0fa 	srli	r17,r17,3
  805b1c:	4010977a 	slli	r8,r8,29
  805b20:	10c0022c 	andhi	r3,r2,8
  805b24:	4462b03a 	or	r17,r8,r17
  805b28:	18000826 	beq	r3,zero,805b4c <__adddf3+0x760>
  805b2c:	4808d0fa 	srli	r4,r9,3
  805b30:	20c0022c 	andhi	r3,r4,8
  805b34:	1800051e 	bne	r3,zero,805b4c <__adddf3+0x760>
  805b38:	300cd0fa 	srli	r6,r6,3
  805b3c:	4806977a 	slli	r3,r9,29
  805b40:	2005883a 	mov	r2,r4
  805b44:	3825883a 	mov	r18,r7
  805b48:	19a2b03a 	or	r17,r3,r6
  805b4c:	8810d77a 	srli	r8,r17,29
  805b50:	100490fa 	slli	r2,r2,3
  805b54:	882290fa 	slli	r17,r17,3
  805b58:	0401ffc4 	movi	r16,2047
  805b5c:	4090b03a 	or	r8,r8,r2
  805b60:	003e4106 	br	805468 <__alt_data_end+0xff805468>
  805b64:	0141ffc4 	movi	r5,2047
  805b68:	117fc71e 	bne	r2,r5,805a88 <__alt_data_end+0xff805a88>
  805b6c:	4811883a 	mov	r8,r9
  805b70:	3023883a 	mov	r17,r6
  805b74:	1021883a 	mov	r16,r2
  805b78:	003e3b06 	br	805468 <__alt_data_end+0xff805468>
  805b7c:	10002f26 	beq	r2,zero,805c3c <__adddf3+0x850>
  805b80:	4984b03a 	or	r2,r9,r6
  805b84:	10001126 	beq	r2,zero,805bcc <__adddf3+0x7e0>
  805b88:	4004d0fa 	srli	r2,r8,3
  805b8c:	8822d0fa 	srli	r17,r17,3
  805b90:	4010977a 	slli	r8,r8,29
  805b94:	10c0022c 	andhi	r3,r2,8
  805b98:	4462b03a 	or	r17,r8,r17
  805b9c:	183feb26 	beq	r3,zero,805b4c <__alt_data_end+0xff805b4c>
  805ba0:	4808d0fa 	srli	r4,r9,3
  805ba4:	20c0022c 	andhi	r3,r4,8
  805ba8:	183fe81e 	bne	r3,zero,805b4c <__alt_data_end+0xff805b4c>
  805bac:	300cd0fa 	srli	r6,r6,3
  805bb0:	4806977a 	slli	r3,r9,29
  805bb4:	2005883a 	mov	r2,r4
  805bb8:	19a2b03a 	or	r17,r3,r6
  805bbc:	003fe306 	br	805b4c <__alt_data_end+0xff805b4c>
  805bc0:	0011883a 	mov	r8,zero
  805bc4:	0005883a 	mov	r2,zero
  805bc8:	003e3f06 	br	8054c8 <__alt_data_end+0xff8054c8>
  805bcc:	0401ffc4 	movi	r16,2047
  805bd0:	003e2506 	br	805468 <__alt_data_end+0xff805468>
  805bd4:	0013883a 	mov	r9,zero
  805bd8:	003f8406 	br	8059ec <__alt_data_end+0xff8059ec>
  805bdc:	0005883a 	mov	r2,zero
  805be0:	0007883a 	mov	r3,zero
  805be4:	003e8906 	br	80560c <__alt_data_end+0xff80560c>
  805be8:	197ff804 	addi	r5,r3,-32
  805bec:	01000804 	movi	r4,32
  805bf0:	414ad83a 	srl	r5,r8,r5
  805bf4:	19002426 	beq	r3,r4,805c88 <__adddf3+0x89c>
  805bf8:	01001004 	movi	r4,64
  805bfc:	20c7c83a 	sub	r3,r4,r3
  805c00:	40c6983a 	sll	r3,r8,r3
  805c04:	1c46b03a 	or	r3,r3,r17
  805c08:	1806c03a 	cmpne	r3,r3,zero
  805c0c:	28e2b03a 	or	r17,r5,r3
  805c10:	0007883a 	mov	r3,zero
  805c14:	003f2306 	br	8058a4 <__alt_data_end+0xff8058a4>
  805c18:	0007883a 	mov	r3,zero
  805c1c:	5811883a 	mov	r8,r11
  805c20:	00bfffc4 	movi	r2,-1
  805c24:	0401ffc4 	movi	r16,2047
  805c28:	003e7806 	br	80560c <__alt_data_end+0xff80560c>
  805c2c:	4462b03a 	or	r17,r8,r17
  805c30:	8822c03a 	cmpne	r17,r17,zero
  805c34:	0009883a 	mov	r4,zero
  805c38:	003fa006 	br	805abc <__alt_data_end+0xff805abc>
  805c3c:	4811883a 	mov	r8,r9
  805c40:	3023883a 	mov	r17,r6
  805c44:	0401ffc4 	movi	r16,2047
  805c48:	003e0706 	br	805468 <__alt_data_end+0xff805468>
  805c4c:	4811883a 	mov	r8,r9
  805c50:	3023883a 	mov	r17,r6
  805c54:	003e0406 	br	805468 <__alt_data_end+0xff805468>
  805c58:	21fff804 	addi	r7,r4,-32
  805c5c:	01400804 	movi	r5,32
  805c60:	41ced83a 	srl	r7,r8,r7
  805c64:	21400a26 	beq	r4,r5,805c90 <__adddf3+0x8a4>
  805c68:	01401004 	movi	r5,64
  805c6c:	2909c83a 	sub	r4,r5,r4
  805c70:	4108983a 	sll	r4,r8,r4
  805c74:	2448b03a 	or	r4,r4,r17
  805c78:	2008c03a 	cmpne	r4,r4,zero
  805c7c:	3922b03a 	or	r17,r7,r4
  805c80:	0009883a 	mov	r4,zero
  805c84:	003f8d06 	br	805abc <__alt_data_end+0xff805abc>
  805c88:	0007883a 	mov	r3,zero
  805c8c:	003fdd06 	br	805c04 <__alt_data_end+0xff805c04>
  805c90:	0009883a 	mov	r4,zero
  805c94:	003ff706 	br	805c74 <__alt_data_end+0xff805c74>

00805c98 <__divdf3>:
  805c98:	defff004 	addi	sp,sp,-64
  805c9c:	dc800815 	stw	r18,32(sp)
  805ca0:	2824d53a 	srli	r18,r5,20
  805ca4:	dd800c15 	stw	r22,48(sp)
  805ca8:	282cd7fa 	srli	r22,r5,31
  805cac:	dc000615 	stw	r16,24(sp)
  805cb0:	04000434 	movhi	r16,16
  805cb4:	843fffc4 	addi	r16,r16,-1
  805cb8:	dfc00f15 	stw	ra,60(sp)
  805cbc:	df000e15 	stw	fp,56(sp)
  805cc0:	ddc00d15 	stw	r23,52(sp)
  805cc4:	dd400b15 	stw	r21,44(sp)
  805cc8:	dd000a15 	stw	r20,40(sp)
  805ccc:	dcc00915 	stw	r19,36(sp)
  805cd0:	dc400715 	stw	r17,28(sp)
  805cd4:	9481ffcc 	andi	r18,r18,2047
  805cd8:	2c20703a 	and	r16,r5,r16
  805cdc:	b2003fcc 	andi	r8,r22,255
  805ce0:	90006126 	beq	r18,zero,805e68 <__divdf3+0x1d0>
  805ce4:	0081ffc4 	movi	r2,2047
  805ce8:	202b883a 	mov	r21,r4
  805cec:	90803726 	beq	r18,r2,805dcc <__divdf3+0x134>
  805cf0:	80c00434 	orhi	r3,r16,16
  805cf4:	180690fa 	slli	r3,r3,3
  805cf8:	2020d77a 	srli	r16,r4,29
  805cfc:	202a90fa 	slli	r21,r4,3
  805d00:	94bf0044 	addi	r18,r18,-1023
  805d04:	80e0b03a 	or	r16,r16,r3
  805d08:	0013883a 	mov	r9,zero
  805d0c:	000b883a 	mov	r5,zero
  805d10:	3806d53a 	srli	r3,r7,20
  805d14:	382ed7fa 	srli	r23,r7,31
  805d18:	04400434 	movhi	r17,16
  805d1c:	8c7fffc4 	addi	r17,r17,-1
  805d20:	18c1ffcc 	andi	r3,r3,2047
  805d24:	3029883a 	mov	r20,r6
  805d28:	3c62703a 	and	r17,r7,r17
  805d2c:	bf003fcc 	andi	fp,r23,255
  805d30:	18006e26 	beq	r3,zero,805eec <__divdf3+0x254>
  805d34:	0081ffc4 	movi	r2,2047
  805d38:	18806626 	beq	r3,r2,805ed4 <__divdf3+0x23c>
  805d3c:	89000434 	orhi	r4,r17,16
  805d40:	200890fa 	slli	r4,r4,3
  805d44:	3022d77a 	srli	r17,r6,29
  805d48:	302890fa 	slli	r20,r6,3
  805d4c:	18ff0044 	addi	r3,r3,-1023
  805d50:	8922b03a 	or	r17,r17,r4
  805d54:	000f883a 	mov	r7,zero
  805d58:	b5e6f03a 	xor	r19,r22,r23
  805d5c:	3a4cb03a 	or	r6,r7,r9
  805d60:	008003c4 	movi	r2,15
  805d64:	9809883a 	mov	r4,r19
  805d68:	90c7c83a 	sub	r3,r18,r3
  805d6c:	9cc03fcc 	andi	r19,r19,255
  805d70:	11809636 	bltu	r2,r6,805fcc <__divdf3+0x334>
  805d74:	300c90ba 	slli	r6,r6,2
  805d78:	00802034 	movhi	r2,128
  805d7c:	10976304 	addi	r2,r2,23948
  805d80:	308d883a 	add	r6,r6,r2
  805d84:	30800017 	ldw	r2,0(r6)
  805d88:	1000683a 	jmp	r2
  805d8c:	00805fcc 	andi	r2,zero,383
  805d90:	00805e04 	movi	r2,376
  805d94:	00805fbc 	xorhi	r2,zero,382
  805d98:	00805df8 	rdprs	r2,zero,375
  805d9c:	00805fbc 	xorhi	r2,zero,382
  805da0:	00805f90 	cmplti	r2,zero,382
  805da4:	00805fbc 	xorhi	r2,zero,382
  805da8:	00805df8 	rdprs	r2,zero,375
  805dac:	00805e04 	movi	r2,376
  805db0:	00805e04 	movi	r2,376
  805db4:	00805f90 	cmplti	r2,zero,382
  805db8:	00805df8 	rdprs	r2,zero,375
  805dbc:	00805de8 	cmpgeui	r2,zero,375
  805dc0:	00805de8 	cmpgeui	r2,zero,375
  805dc4:	00805de8 	cmpgeui	r2,zero,375
  805dc8:	00806354 	movui	r2,397
  805dcc:	2404b03a 	or	r2,r4,r16
  805dd0:	10006c1e 	bne	r2,zero,805f84 <__divdf3+0x2ec>
  805dd4:	02400204 	movi	r9,8
  805dd8:	0021883a 	mov	r16,zero
  805ddc:	002b883a 	mov	r21,zero
  805de0:	01400084 	movi	r5,2
  805de4:	003fca06 	br	805d10 <__alt_data_end+0xff805d10>
  805de8:	8023883a 	mov	r17,r16
  805dec:	a829883a 	mov	r20,r21
  805df0:	4039883a 	mov	fp,r8
  805df4:	280f883a 	mov	r7,r5
  805df8:	00800084 	movi	r2,2
  805dfc:	3881601e 	bne	r7,r2,806380 <__divdf3+0x6e8>
  805e00:	e027883a 	mov	r19,fp
  805e04:	9900004c 	andi	r4,r19,1
  805e08:	0081ffc4 	movi	r2,2047
  805e0c:	0021883a 	mov	r16,zero
  805e10:	002b883a 	mov	r21,zero
  805e14:	1004953a 	slli	r2,r2,20
  805e18:	20c03fcc 	andi	r3,r4,255
  805e1c:	01400434 	movhi	r5,16
  805e20:	297fffc4 	addi	r5,r5,-1
  805e24:	180697fa 	slli	r3,r3,31
  805e28:	8160703a 	and	r16,r16,r5
  805e2c:	80a0b03a 	or	r16,r16,r2
  805e30:	80c6b03a 	or	r3,r16,r3
  805e34:	a805883a 	mov	r2,r21
  805e38:	dfc00f17 	ldw	ra,60(sp)
  805e3c:	df000e17 	ldw	fp,56(sp)
  805e40:	ddc00d17 	ldw	r23,52(sp)
  805e44:	dd800c17 	ldw	r22,48(sp)
  805e48:	dd400b17 	ldw	r21,44(sp)
  805e4c:	dd000a17 	ldw	r20,40(sp)
  805e50:	dcc00917 	ldw	r19,36(sp)
  805e54:	dc800817 	ldw	r18,32(sp)
  805e58:	dc400717 	ldw	r17,28(sp)
  805e5c:	dc000617 	ldw	r16,24(sp)
  805e60:	dec01004 	addi	sp,sp,64
  805e64:	f800283a 	ret
  805e68:	2404b03a 	or	r2,r4,r16
  805e6c:	2023883a 	mov	r17,r4
  805e70:	10003f26 	beq	r2,zero,805f70 <__divdf3+0x2d8>
  805e74:	80015e26 	beq	r16,zero,8063f0 <__divdf3+0x758>
  805e78:	8009883a 	mov	r4,r16
  805e7c:	d9800215 	stw	r6,8(sp)
  805e80:	d9c00515 	stw	r7,20(sp)
  805e84:	da000415 	stw	r8,16(sp)
  805e88:	08014b40 	call	8014b4 <__clzsi2>
  805e8c:	d9800217 	ldw	r6,8(sp)
  805e90:	d9c00517 	ldw	r7,20(sp)
  805e94:	da000417 	ldw	r8,16(sp)
  805e98:	10fffd44 	addi	r3,r2,-11
  805e9c:	01000704 	movi	r4,28
  805ea0:	20c14f16 	blt	r4,r3,8063e0 <__divdf3+0x748>
  805ea4:	01000744 	movi	r4,29
  805ea8:	157ffe04 	addi	r21,r2,-8
  805eac:	20c9c83a 	sub	r4,r4,r3
  805eb0:	8560983a 	sll	r16,r16,r21
  805eb4:	8908d83a 	srl	r4,r17,r4
  805eb8:	8d6a983a 	sll	r21,r17,r21
  805ebc:	2420b03a 	or	r16,r4,r16
  805ec0:	04bf0084 	movi	r18,-1022
  805ec4:	90e5c83a 	sub	r18,r18,r3
  805ec8:	0013883a 	mov	r9,zero
  805ecc:	000b883a 	mov	r5,zero
  805ed0:	003f8f06 	br	805d10 <__alt_data_end+0xff805d10>
  805ed4:	3444b03a 	or	r2,r6,r17
  805ed8:	1000231e 	bne	r2,zero,805f68 <__divdf3+0x2d0>
  805edc:	0023883a 	mov	r17,zero
  805ee0:	0029883a 	mov	r20,zero
  805ee4:	01c00084 	movi	r7,2
  805ee8:	003f9b06 	br	805d58 <__alt_data_end+0xff805d58>
  805eec:	3444b03a 	or	r2,r6,r17
  805ef0:	10001926 	beq	r2,zero,805f58 <__divdf3+0x2c0>
  805ef4:	88014b26 	beq	r17,zero,806424 <__divdf3+0x78c>
  805ef8:	8809883a 	mov	r4,r17
  805efc:	d9400115 	stw	r5,4(sp)
  805f00:	d9800215 	stw	r6,8(sp)
  805f04:	da000415 	stw	r8,16(sp)
  805f08:	da400315 	stw	r9,12(sp)
  805f0c:	08014b40 	call	8014b4 <__clzsi2>
  805f10:	d9400117 	ldw	r5,4(sp)
  805f14:	d9800217 	ldw	r6,8(sp)
  805f18:	da000417 	ldw	r8,16(sp)
  805f1c:	da400317 	ldw	r9,12(sp)
  805f20:	10fffd44 	addi	r3,r2,-11
  805f24:	01000704 	movi	r4,28
  805f28:	20c13a16 	blt	r4,r3,806414 <__divdf3+0x77c>
  805f2c:	01000744 	movi	r4,29
  805f30:	153ffe04 	addi	r20,r2,-8
  805f34:	20c9c83a 	sub	r4,r4,r3
  805f38:	8d22983a 	sll	r17,r17,r20
  805f3c:	3108d83a 	srl	r4,r6,r4
  805f40:	3528983a 	sll	r20,r6,r20
  805f44:	2462b03a 	or	r17,r4,r17
  805f48:	00bf0084 	movi	r2,-1022
  805f4c:	10c7c83a 	sub	r3,r2,r3
  805f50:	000f883a 	mov	r7,zero
  805f54:	003f8006 	br	805d58 <__alt_data_end+0xff805d58>
  805f58:	0023883a 	mov	r17,zero
  805f5c:	0029883a 	mov	r20,zero
  805f60:	01c00044 	movi	r7,1
  805f64:	003f7c06 	br	805d58 <__alt_data_end+0xff805d58>
  805f68:	01c000c4 	movi	r7,3
  805f6c:	003f7a06 	br	805d58 <__alt_data_end+0xff805d58>
  805f70:	02400104 	movi	r9,4
  805f74:	0021883a 	mov	r16,zero
  805f78:	002b883a 	mov	r21,zero
  805f7c:	01400044 	movi	r5,1
  805f80:	003f6306 	br	805d10 <__alt_data_end+0xff805d10>
  805f84:	02400304 	movi	r9,12
  805f88:	014000c4 	movi	r5,3
  805f8c:	003f6006 	br	805d10 <__alt_data_end+0xff805d10>
  805f90:	04000434 	movhi	r16,16
  805f94:	0009883a 	mov	r4,zero
  805f98:	843fffc4 	addi	r16,r16,-1
  805f9c:	057fffc4 	movi	r21,-1
  805fa0:	0081ffc4 	movi	r2,2047
  805fa4:	003f9b06 	br	805e14 <__alt_data_end+0xff805e14>
  805fa8:	00c00044 	movi	r3,1
  805fac:	1887c83a 	sub	r3,r3,r2
  805fb0:	01000e04 	movi	r4,56
  805fb4:	20c1530e 	bge	r4,r3,806504 <__divdf3+0x86c>
  805fb8:	9900004c 	andi	r4,r19,1
  805fbc:	0005883a 	mov	r2,zero
  805fc0:	0021883a 	mov	r16,zero
  805fc4:	002b883a 	mov	r21,zero
  805fc8:	003f9206 	br	805e14 <__alt_data_end+0xff805e14>
  805fcc:	8c012e36 	bltu	r17,r16,806488 <__divdf3+0x7f0>
  805fd0:	84412c26 	beq	r16,r17,806484 <__divdf3+0x7ec>
  805fd4:	a82f883a 	mov	r23,r21
  805fd8:	18ffffc4 	addi	r3,r3,-1
  805fdc:	002b883a 	mov	r21,zero
  805fe0:	a00ad63a 	srli	r5,r20,24
  805fe4:	8822923a 	slli	r17,r17,8
  805fe8:	a028923a 	slli	r20,r20,8
  805fec:	8009883a 	mov	r4,r16
  805ff0:	896cb03a 	or	r22,r17,r5
  805ff4:	dd000015 	stw	r20,0(sp)
  805ff8:	b028d43a 	srli	r20,r22,16
  805ffc:	d8c00215 	stw	r3,8(sp)
  806000:	b4bfffcc 	andi	r18,r22,65535
  806004:	a00b883a 	mov	r5,r20
  806008:	08053300 	call	805330 <__udivsi3>
  80600c:	100b883a 	mov	r5,r2
  806010:	9009883a 	mov	r4,r18
  806014:	1023883a 	mov	r17,r2
  806018:	08015180 	call	801518 <__mulsi3>
  80601c:	8009883a 	mov	r4,r16
  806020:	a00b883a 	mov	r5,r20
  806024:	1039883a 	mov	fp,r2
  806028:	08053940 	call	805394 <__umodsi3>
  80602c:	1004943a 	slli	r2,r2,16
  806030:	b808d43a 	srli	r4,r23,16
  806034:	d8c00217 	ldw	r3,8(sp)
  806038:	2084b03a 	or	r2,r4,r2
  80603c:	1700062e 	bgeu	r2,fp,806058 <__divdf3+0x3c0>
  806040:	1585883a 	add	r2,r2,r22
  806044:	893fffc4 	addi	r4,r17,-1
  806048:	15811d36 	bltu	r2,r22,8064c0 <__divdf3+0x828>
  80604c:	17011c2e 	bgeu	r2,fp,8064c0 <__divdf3+0x828>
  806050:	8c7fff84 	addi	r17,r17,-2
  806054:	1585883a 	add	r2,r2,r22
  806058:	1739c83a 	sub	fp,r2,fp
  80605c:	a00b883a 	mov	r5,r20
  806060:	e009883a 	mov	r4,fp
  806064:	d8c00215 	stw	r3,8(sp)
  806068:	08053300 	call	805330 <__udivsi3>
  80606c:	100b883a 	mov	r5,r2
  806070:	9009883a 	mov	r4,r18
  806074:	1021883a 	mov	r16,r2
  806078:	08015180 	call	801518 <__mulsi3>
  80607c:	a00b883a 	mov	r5,r20
  806080:	e009883a 	mov	r4,fp
  806084:	d8800415 	stw	r2,16(sp)
  806088:	08053940 	call	805394 <__umodsi3>
  80608c:	1004943a 	slli	r2,r2,16
  806090:	da000417 	ldw	r8,16(sp)
  806094:	bdffffcc 	andi	r23,r23,65535
  806098:	b884b03a 	or	r2,r23,r2
  80609c:	d8c00217 	ldw	r3,8(sp)
  8060a0:	1200062e 	bgeu	r2,r8,8060bc <__divdf3+0x424>
  8060a4:	1585883a 	add	r2,r2,r22
  8060a8:	813fffc4 	addi	r4,r16,-1
  8060ac:	15810236 	bltu	r2,r22,8064b8 <__divdf3+0x820>
  8060b0:	1201012e 	bgeu	r2,r8,8064b8 <__divdf3+0x820>
  8060b4:	843fff84 	addi	r16,r16,-2
  8060b8:	1585883a 	add	r2,r2,r22
  8060bc:	8822943a 	slli	r17,r17,16
  8060c0:	d9800017 	ldw	r6,0(sp)
  8060c4:	1211c83a 	sub	r8,r2,r8
  8060c8:	8c22b03a 	or	r17,r17,r16
  8060cc:	373fffcc 	andi	fp,r6,65535
  8060d0:	8abfffcc 	andi	r10,r17,65535
  8060d4:	8820d43a 	srli	r16,r17,16
  8060d8:	5009883a 	mov	r4,r10
  8060dc:	e00b883a 	mov	r5,fp
  8060e0:	302ed43a 	srli	r23,r6,16
  8060e4:	d8c00215 	stw	r3,8(sp)
  8060e8:	da000415 	stw	r8,16(sp)
  8060ec:	da800115 	stw	r10,4(sp)
  8060f0:	08015180 	call	801518 <__mulsi3>
  8060f4:	800b883a 	mov	r5,r16
  8060f8:	e009883a 	mov	r4,fp
  8060fc:	d8800515 	stw	r2,20(sp)
  806100:	08015180 	call	801518 <__mulsi3>
  806104:	8009883a 	mov	r4,r16
  806108:	b80b883a 	mov	r5,r23
  80610c:	d8800315 	stw	r2,12(sp)
  806110:	08015180 	call	801518 <__mulsi3>
  806114:	da800117 	ldw	r10,4(sp)
  806118:	b80b883a 	mov	r5,r23
  80611c:	1021883a 	mov	r16,r2
  806120:	5009883a 	mov	r4,r10
  806124:	08015180 	call	801518 <__mulsi3>
  806128:	d9c00517 	ldw	r7,20(sp)
  80612c:	da400317 	ldw	r9,12(sp)
  806130:	d8c00217 	ldw	r3,8(sp)
  806134:	3808d43a 	srli	r4,r7,16
  806138:	1245883a 	add	r2,r2,r9
  80613c:	da000417 	ldw	r8,16(sp)
  806140:	2085883a 	add	r2,r4,r2
  806144:	1240022e 	bgeu	r2,r9,806150 <__divdf3+0x4b8>
  806148:	01000074 	movhi	r4,1
  80614c:	8121883a 	add	r16,r16,r4
  806150:	1008d43a 	srli	r4,r2,16
  806154:	1004943a 	slli	r2,r2,16
  806158:	39ffffcc 	andi	r7,r7,65535
  80615c:	2409883a 	add	r4,r4,r16
  806160:	11c5883a 	add	r2,r2,r7
  806164:	4100bb36 	bltu	r8,r4,806454 <__divdf3+0x7bc>
  806168:	4100d726 	beq	r8,r4,8064c8 <__divdf3+0x830>
  80616c:	4109c83a 	sub	r4,r8,r4
  806170:	a8a1c83a 	sub	r16,r21,r2
  806174:	ac2b803a 	cmpltu	r21,r21,r16
  806178:	256bc83a 	sub	r21,r4,r21
  80617c:	b540d926 	beq	r22,r21,8064e4 <__divdf3+0x84c>
  806180:	a00b883a 	mov	r5,r20
  806184:	a809883a 	mov	r4,r21
  806188:	d8c00215 	stw	r3,8(sp)
  80618c:	08053300 	call	805330 <__udivsi3>
  806190:	100b883a 	mov	r5,r2
  806194:	9009883a 	mov	r4,r18
  806198:	d8800515 	stw	r2,20(sp)
  80619c:	08015180 	call	801518 <__mulsi3>
  8061a0:	a809883a 	mov	r4,r21
  8061a4:	a00b883a 	mov	r5,r20
  8061a8:	d8800415 	stw	r2,16(sp)
  8061ac:	08053940 	call	805394 <__umodsi3>
  8061b0:	1004943a 	slli	r2,r2,16
  8061b4:	8008d43a 	srli	r4,r16,16
  8061b8:	da000417 	ldw	r8,16(sp)
  8061bc:	d8c00217 	ldw	r3,8(sp)
  8061c0:	2084b03a 	or	r2,r4,r2
  8061c4:	d9c00517 	ldw	r7,20(sp)
  8061c8:	1200062e 	bgeu	r2,r8,8061e4 <__divdf3+0x54c>
  8061cc:	1585883a 	add	r2,r2,r22
  8061d0:	393fffc4 	addi	r4,r7,-1
  8061d4:	1580c536 	bltu	r2,r22,8064ec <__divdf3+0x854>
  8061d8:	1200c42e 	bgeu	r2,r8,8064ec <__divdf3+0x854>
  8061dc:	39ffff84 	addi	r7,r7,-2
  8061e0:	1585883a 	add	r2,r2,r22
  8061e4:	122bc83a 	sub	r21,r2,r8
  8061e8:	a00b883a 	mov	r5,r20
  8061ec:	a809883a 	mov	r4,r21
  8061f0:	d8c00215 	stw	r3,8(sp)
  8061f4:	d9c00515 	stw	r7,20(sp)
  8061f8:	08053300 	call	805330 <__udivsi3>
  8061fc:	9009883a 	mov	r4,r18
  806200:	100b883a 	mov	r5,r2
  806204:	d8800415 	stw	r2,16(sp)
  806208:	08015180 	call	801518 <__mulsi3>
  80620c:	a809883a 	mov	r4,r21
  806210:	a00b883a 	mov	r5,r20
  806214:	1025883a 	mov	r18,r2
  806218:	08053940 	call	805394 <__umodsi3>
  80621c:	1004943a 	slli	r2,r2,16
  806220:	813fffcc 	andi	r4,r16,65535
  806224:	d8c00217 	ldw	r3,8(sp)
  806228:	20a0b03a 	or	r16,r4,r2
  80622c:	d9c00517 	ldw	r7,20(sp)
  806230:	da000417 	ldw	r8,16(sp)
  806234:	8480062e 	bgeu	r16,r18,806250 <__divdf3+0x5b8>
  806238:	85a1883a 	add	r16,r16,r22
  80623c:	40bfffc4 	addi	r2,r8,-1
  806240:	8580ac36 	bltu	r16,r22,8064f4 <__divdf3+0x85c>
  806244:	8480ab2e 	bgeu	r16,r18,8064f4 <__divdf3+0x85c>
  806248:	423fff84 	addi	r8,r8,-2
  80624c:	85a1883a 	add	r16,r16,r22
  806250:	3804943a 	slli	r2,r7,16
  806254:	84a1c83a 	sub	r16,r16,r18
  806258:	e009883a 	mov	r4,fp
  80625c:	1228b03a 	or	r20,r2,r8
  806260:	a1ffffcc 	andi	r7,r20,65535
  806264:	a024d43a 	srli	r18,r20,16
  806268:	380b883a 	mov	r5,r7
  80626c:	d8c00215 	stw	r3,8(sp)
  806270:	d9c00515 	stw	r7,20(sp)
  806274:	08015180 	call	801518 <__mulsi3>
  806278:	900b883a 	mov	r5,r18
  80627c:	e009883a 	mov	r4,fp
  806280:	102b883a 	mov	r21,r2
  806284:	08015180 	call	801518 <__mulsi3>
  806288:	900b883a 	mov	r5,r18
  80628c:	b809883a 	mov	r4,r23
  806290:	1039883a 	mov	fp,r2
  806294:	08015180 	call	801518 <__mulsi3>
  806298:	d9c00517 	ldw	r7,20(sp)
  80629c:	b80b883a 	mov	r5,r23
  8062a0:	1025883a 	mov	r18,r2
  8062a4:	3809883a 	mov	r4,r7
  8062a8:	08015180 	call	801518 <__mulsi3>
  8062ac:	a808d43a 	srli	r4,r21,16
  8062b0:	1705883a 	add	r2,r2,fp
  8062b4:	d8c00217 	ldw	r3,8(sp)
  8062b8:	2085883a 	add	r2,r4,r2
  8062bc:	1700022e 	bgeu	r2,fp,8062c8 <__divdf3+0x630>
  8062c0:	01000074 	movhi	r4,1
  8062c4:	9125883a 	add	r18,r18,r4
  8062c8:	1008d43a 	srli	r4,r2,16
  8062cc:	1004943a 	slli	r2,r2,16
  8062d0:	ad7fffcc 	andi	r21,r21,65535
  8062d4:	2489883a 	add	r4,r4,r18
  8062d8:	1545883a 	add	r2,r2,r21
  8062dc:	81003836 	bltu	r16,r4,8063c0 <__divdf3+0x728>
  8062e0:	81003626 	beq	r16,r4,8063bc <__divdf3+0x724>
  8062e4:	a5000054 	ori	r20,r20,1
  8062e8:	1880ffc4 	addi	r2,r3,1023
  8062ec:	00bf2e0e 	bge	zero,r2,805fa8 <__alt_data_end+0xff805fa8>
  8062f0:	a10001cc 	andi	r4,r20,7
  8062f4:	20000726 	beq	r4,zero,806314 <__divdf3+0x67c>
  8062f8:	a10003cc 	andi	r4,r20,15
  8062fc:	01400104 	movi	r5,4
  806300:	21400426 	beq	r4,r5,806314 <__divdf3+0x67c>
  806304:	a149883a 	add	r4,r20,r5
  806308:	2529803a 	cmpltu	r20,r4,r20
  80630c:	8d23883a 	add	r17,r17,r20
  806310:	2029883a 	mov	r20,r4
  806314:	8900402c 	andhi	r4,r17,256
  806318:	20000426 	beq	r4,zero,80632c <__divdf3+0x694>
  80631c:	18810004 	addi	r2,r3,1024
  806320:	00ffc034 	movhi	r3,65280
  806324:	18ffffc4 	addi	r3,r3,-1
  806328:	88e2703a 	and	r17,r17,r3
  80632c:	00c1ff84 	movi	r3,2046
  806330:	18beb416 	blt	r3,r2,805e04 <__alt_data_end+0xff805e04>
  806334:	a028d0fa 	srli	r20,r20,3
  806338:	882a977a 	slli	r21,r17,29
  80633c:	8820927a 	slli	r16,r17,9
  806340:	1081ffcc 	andi	r2,r2,2047
  806344:	ad2ab03a 	or	r21,r21,r20
  806348:	8020d33a 	srli	r16,r16,12
  80634c:	9900004c 	andi	r4,r19,1
  806350:	003eb006 	br	805e14 <__alt_data_end+0xff805e14>
  806354:	8080022c 	andhi	r2,r16,8
  806358:	10001226 	beq	r2,zero,8063a4 <__divdf3+0x70c>
  80635c:	8880022c 	andhi	r2,r17,8
  806360:	1000101e 	bne	r2,zero,8063a4 <__divdf3+0x70c>
  806364:	00800434 	movhi	r2,16
  806368:	8c000234 	orhi	r16,r17,8
  80636c:	10bfffc4 	addi	r2,r2,-1
  806370:	b809883a 	mov	r4,r23
  806374:	80a0703a 	and	r16,r16,r2
  806378:	a02b883a 	mov	r21,r20
  80637c:	003f0806 	br	805fa0 <__alt_data_end+0xff805fa0>
  806380:	008000c4 	movi	r2,3
  806384:	3880b126 	beq	r7,r2,80664c <__divdf3+0x9b4>
  806388:	00800044 	movi	r2,1
  80638c:	38805b1e 	bne	r7,r2,8064fc <__divdf3+0x864>
  806390:	e009883a 	mov	r4,fp
  806394:	0005883a 	mov	r2,zero
  806398:	0021883a 	mov	r16,zero
  80639c:	002b883a 	mov	r21,zero
  8063a0:	003e9c06 	br	805e14 <__alt_data_end+0xff805e14>
  8063a4:	00800434 	movhi	r2,16
  8063a8:	84000234 	orhi	r16,r16,8
  8063ac:	10bfffc4 	addi	r2,r2,-1
  8063b0:	b009883a 	mov	r4,r22
  8063b4:	80a0703a 	and	r16,r16,r2
  8063b8:	003ef906 	br	805fa0 <__alt_data_end+0xff805fa0>
  8063bc:	103fca26 	beq	r2,zero,8062e8 <__alt_data_end+0xff8062e8>
  8063c0:	b421883a 	add	r16,r22,r16
  8063c4:	a17fffc4 	addi	r5,r20,-1
  8063c8:	8580422e 	bgeu	r16,r22,8064d4 <__divdf3+0x83c>
  8063cc:	2829883a 	mov	r20,r5
  8063d0:	813fc41e 	bne	r16,r4,8062e4 <__alt_data_end+0xff8062e4>
  8063d4:	d9800017 	ldw	r6,0(sp)
  8063d8:	30bfc21e 	bne	r6,r2,8062e4 <__alt_data_end+0xff8062e4>
  8063dc:	003fc206 	br	8062e8 <__alt_data_end+0xff8062e8>
  8063e0:	10bff604 	addi	r2,r2,-40
  8063e4:	88a0983a 	sll	r16,r17,r2
  8063e8:	002b883a 	mov	r21,zero
  8063ec:	003eb406 	br	805ec0 <__alt_data_end+0xff805ec0>
  8063f0:	d9800215 	stw	r6,8(sp)
  8063f4:	d9c00515 	stw	r7,20(sp)
  8063f8:	da000415 	stw	r8,16(sp)
  8063fc:	08014b40 	call	8014b4 <__clzsi2>
  806400:	10800804 	addi	r2,r2,32
  806404:	da000417 	ldw	r8,16(sp)
  806408:	d9c00517 	ldw	r7,20(sp)
  80640c:	d9800217 	ldw	r6,8(sp)
  806410:	003ea106 	br	805e98 <__alt_data_end+0xff805e98>
  806414:	10bff604 	addi	r2,r2,-40
  806418:	30a2983a 	sll	r17,r6,r2
  80641c:	0029883a 	mov	r20,zero
  806420:	003ec906 	br	805f48 <__alt_data_end+0xff805f48>
  806424:	3009883a 	mov	r4,r6
  806428:	d9400115 	stw	r5,4(sp)
  80642c:	d9800215 	stw	r6,8(sp)
  806430:	da000415 	stw	r8,16(sp)
  806434:	da400315 	stw	r9,12(sp)
  806438:	08014b40 	call	8014b4 <__clzsi2>
  80643c:	10800804 	addi	r2,r2,32
  806440:	da400317 	ldw	r9,12(sp)
  806444:	da000417 	ldw	r8,16(sp)
  806448:	d9800217 	ldw	r6,8(sp)
  80644c:	d9400117 	ldw	r5,4(sp)
  806450:	003eb306 	br	805f20 <__alt_data_end+0xff805f20>
  806454:	d9800017 	ldw	r6,0(sp)
  806458:	a9ab883a 	add	r21,r21,r6
  80645c:	a98b803a 	cmpltu	r5,r21,r6
  806460:	2d8b883a 	add	r5,r5,r22
  806464:	2a11883a 	add	r8,r5,r8
  806468:	897fffc4 	addi	r5,r17,-1
  80646c:	b2000c2e 	bgeu	r22,r8,8064a0 <__divdf3+0x808>
  806470:	41003f36 	bltu	r8,r4,806570 <__divdf3+0x8d8>
  806474:	22006c26 	beq	r4,r8,806628 <__divdf3+0x990>
  806478:	4109c83a 	sub	r4,r8,r4
  80647c:	2823883a 	mov	r17,r5
  806480:	003f3b06 	br	806170 <__alt_data_end+0xff806170>
  806484:	ad3ed336 	bltu	r21,r20,805fd4 <__alt_data_end+0xff805fd4>
  806488:	a804d07a 	srli	r2,r21,1
  80648c:	802e97fa 	slli	r23,r16,31
  806490:	a82a97fa 	slli	r21,r21,31
  806494:	8020d07a 	srli	r16,r16,1
  806498:	b8aeb03a 	or	r23,r23,r2
  80649c:	003ed006 	br	805fe0 <__alt_data_end+0xff805fe0>
  8064a0:	b23ff51e 	bne	r22,r8,806478 <__alt_data_end+0xff806478>
  8064a4:	d9800017 	ldw	r6,0(sp)
  8064a8:	a9bff12e 	bgeu	r21,r6,806470 <__alt_data_end+0xff806470>
  8064ac:	b109c83a 	sub	r4,r22,r4
  8064b0:	2823883a 	mov	r17,r5
  8064b4:	003f2e06 	br	806170 <__alt_data_end+0xff806170>
  8064b8:	2021883a 	mov	r16,r4
  8064bc:	003eff06 	br	8060bc <__alt_data_end+0xff8060bc>
  8064c0:	2023883a 	mov	r17,r4
  8064c4:	003ee406 	br	806058 <__alt_data_end+0xff806058>
  8064c8:	a8bfe236 	bltu	r21,r2,806454 <__alt_data_end+0xff806454>
  8064cc:	0009883a 	mov	r4,zero
  8064d0:	003f2706 	br	806170 <__alt_data_end+0xff806170>
  8064d4:	81002d36 	bltu	r16,r4,80658c <__divdf3+0x8f4>
  8064d8:	24005626 	beq	r4,r16,806634 <__divdf3+0x99c>
  8064dc:	2829883a 	mov	r20,r5
  8064e0:	003f8006 	br	8062e4 <__alt_data_end+0xff8062e4>
  8064e4:	053fffc4 	movi	r20,-1
  8064e8:	003f7f06 	br	8062e8 <__alt_data_end+0xff8062e8>
  8064ec:	200f883a 	mov	r7,r4
  8064f0:	003f3c06 	br	8061e4 <__alt_data_end+0xff8061e4>
  8064f4:	1011883a 	mov	r8,r2
  8064f8:	003f5506 	br	806250 <__alt_data_end+0xff806250>
  8064fc:	e027883a 	mov	r19,fp
  806500:	003f7906 	br	8062e8 <__alt_data_end+0xff8062e8>
  806504:	010007c4 	movi	r4,31
  806508:	20c02816 	blt	r4,r3,8065ac <__divdf3+0x914>
  80650c:	00800804 	movi	r2,32
  806510:	10c5c83a 	sub	r2,r2,r3
  806514:	888a983a 	sll	r5,r17,r2
  806518:	a0c8d83a 	srl	r4,r20,r3
  80651c:	a084983a 	sll	r2,r20,r2
  806520:	88e2d83a 	srl	r17,r17,r3
  806524:	2906b03a 	or	r3,r5,r4
  806528:	1004c03a 	cmpne	r2,r2,zero
  80652c:	1886b03a 	or	r3,r3,r2
  806530:	188001cc 	andi	r2,r3,7
  806534:	10000726 	beq	r2,zero,806554 <__divdf3+0x8bc>
  806538:	188003cc 	andi	r2,r3,15
  80653c:	01000104 	movi	r4,4
  806540:	11000426 	beq	r2,r4,806554 <__divdf3+0x8bc>
  806544:	1805883a 	mov	r2,r3
  806548:	10c00104 	addi	r3,r2,4
  80654c:	1885803a 	cmpltu	r2,r3,r2
  806550:	88a3883a 	add	r17,r17,r2
  806554:	8880202c 	andhi	r2,r17,128
  806558:	10002926 	beq	r2,zero,806600 <__divdf3+0x968>
  80655c:	9900004c 	andi	r4,r19,1
  806560:	00800044 	movi	r2,1
  806564:	0021883a 	mov	r16,zero
  806568:	002b883a 	mov	r21,zero
  80656c:	003e2906 	br	805e14 <__alt_data_end+0xff805e14>
  806570:	d9800017 	ldw	r6,0(sp)
  806574:	8c7fff84 	addi	r17,r17,-2
  806578:	a9ab883a 	add	r21,r21,r6
  80657c:	a98b803a 	cmpltu	r5,r21,r6
  806580:	2d8b883a 	add	r5,r5,r22
  806584:	2a11883a 	add	r8,r5,r8
  806588:	003ef806 	br	80616c <__alt_data_end+0xff80616c>
  80658c:	d9800017 	ldw	r6,0(sp)
  806590:	318f883a 	add	r7,r6,r6
  806594:	398b803a 	cmpltu	r5,r7,r6
  806598:	2d8d883a 	add	r6,r5,r22
  80659c:	81a1883a 	add	r16,r16,r6
  8065a0:	a17fff84 	addi	r5,r20,-2
  8065a4:	d9c00015 	stw	r7,0(sp)
  8065a8:	003f8806 	br	8063cc <__alt_data_end+0xff8063cc>
  8065ac:	013ff844 	movi	r4,-31
  8065b0:	2085c83a 	sub	r2,r4,r2
  8065b4:	8888d83a 	srl	r4,r17,r2
  8065b8:	00800804 	movi	r2,32
  8065bc:	18802126 	beq	r3,r2,806644 <__divdf3+0x9ac>
  8065c0:	04001004 	movi	r16,64
  8065c4:	80c7c83a 	sub	r3,r16,r3
  8065c8:	88e0983a 	sll	r16,r17,r3
  8065cc:	8504b03a 	or	r2,r16,r20
  8065d0:	1004c03a 	cmpne	r2,r2,zero
  8065d4:	2084b03a 	or	r2,r4,r2
  8065d8:	144001cc 	andi	r17,r2,7
  8065dc:	88000d1e 	bne	r17,zero,806614 <__divdf3+0x97c>
  8065e0:	0021883a 	mov	r16,zero
  8065e4:	102ad0fa 	srli	r21,r2,3
  8065e8:	9900004c 	andi	r4,r19,1
  8065ec:	0005883a 	mov	r2,zero
  8065f0:	ac6ab03a 	or	r21,r21,r17
  8065f4:	003e0706 	br	805e14 <__alt_data_end+0xff805e14>
  8065f8:	1007883a 	mov	r3,r2
  8065fc:	0023883a 	mov	r17,zero
  806600:	8820927a 	slli	r16,r17,9
  806604:	1805883a 	mov	r2,r3
  806608:	8822977a 	slli	r17,r17,29
  80660c:	8020d33a 	srli	r16,r16,12
  806610:	003ff406 	br	8065e4 <__alt_data_end+0xff8065e4>
  806614:	10c003cc 	andi	r3,r2,15
  806618:	01000104 	movi	r4,4
  80661c:	193ff626 	beq	r3,r4,8065f8 <__alt_data_end+0xff8065f8>
  806620:	0023883a 	mov	r17,zero
  806624:	003fc806 	br	806548 <__alt_data_end+0xff806548>
  806628:	a8bfd136 	bltu	r21,r2,806570 <__alt_data_end+0xff806570>
  80662c:	2823883a 	mov	r17,r5
  806630:	003fa606 	br	8064cc <__alt_data_end+0xff8064cc>
  806634:	d9800017 	ldw	r6,0(sp)
  806638:	30bfd436 	bltu	r6,r2,80658c <__alt_data_end+0xff80658c>
  80663c:	2829883a 	mov	r20,r5
  806640:	003f6406 	br	8063d4 <__alt_data_end+0xff8063d4>
  806644:	0021883a 	mov	r16,zero
  806648:	003fe006 	br	8065cc <__alt_data_end+0xff8065cc>
  80664c:	00800434 	movhi	r2,16
  806650:	8c000234 	orhi	r16,r17,8
  806654:	10bfffc4 	addi	r2,r2,-1
  806658:	e009883a 	mov	r4,fp
  80665c:	80a0703a 	and	r16,r16,r2
  806660:	a02b883a 	mov	r21,r20
  806664:	003e4e06 	br	805fa0 <__alt_data_end+0xff805fa0>

00806668 <__eqdf2>:
  806668:	2804d53a 	srli	r2,r5,20
  80666c:	3806d53a 	srli	r3,r7,20
  806670:	02000434 	movhi	r8,16
  806674:	423fffc4 	addi	r8,r8,-1
  806678:	1081ffcc 	andi	r2,r2,2047
  80667c:	0281ffc4 	movi	r10,2047
  806680:	2a12703a 	and	r9,r5,r8
  806684:	18c1ffcc 	andi	r3,r3,2047
  806688:	3a10703a 	and	r8,r7,r8
  80668c:	280ad7fa 	srli	r5,r5,31
  806690:	380ed7fa 	srli	r7,r7,31
  806694:	12801026 	beq	r2,r10,8066d8 <__eqdf2+0x70>
  806698:	0281ffc4 	movi	r10,2047
  80669c:	1a800a26 	beq	r3,r10,8066c8 <__eqdf2+0x60>
  8066a0:	10c00226 	beq	r2,r3,8066ac <__eqdf2+0x44>
  8066a4:	00800044 	movi	r2,1
  8066a8:	f800283a 	ret
  8066ac:	4a3ffd1e 	bne	r9,r8,8066a4 <__alt_data_end+0xff8066a4>
  8066b0:	21bffc1e 	bne	r4,r6,8066a4 <__alt_data_end+0xff8066a4>
  8066b4:	29c00c26 	beq	r5,r7,8066e8 <__eqdf2+0x80>
  8066b8:	103ffa1e 	bne	r2,zero,8066a4 <__alt_data_end+0xff8066a4>
  8066bc:	2244b03a 	or	r2,r4,r9
  8066c0:	1004c03a 	cmpne	r2,r2,zero
  8066c4:	f800283a 	ret
  8066c8:	3214b03a 	or	r10,r6,r8
  8066cc:	503ff426 	beq	r10,zero,8066a0 <__alt_data_end+0xff8066a0>
  8066d0:	00800044 	movi	r2,1
  8066d4:	f800283a 	ret
  8066d8:	2254b03a 	or	r10,r4,r9
  8066dc:	503fee26 	beq	r10,zero,806698 <__alt_data_end+0xff806698>
  8066e0:	00800044 	movi	r2,1
  8066e4:	f800283a 	ret
  8066e8:	0005883a 	mov	r2,zero
  8066ec:	f800283a 	ret

008066f0 <__gedf2>:
  8066f0:	2804d53a 	srli	r2,r5,20
  8066f4:	3806d53a 	srli	r3,r7,20
  8066f8:	02000434 	movhi	r8,16
  8066fc:	423fffc4 	addi	r8,r8,-1
  806700:	1081ffcc 	andi	r2,r2,2047
  806704:	0241ffc4 	movi	r9,2047
  806708:	2a14703a 	and	r10,r5,r8
  80670c:	18c1ffcc 	andi	r3,r3,2047
  806710:	3a10703a 	and	r8,r7,r8
  806714:	280ad7fa 	srli	r5,r5,31
  806718:	380ed7fa 	srli	r7,r7,31
  80671c:	12401d26 	beq	r2,r9,806794 <__gedf2+0xa4>
  806720:	0241ffc4 	movi	r9,2047
  806724:	1a401226 	beq	r3,r9,806770 <__gedf2+0x80>
  806728:	1000081e 	bne	r2,zero,80674c <__gedf2+0x5c>
  80672c:	2296b03a 	or	r11,r4,r10
  806730:	5813003a 	cmpeq	r9,r11,zero
  806734:	1800091e 	bne	r3,zero,80675c <__gedf2+0x6c>
  806738:	3218b03a 	or	r12,r6,r8
  80673c:	6000071e 	bne	r12,zero,80675c <__gedf2+0x6c>
  806740:	0005883a 	mov	r2,zero
  806744:	5800101e 	bne	r11,zero,806788 <__gedf2+0x98>
  806748:	f800283a 	ret
  80674c:	18000c1e 	bne	r3,zero,806780 <__gedf2+0x90>
  806750:	3212b03a 	or	r9,r6,r8
  806754:	48000c26 	beq	r9,zero,806788 <__gedf2+0x98>
  806758:	0013883a 	mov	r9,zero
  80675c:	39c03fcc 	andi	r7,r7,255
  806760:	48000826 	beq	r9,zero,806784 <__gedf2+0x94>
  806764:	38000926 	beq	r7,zero,80678c <__gedf2+0x9c>
  806768:	00800044 	movi	r2,1
  80676c:	f800283a 	ret
  806770:	3212b03a 	or	r9,r6,r8
  806774:	483fec26 	beq	r9,zero,806728 <__alt_data_end+0xff806728>
  806778:	00bfff84 	movi	r2,-2
  80677c:	f800283a 	ret
  806780:	39c03fcc 	andi	r7,r7,255
  806784:	29c00626 	beq	r5,r7,8067a0 <__gedf2+0xb0>
  806788:	283ff726 	beq	r5,zero,806768 <__alt_data_end+0xff806768>
  80678c:	00bfffc4 	movi	r2,-1
  806790:	f800283a 	ret
  806794:	2292b03a 	or	r9,r4,r10
  806798:	483fe126 	beq	r9,zero,806720 <__alt_data_end+0xff806720>
  80679c:	003ff606 	br	806778 <__alt_data_end+0xff806778>
  8067a0:	18bff916 	blt	r3,r2,806788 <__alt_data_end+0xff806788>
  8067a4:	10c00316 	blt	r2,r3,8067b4 <__gedf2+0xc4>
  8067a8:	42bff736 	bltu	r8,r10,806788 <__alt_data_end+0xff806788>
  8067ac:	52000326 	beq	r10,r8,8067bc <__gedf2+0xcc>
  8067b0:	5200042e 	bgeu	r10,r8,8067c4 <__gedf2+0xd4>
  8067b4:	283fec1e 	bne	r5,zero,806768 <__alt_data_end+0xff806768>
  8067b8:	003ff406 	br	80678c <__alt_data_end+0xff80678c>
  8067bc:	313ff236 	bltu	r6,r4,806788 <__alt_data_end+0xff806788>
  8067c0:	21bffc36 	bltu	r4,r6,8067b4 <__alt_data_end+0xff8067b4>
  8067c4:	0005883a 	mov	r2,zero
  8067c8:	f800283a 	ret

008067cc <__ledf2>:
  8067cc:	2804d53a 	srli	r2,r5,20
  8067d0:	3810d53a 	srli	r8,r7,20
  8067d4:	00c00434 	movhi	r3,16
  8067d8:	18ffffc4 	addi	r3,r3,-1
  8067dc:	1081ffcc 	andi	r2,r2,2047
  8067e0:	0241ffc4 	movi	r9,2047
  8067e4:	28d4703a 	and	r10,r5,r3
  8067e8:	4201ffcc 	andi	r8,r8,2047
  8067ec:	38c6703a 	and	r3,r7,r3
  8067f0:	280ad7fa 	srli	r5,r5,31
  8067f4:	380ed7fa 	srli	r7,r7,31
  8067f8:	12401f26 	beq	r2,r9,806878 <__ledf2+0xac>
  8067fc:	0241ffc4 	movi	r9,2047
  806800:	42401426 	beq	r8,r9,806854 <__ledf2+0x88>
  806804:	1000091e 	bne	r2,zero,80682c <__ledf2+0x60>
  806808:	2296b03a 	or	r11,r4,r10
  80680c:	5813003a 	cmpeq	r9,r11,zero
  806810:	29403fcc 	andi	r5,r5,255
  806814:	40000a1e 	bne	r8,zero,806840 <__ledf2+0x74>
  806818:	30d8b03a 	or	r12,r6,r3
  80681c:	6000081e 	bne	r12,zero,806840 <__ledf2+0x74>
  806820:	0005883a 	mov	r2,zero
  806824:	5800111e 	bne	r11,zero,80686c <__ledf2+0xa0>
  806828:	f800283a 	ret
  80682c:	29403fcc 	andi	r5,r5,255
  806830:	40000c1e 	bne	r8,zero,806864 <__ledf2+0x98>
  806834:	30d2b03a 	or	r9,r6,r3
  806838:	48000c26 	beq	r9,zero,80686c <__ledf2+0xa0>
  80683c:	0013883a 	mov	r9,zero
  806840:	39c03fcc 	andi	r7,r7,255
  806844:	48000826 	beq	r9,zero,806868 <__ledf2+0x9c>
  806848:	38001126 	beq	r7,zero,806890 <__ledf2+0xc4>
  80684c:	00800044 	movi	r2,1
  806850:	f800283a 	ret
  806854:	30d2b03a 	or	r9,r6,r3
  806858:	483fea26 	beq	r9,zero,806804 <__alt_data_end+0xff806804>
  80685c:	00800084 	movi	r2,2
  806860:	f800283a 	ret
  806864:	39c03fcc 	andi	r7,r7,255
  806868:	39400726 	beq	r7,r5,806888 <__ledf2+0xbc>
  80686c:	2800081e 	bne	r5,zero,806890 <__ledf2+0xc4>
  806870:	00800044 	movi	r2,1
  806874:	f800283a 	ret
  806878:	2292b03a 	or	r9,r4,r10
  80687c:	483fdf26 	beq	r9,zero,8067fc <__alt_data_end+0xff8067fc>
  806880:	00800084 	movi	r2,2
  806884:	f800283a 	ret
  806888:	4080030e 	bge	r8,r2,806898 <__ledf2+0xcc>
  80688c:	383fef26 	beq	r7,zero,80684c <__alt_data_end+0xff80684c>
  806890:	00bfffc4 	movi	r2,-1
  806894:	f800283a 	ret
  806898:	123feb16 	blt	r2,r8,806848 <__alt_data_end+0xff806848>
  80689c:	1abff336 	bltu	r3,r10,80686c <__alt_data_end+0xff80686c>
  8068a0:	50c00326 	beq	r10,r3,8068b0 <__ledf2+0xe4>
  8068a4:	50c0042e 	bgeu	r10,r3,8068b8 <__ledf2+0xec>
  8068a8:	283fe81e 	bne	r5,zero,80684c <__alt_data_end+0xff80684c>
  8068ac:	003ff806 	br	806890 <__alt_data_end+0xff806890>
  8068b0:	313fee36 	bltu	r6,r4,80686c <__alt_data_end+0xff80686c>
  8068b4:	21bffc36 	bltu	r4,r6,8068a8 <__alt_data_end+0xff8068a8>
  8068b8:	0005883a 	mov	r2,zero
  8068bc:	f800283a 	ret

008068c0 <__muldf3>:
  8068c0:	deffee04 	addi	sp,sp,-72
  8068c4:	dd000c15 	stw	r20,48(sp)
  8068c8:	2828d53a 	srli	r20,r5,20
  8068cc:	ddc00f15 	stw	r23,60(sp)
  8068d0:	282ed7fa 	srli	r23,r5,31
  8068d4:	dc000815 	stw	r16,32(sp)
  8068d8:	04000434 	movhi	r16,16
  8068dc:	dcc00b15 	stw	r19,44(sp)
  8068e0:	843fffc4 	addi	r16,r16,-1
  8068e4:	dfc01115 	stw	ra,68(sp)
  8068e8:	df001015 	stw	fp,64(sp)
  8068ec:	dd800e15 	stw	r22,56(sp)
  8068f0:	dd400d15 	stw	r21,52(sp)
  8068f4:	dc800a15 	stw	r18,40(sp)
  8068f8:	dc400915 	stw	r17,36(sp)
  8068fc:	a501ffcc 	andi	r20,r20,2047
  806900:	2c20703a 	and	r16,r5,r16
  806904:	b827883a 	mov	r19,r23
  806908:	ba403fcc 	andi	r9,r23,255
  80690c:	a0006026 	beq	r20,zero,806a90 <__muldf3+0x1d0>
  806910:	0081ffc4 	movi	r2,2047
  806914:	202d883a 	mov	r22,r4
  806918:	a0803626 	beq	r20,r2,8069f4 <__muldf3+0x134>
  80691c:	84000434 	orhi	r16,r16,16
  806920:	200ad77a 	srli	r5,r4,29
  806924:	800690fa 	slli	r3,r16,3
  806928:	202c90fa 	slli	r22,r4,3
  80692c:	a53f0044 	addi	r20,r20,-1023
  806930:	28e0b03a 	or	r16,r5,r3
  806934:	002b883a 	mov	r21,zero
  806938:	000b883a 	mov	r5,zero
  80693c:	3806d53a 	srli	r3,r7,20
  806940:	3838d7fa 	srli	fp,r7,31
  806944:	04400434 	movhi	r17,16
  806948:	8c7fffc4 	addi	r17,r17,-1
  80694c:	18c1ffcc 	andi	r3,r3,2047
  806950:	3025883a 	mov	r18,r6
  806954:	3c62703a 	and	r17,r7,r17
  806958:	e2803fcc 	andi	r10,fp,255
  80695c:	18006d26 	beq	r3,zero,806b14 <__muldf3+0x254>
  806960:	0081ffc4 	movi	r2,2047
  806964:	18806526 	beq	r3,r2,806afc <__muldf3+0x23c>
  806968:	8c400434 	orhi	r17,r17,16
  80696c:	300ed77a 	srli	r7,r6,29
  806970:	880890fa 	slli	r4,r17,3
  806974:	302490fa 	slli	r18,r6,3
  806978:	18ff0044 	addi	r3,r3,-1023
  80697c:	3922b03a 	or	r17,r7,r4
  806980:	000f883a 	mov	r7,zero
  806984:	a0c7883a 	add	r3,r20,r3
  806988:	3d48b03a 	or	r4,r7,r21
  80698c:	008003c4 	movi	r2,15
  806990:	e5ccf03a 	xor	r6,fp,r23
  806994:	1a000044 	addi	r8,r3,1
  806998:	11009b36 	bltu	r2,r4,806c08 <__muldf3+0x348>
  80699c:	200890ba 	slli	r4,r4,2
  8069a0:	00802034 	movhi	r2,128
  8069a4:	109a6d04 	addi	r2,r2,27060
  8069a8:	2089883a 	add	r4,r4,r2
  8069ac:	20800017 	ldw	r2,0(r4)
  8069b0:	1000683a 	jmp	r2
  8069b4:	00806c08 	cmpgei	r2,zero,432
  8069b8:	00806a14 	movui	r2,424
  8069bc:	00806a14 	movui	r2,424
  8069c0:	00806a10 	cmplti	r2,zero,424
  8069c4:	00806be4 	muli	r2,zero,431
  8069c8:	00806be4 	muli	r2,zero,431
  8069cc:	00806bcc 	andi	r2,zero,431
  8069d0:	00806a10 	cmplti	r2,zero,424
  8069d4:	00806be4 	muli	r2,zero,431
  8069d8:	00806bcc 	andi	r2,zero,431
  8069dc:	00806be4 	muli	r2,zero,431
  8069e0:	00806a10 	cmplti	r2,zero,424
  8069e4:	00806bf4 	movhi	r2,431
  8069e8:	00806bf4 	movhi	r2,431
  8069ec:	00806bf4 	movhi	r2,431
  8069f0:	00806f50 	cmplti	r2,zero,445
  8069f4:	2404b03a 	or	r2,r4,r16
  8069f8:	1000711e 	bne	r2,zero,806bc0 <__muldf3+0x300>
  8069fc:	05400204 	movi	r21,8
  806a00:	0021883a 	mov	r16,zero
  806a04:	002d883a 	mov	r22,zero
  806a08:	01400084 	movi	r5,2
  806a0c:	003fcb06 	br	80693c <__alt_data_end+0xff80693c>
  806a10:	500d883a 	mov	r6,r10
  806a14:	00800084 	movi	r2,2
  806a18:	38805926 	beq	r7,r2,806b80 <__muldf3+0x2c0>
  806a1c:	008000c4 	movi	r2,3
  806a20:	3881ba26 	beq	r7,r2,80710c <__muldf3+0x84c>
  806a24:	00800044 	movi	r2,1
  806a28:	3881951e 	bne	r7,r2,807080 <__muldf3+0x7c0>
  806a2c:	3027883a 	mov	r19,r6
  806a30:	0005883a 	mov	r2,zero
  806a34:	0021883a 	mov	r16,zero
  806a38:	002d883a 	mov	r22,zero
  806a3c:	1004953a 	slli	r2,r2,20
  806a40:	98c03fcc 	andi	r3,r19,255
  806a44:	04400434 	movhi	r17,16
  806a48:	8c7fffc4 	addi	r17,r17,-1
  806a4c:	180697fa 	slli	r3,r3,31
  806a50:	8460703a 	and	r16,r16,r17
  806a54:	80a0b03a 	or	r16,r16,r2
  806a58:	80c6b03a 	or	r3,r16,r3
  806a5c:	b005883a 	mov	r2,r22
  806a60:	dfc01117 	ldw	ra,68(sp)
  806a64:	df001017 	ldw	fp,64(sp)
  806a68:	ddc00f17 	ldw	r23,60(sp)
  806a6c:	dd800e17 	ldw	r22,56(sp)
  806a70:	dd400d17 	ldw	r21,52(sp)
  806a74:	dd000c17 	ldw	r20,48(sp)
  806a78:	dcc00b17 	ldw	r19,44(sp)
  806a7c:	dc800a17 	ldw	r18,40(sp)
  806a80:	dc400917 	ldw	r17,36(sp)
  806a84:	dc000817 	ldw	r16,32(sp)
  806a88:	dec01204 	addi	sp,sp,72
  806a8c:	f800283a 	ret
  806a90:	2404b03a 	or	r2,r4,r16
  806a94:	202b883a 	mov	r21,r4
  806a98:	10004426 	beq	r2,zero,806bac <__muldf3+0x2ec>
  806a9c:	80015026 	beq	r16,zero,806fe0 <__muldf3+0x720>
  806aa0:	8009883a 	mov	r4,r16
  806aa4:	d9800715 	stw	r6,28(sp)
  806aa8:	d9c00215 	stw	r7,8(sp)
  806aac:	da400415 	stw	r9,16(sp)
  806ab0:	08014b40 	call	8014b4 <__clzsi2>
  806ab4:	d9800717 	ldw	r6,28(sp)
  806ab8:	d9c00217 	ldw	r7,8(sp)
  806abc:	da400417 	ldw	r9,16(sp)
  806ac0:	10fffd44 	addi	r3,r2,-11
  806ac4:	01000704 	movi	r4,28
  806ac8:	20c14116 	blt	r4,r3,806fd0 <__muldf3+0x710>
  806acc:	01000744 	movi	r4,29
  806ad0:	15bffe04 	addi	r22,r2,-8
  806ad4:	20c9c83a 	sub	r4,r4,r3
  806ad8:	85a0983a 	sll	r16,r16,r22
  806adc:	a908d83a 	srl	r4,r21,r4
  806ae0:	adac983a 	sll	r22,r21,r22
  806ae4:	2420b03a 	or	r16,r4,r16
  806ae8:	053f0084 	movi	r20,-1022
  806aec:	a0e9c83a 	sub	r20,r20,r3
  806af0:	002b883a 	mov	r21,zero
  806af4:	000b883a 	mov	r5,zero
  806af8:	003f9006 	br	80693c <__alt_data_end+0xff80693c>
  806afc:	3444b03a 	or	r2,r6,r17
  806b00:	1000281e 	bne	r2,zero,806ba4 <__muldf3+0x2e4>
  806b04:	0023883a 	mov	r17,zero
  806b08:	0025883a 	mov	r18,zero
  806b0c:	01c00084 	movi	r7,2
  806b10:	003f9c06 	br	806984 <__alt_data_end+0xff806984>
  806b14:	3444b03a 	or	r2,r6,r17
  806b18:	10001e26 	beq	r2,zero,806b94 <__muldf3+0x2d4>
  806b1c:	88012026 	beq	r17,zero,806fa0 <__muldf3+0x6e0>
  806b20:	8809883a 	mov	r4,r17
  806b24:	d9400215 	stw	r5,8(sp)
  806b28:	d9800715 	stw	r6,28(sp)
  806b2c:	da400415 	stw	r9,16(sp)
  806b30:	da800315 	stw	r10,12(sp)
  806b34:	08014b40 	call	8014b4 <__clzsi2>
  806b38:	d9400217 	ldw	r5,8(sp)
  806b3c:	d9800717 	ldw	r6,28(sp)
  806b40:	da400417 	ldw	r9,16(sp)
  806b44:	da800317 	ldw	r10,12(sp)
  806b48:	113ffd44 	addi	r4,r2,-11
  806b4c:	00c00704 	movi	r3,28
  806b50:	19010f16 	blt	r3,r4,806f90 <__muldf3+0x6d0>
  806b54:	00c00744 	movi	r3,29
  806b58:	14bffe04 	addi	r18,r2,-8
  806b5c:	1907c83a 	sub	r3,r3,r4
  806b60:	8ca2983a 	sll	r17,r17,r18
  806b64:	30c6d83a 	srl	r3,r6,r3
  806b68:	34a4983a 	sll	r18,r6,r18
  806b6c:	1c62b03a 	or	r17,r3,r17
  806b70:	00ff0084 	movi	r3,-1022
  806b74:	1907c83a 	sub	r3,r3,r4
  806b78:	000f883a 	mov	r7,zero
  806b7c:	003f8106 	br	806984 <__alt_data_end+0xff806984>
  806b80:	3027883a 	mov	r19,r6
  806b84:	0081ffc4 	movi	r2,2047
  806b88:	0021883a 	mov	r16,zero
  806b8c:	002d883a 	mov	r22,zero
  806b90:	003faa06 	br	806a3c <__alt_data_end+0xff806a3c>
  806b94:	0023883a 	mov	r17,zero
  806b98:	0025883a 	mov	r18,zero
  806b9c:	01c00044 	movi	r7,1
  806ba0:	003f7806 	br	806984 <__alt_data_end+0xff806984>
  806ba4:	01c000c4 	movi	r7,3
  806ba8:	003f7606 	br	806984 <__alt_data_end+0xff806984>
  806bac:	05400104 	movi	r21,4
  806bb0:	0021883a 	mov	r16,zero
  806bb4:	002d883a 	mov	r22,zero
  806bb8:	01400044 	movi	r5,1
  806bbc:	003f5f06 	br	80693c <__alt_data_end+0xff80693c>
  806bc0:	05400304 	movi	r21,12
  806bc4:	014000c4 	movi	r5,3
  806bc8:	003f5c06 	br	80693c <__alt_data_end+0xff80693c>
  806bcc:	04000434 	movhi	r16,16
  806bd0:	0027883a 	mov	r19,zero
  806bd4:	843fffc4 	addi	r16,r16,-1
  806bd8:	05bfffc4 	movi	r22,-1
  806bdc:	0081ffc4 	movi	r2,2047
  806be0:	003f9606 	br	806a3c <__alt_data_end+0xff806a3c>
  806be4:	8023883a 	mov	r17,r16
  806be8:	b025883a 	mov	r18,r22
  806bec:	280f883a 	mov	r7,r5
  806bf0:	003f8806 	br	806a14 <__alt_data_end+0xff806a14>
  806bf4:	8023883a 	mov	r17,r16
  806bf8:	b025883a 	mov	r18,r22
  806bfc:	480d883a 	mov	r6,r9
  806c00:	280f883a 	mov	r7,r5
  806c04:	003f8306 	br	806a14 <__alt_data_end+0xff806a14>
  806c08:	b028d43a 	srli	r20,r22,16
  806c0c:	902ed43a 	srli	r23,r18,16
  806c10:	b5bfffcc 	andi	r22,r22,65535
  806c14:	94bfffcc 	andi	r18,r18,65535
  806c18:	b00b883a 	mov	r5,r22
  806c1c:	9009883a 	mov	r4,r18
  806c20:	d8c00515 	stw	r3,20(sp)
  806c24:	d9800715 	stw	r6,28(sp)
  806c28:	da000615 	stw	r8,24(sp)
  806c2c:	08015180 	call	801518 <__mulsi3>
  806c30:	a00b883a 	mov	r5,r20
  806c34:	9009883a 	mov	r4,r18
  806c38:	1027883a 	mov	r19,r2
  806c3c:	08015180 	call	801518 <__mulsi3>
  806c40:	b80b883a 	mov	r5,r23
  806c44:	a009883a 	mov	r4,r20
  806c48:	102b883a 	mov	r21,r2
  806c4c:	08015180 	call	801518 <__mulsi3>
  806c50:	b809883a 	mov	r4,r23
  806c54:	b00b883a 	mov	r5,r22
  806c58:	1039883a 	mov	fp,r2
  806c5c:	08015180 	call	801518 <__mulsi3>
  806c60:	9808d43a 	srli	r4,r19,16
  806c64:	1545883a 	add	r2,r2,r21
  806c68:	d8c00517 	ldw	r3,20(sp)
  806c6c:	2085883a 	add	r2,r4,r2
  806c70:	d9800717 	ldw	r6,28(sp)
  806c74:	da000617 	ldw	r8,24(sp)
  806c78:	1540022e 	bgeu	r2,r21,806c84 <__muldf3+0x3c4>
  806c7c:	01000074 	movhi	r4,1
  806c80:	e139883a 	add	fp,fp,r4
  806c84:	100e943a 	slli	r7,r2,16
  806c88:	1004d43a 	srli	r2,r2,16
  806c8c:	882ad43a 	srli	r21,r17,16
  806c90:	9cffffcc 	andi	r19,r19,65535
  806c94:	8c7fffcc 	andi	r17,r17,65535
  806c98:	3ce7883a 	add	r19,r7,r19
  806c9c:	b00b883a 	mov	r5,r22
  806ca0:	8809883a 	mov	r4,r17
  806ca4:	d8c00515 	stw	r3,20(sp)
  806ca8:	d9800715 	stw	r6,28(sp)
  806cac:	da000615 	stw	r8,24(sp)
  806cb0:	dcc00115 	stw	r19,4(sp)
  806cb4:	d8800015 	stw	r2,0(sp)
  806cb8:	08015180 	call	801518 <__mulsi3>
  806cbc:	a00b883a 	mov	r5,r20
  806cc0:	8809883a 	mov	r4,r17
  806cc4:	d8800215 	stw	r2,8(sp)
  806cc8:	08015180 	call	801518 <__mulsi3>
  806ccc:	a009883a 	mov	r4,r20
  806cd0:	a80b883a 	mov	r5,r21
  806cd4:	1027883a 	mov	r19,r2
  806cd8:	08015180 	call	801518 <__mulsi3>
  806cdc:	a809883a 	mov	r4,r21
  806ce0:	b00b883a 	mov	r5,r22
  806ce4:	1029883a 	mov	r20,r2
  806ce8:	08015180 	call	801518 <__mulsi3>
  806cec:	d9c00217 	ldw	r7,8(sp)
  806cf0:	14c5883a 	add	r2,r2,r19
  806cf4:	d8c00517 	ldw	r3,20(sp)
  806cf8:	3808d43a 	srli	r4,r7,16
  806cfc:	d9800717 	ldw	r6,28(sp)
  806d00:	da000617 	ldw	r8,24(sp)
  806d04:	2085883a 	add	r2,r4,r2
  806d08:	14c0022e 	bgeu	r2,r19,806d14 <__muldf3+0x454>
  806d0c:	01000074 	movhi	r4,1
  806d10:	a129883a 	add	r20,r20,r4
  806d14:	1012d43a 	srli	r9,r2,16
  806d18:	1004943a 	slli	r2,r2,16
  806d1c:	802cd43a 	srli	r22,r16,16
  806d20:	843fffcc 	andi	r16,r16,65535
  806d24:	3cffffcc 	andi	r19,r7,65535
  806d28:	9009883a 	mov	r4,r18
  806d2c:	800b883a 	mov	r5,r16
  806d30:	4d29883a 	add	r20,r9,r20
  806d34:	d8c00515 	stw	r3,20(sp)
  806d38:	d9800715 	stw	r6,28(sp)
  806d3c:	da000615 	stw	r8,24(sp)
  806d40:	14e7883a 	add	r19,r2,r19
  806d44:	08015180 	call	801518 <__mulsi3>
  806d48:	9009883a 	mov	r4,r18
  806d4c:	b00b883a 	mov	r5,r22
  806d50:	d8800315 	stw	r2,12(sp)
  806d54:	08015180 	call	801518 <__mulsi3>
  806d58:	b809883a 	mov	r4,r23
  806d5c:	b00b883a 	mov	r5,r22
  806d60:	d8800215 	stw	r2,8(sp)
  806d64:	08015180 	call	801518 <__mulsi3>
  806d68:	b80b883a 	mov	r5,r23
  806d6c:	8009883a 	mov	r4,r16
  806d70:	d8800415 	stw	r2,16(sp)
  806d74:	08015180 	call	801518 <__mulsi3>
  806d78:	da800317 	ldw	r10,12(sp)
  806d7c:	d9c00217 	ldw	r7,8(sp)
  806d80:	d9000017 	ldw	r4,0(sp)
  806d84:	502ed43a 	srli	r23,r10,16
  806d88:	11c5883a 	add	r2,r2,r7
  806d8c:	24e5883a 	add	r18,r4,r19
  806d90:	b885883a 	add	r2,r23,r2
  806d94:	d8c00517 	ldw	r3,20(sp)
  806d98:	d9800717 	ldw	r6,28(sp)
  806d9c:	da000617 	ldw	r8,24(sp)
  806da0:	da400417 	ldw	r9,16(sp)
  806da4:	11c0022e 	bgeu	r2,r7,806db0 <__muldf3+0x4f0>
  806da8:	01000074 	movhi	r4,1
  806dac:	4913883a 	add	r9,r9,r4
  806db0:	100ed43a 	srli	r7,r2,16
  806db4:	1004943a 	slli	r2,r2,16
  806db8:	55ffffcc 	andi	r23,r10,65535
  806dbc:	3a53883a 	add	r9,r7,r9
  806dc0:	8809883a 	mov	r4,r17
  806dc4:	800b883a 	mov	r5,r16
  806dc8:	d8c00515 	stw	r3,20(sp)
  806dcc:	d9800715 	stw	r6,28(sp)
  806dd0:	da000615 	stw	r8,24(sp)
  806dd4:	da400415 	stw	r9,16(sp)
  806dd8:	15ef883a 	add	r23,r2,r23
  806ddc:	08015180 	call	801518 <__mulsi3>
  806de0:	8809883a 	mov	r4,r17
  806de4:	b00b883a 	mov	r5,r22
  806de8:	d8800215 	stw	r2,8(sp)
  806dec:	08015180 	call	801518 <__mulsi3>
  806df0:	b00b883a 	mov	r5,r22
  806df4:	a809883a 	mov	r4,r21
  806df8:	d8800315 	stw	r2,12(sp)
  806dfc:	08015180 	call	801518 <__mulsi3>
  806e00:	8009883a 	mov	r4,r16
  806e04:	a80b883a 	mov	r5,r21
  806e08:	1023883a 	mov	r17,r2
  806e0c:	08015180 	call	801518 <__mulsi3>
  806e10:	d9c00217 	ldw	r7,8(sp)
  806e14:	da800317 	ldw	r10,12(sp)
  806e18:	d8c00517 	ldw	r3,20(sp)
  806e1c:	3808d43a 	srli	r4,r7,16
  806e20:	1285883a 	add	r2,r2,r10
  806e24:	d9800717 	ldw	r6,28(sp)
  806e28:	2085883a 	add	r2,r4,r2
  806e2c:	da000617 	ldw	r8,24(sp)
  806e30:	da400417 	ldw	r9,16(sp)
  806e34:	1280022e 	bgeu	r2,r10,806e40 <__muldf3+0x580>
  806e38:	01000074 	movhi	r4,1
  806e3c:	8923883a 	add	r17,r17,r4
  806e40:	1008943a 	slli	r4,r2,16
  806e44:	39ffffcc 	andi	r7,r7,65535
  806e48:	e4b9883a 	add	fp,fp,r18
  806e4c:	21cf883a 	add	r7,r4,r7
  806e50:	e4e7803a 	cmpltu	r19,fp,r19
  806e54:	3d0f883a 	add	r7,r7,r20
  806e58:	bf39883a 	add	fp,r23,fp
  806e5c:	99c9883a 	add	r4,r19,r7
  806e60:	e5ef803a 	cmpltu	r23,fp,r23
  806e64:	490b883a 	add	r5,r9,r4
  806e68:	1004d43a 	srli	r2,r2,16
  806e6c:	b965883a 	add	r18,r23,r5
  806e70:	24c9803a 	cmpltu	r4,r4,r19
  806e74:	3d29803a 	cmpltu	r20,r7,r20
  806e78:	a128b03a 	or	r20,r20,r4
  806e7c:	95ef803a 	cmpltu	r23,r18,r23
  806e80:	2a53803a 	cmpltu	r9,r5,r9
  806e84:	a0a9883a 	add	r20,r20,r2
  806e88:	4deeb03a 	or	r23,r9,r23
  806e8c:	a5ef883a 	add	r23,r20,r23
  806e90:	bc63883a 	add	r17,r23,r17
  806e94:	e004927a 	slli	r2,fp,9
  806e98:	d9000117 	ldw	r4,4(sp)
  806e9c:	882e927a 	slli	r23,r17,9
  806ea0:	9022d5fa 	srli	r17,r18,23
  806ea4:	e038d5fa 	srli	fp,fp,23
  806ea8:	1104b03a 	or	r2,r2,r4
  806eac:	9024927a 	slli	r18,r18,9
  806eb0:	1004c03a 	cmpne	r2,r2,zero
  806eb4:	bc62b03a 	or	r17,r23,r17
  806eb8:	1738b03a 	or	fp,r2,fp
  806ebc:	8880402c 	andhi	r2,r17,256
  806ec0:	e4a4b03a 	or	r18,fp,r18
  806ec4:	10000726 	beq	r2,zero,806ee4 <__muldf3+0x624>
  806ec8:	9006d07a 	srli	r3,r18,1
  806ecc:	880497fa 	slli	r2,r17,31
  806ed0:	9480004c 	andi	r18,r18,1
  806ed4:	8822d07a 	srli	r17,r17,1
  806ed8:	1ca4b03a 	or	r18,r3,r18
  806edc:	14a4b03a 	or	r18,r2,r18
  806ee0:	4007883a 	mov	r3,r8
  806ee4:	1880ffc4 	addi	r2,r3,1023
  806ee8:	0080460e 	bge	zero,r2,807004 <__muldf3+0x744>
  806eec:	910001cc 	andi	r4,r18,7
  806ef0:	20000726 	beq	r4,zero,806f10 <__muldf3+0x650>
  806ef4:	910003cc 	andi	r4,r18,15
  806ef8:	01400104 	movi	r5,4
  806efc:	21400426 	beq	r4,r5,806f10 <__muldf3+0x650>
  806f00:	9149883a 	add	r4,r18,r5
  806f04:	24a5803a 	cmpltu	r18,r4,r18
  806f08:	8ca3883a 	add	r17,r17,r18
  806f0c:	2025883a 	mov	r18,r4
  806f10:	8900402c 	andhi	r4,r17,256
  806f14:	20000426 	beq	r4,zero,806f28 <__muldf3+0x668>
  806f18:	18810004 	addi	r2,r3,1024
  806f1c:	00ffc034 	movhi	r3,65280
  806f20:	18ffffc4 	addi	r3,r3,-1
  806f24:	88e2703a 	and	r17,r17,r3
  806f28:	00c1ff84 	movi	r3,2046
  806f2c:	18bf1416 	blt	r3,r2,806b80 <__alt_data_end+0xff806b80>
  806f30:	882c977a 	slli	r22,r17,29
  806f34:	9024d0fa 	srli	r18,r18,3
  806f38:	8822927a 	slli	r17,r17,9
  806f3c:	1081ffcc 	andi	r2,r2,2047
  806f40:	b4acb03a 	or	r22,r22,r18
  806f44:	8820d33a 	srli	r16,r17,12
  806f48:	3027883a 	mov	r19,r6
  806f4c:	003ebb06 	br	806a3c <__alt_data_end+0xff806a3c>
  806f50:	8080022c 	andhi	r2,r16,8
  806f54:	10000926 	beq	r2,zero,806f7c <__muldf3+0x6bc>
  806f58:	8880022c 	andhi	r2,r17,8
  806f5c:	1000071e 	bne	r2,zero,806f7c <__muldf3+0x6bc>
  806f60:	00800434 	movhi	r2,16
  806f64:	8c000234 	orhi	r16,r17,8
  806f68:	10bfffc4 	addi	r2,r2,-1
  806f6c:	e027883a 	mov	r19,fp
  806f70:	80a0703a 	and	r16,r16,r2
  806f74:	902d883a 	mov	r22,r18
  806f78:	003f1806 	br	806bdc <__alt_data_end+0xff806bdc>
  806f7c:	00800434 	movhi	r2,16
  806f80:	84000234 	orhi	r16,r16,8
  806f84:	10bfffc4 	addi	r2,r2,-1
  806f88:	80a0703a 	and	r16,r16,r2
  806f8c:	003f1306 	br	806bdc <__alt_data_end+0xff806bdc>
  806f90:	147ff604 	addi	r17,r2,-40
  806f94:	3462983a 	sll	r17,r6,r17
  806f98:	0025883a 	mov	r18,zero
  806f9c:	003ef406 	br	806b70 <__alt_data_end+0xff806b70>
  806fa0:	3009883a 	mov	r4,r6
  806fa4:	d9400215 	stw	r5,8(sp)
  806fa8:	d9800715 	stw	r6,28(sp)
  806fac:	da400415 	stw	r9,16(sp)
  806fb0:	da800315 	stw	r10,12(sp)
  806fb4:	08014b40 	call	8014b4 <__clzsi2>
  806fb8:	10800804 	addi	r2,r2,32
  806fbc:	da800317 	ldw	r10,12(sp)
  806fc0:	da400417 	ldw	r9,16(sp)
  806fc4:	d9800717 	ldw	r6,28(sp)
  806fc8:	d9400217 	ldw	r5,8(sp)
  806fcc:	003ede06 	br	806b48 <__alt_data_end+0xff806b48>
  806fd0:	143ff604 	addi	r16,r2,-40
  806fd4:	ac20983a 	sll	r16,r21,r16
  806fd8:	002d883a 	mov	r22,zero
  806fdc:	003ec206 	br	806ae8 <__alt_data_end+0xff806ae8>
  806fe0:	d9800715 	stw	r6,28(sp)
  806fe4:	d9c00215 	stw	r7,8(sp)
  806fe8:	da400415 	stw	r9,16(sp)
  806fec:	08014b40 	call	8014b4 <__clzsi2>
  806ff0:	10800804 	addi	r2,r2,32
  806ff4:	da400417 	ldw	r9,16(sp)
  806ff8:	d9c00217 	ldw	r7,8(sp)
  806ffc:	d9800717 	ldw	r6,28(sp)
  807000:	003eaf06 	br	806ac0 <__alt_data_end+0xff806ac0>
  807004:	00c00044 	movi	r3,1
  807008:	1887c83a 	sub	r3,r3,r2
  80700c:	01000e04 	movi	r4,56
  807010:	20fe8616 	blt	r4,r3,806a2c <__alt_data_end+0xff806a2c>
  807014:	010007c4 	movi	r4,31
  807018:	20c01b16 	blt	r4,r3,807088 <__muldf3+0x7c8>
  80701c:	00800804 	movi	r2,32
  807020:	10c5c83a 	sub	r2,r2,r3
  807024:	888a983a 	sll	r5,r17,r2
  807028:	90c8d83a 	srl	r4,r18,r3
  80702c:	9084983a 	sll	r2,r18,r2
  807030:	88e2d83a 	srl	r17,r17,r3
  807034:	2906b03a 	or	r3,r5,r4
  807038:	1004c03a 	cmpne	r2,r2,zero
  80703c:	1886b03a 	or	r3,r3,r2
  807040:	188001cc 	andi	r2,r3,7
  807044:	10000726 	beq	r2,zero,807064 <__muldf3+0x7a4>
  807048:	188003cc 	andi	r2,r3,15
  80704c:	01000104 	movi	r4,4
  807050:	11000426 	beq	r2,r4,807064 <__muldf3+0x7a4>
  807054:	1805883a 	mov	r2,r3
  807058:	10c00104 	addi	r3,r2,4
  80705c:	1885803a 	cmpltu	r2,r3,r2
  807060:	88a3883a 	add	r17,r17,r2
  807064:	8880202c 	andhi	r2,r17,128
  807068:	10001c26 	beq	r2,zero,8070dc <__muldf3+0x81c>
  80706c:	3027883a 	mov	r19,r6
  807070:	00800044 	movi	r2,1
  807074:	0021883a 	mov	r16,zero
  807078:	002d883a 	mov	r22,zero
  80707c:	003e6f06 	br	806a3c <__alt_data_end+0xff806a3c>
  807080:	4007883a 	mov	r3,r8
  807084:	003f9706 	br	806ee4 <__alt_data_end+0xff806ee4>
  807088:	017ff844 	movi	r5,-31
  80708c:	2885c83a 	sub	r2,r5,r2
  807090:	888ad83a 	srl	r5,r17,r2
  807094:	00800804 	movi	r2,32
  807098:	18801a26 	beq	r3,r2,807104 <__muldf3+0x844>
  80709c:	01001004 	movi	r4,64
  8070a0:	20c7c83a 	sub	r3,r4,r3
  8070a4:	88e2983a 	sll	r17,r17,r3
  8070a8:	8ca4b03a 	or	r18,r17,r18
  8070ac:	9004c03a 	cmpne	r2,r18,zero
  8070b0:	2884b03a 	or	r2,r5,r2
  8070b4:	144001cc 	andi	r17,r2,7
  8070b8:	88000d1e 	bne	r17,zero,8070f0 <__muldf3+0x830>
  8070bc:	0021883a 	mov	r16,zero
  8070c0:	102cd0fa 	srli	r22,r2,3
  8070c4:	3027883a 	mov	r19,r6
  8070c8:	0005883a 	mov	r2,zero
  8070cc:	b46cb03a 	or	r22,r22,r17
  8070d0:	003e5a06 	br	806a3c <__alt_data_end+0xff806a3c>
  8070d4:	1007883a 	mov	r3,r2
  8070d8:	0023883a 	mov	r17,zero
  8070dc:	8820927a 	slli	r16,r17,9
  8070e0:	1805883a 	mov	r2,r3
  8070e4:	8822977a 	slli	r17,r17,29
  8070e8:	8020d33a 	srli	r16,r16,12
  8070ec:	003ff406 	br	8070c0 <__alt_data_end+0xff8070c0>
  8070f0:	10c003cc 	andi	r3,r2,15
  8070f4:	01000104 	movi	r4,4
  8070f8:	193ff626 	beq	r3,r4,8070d4 <__alt_data_end+0xff8070d4>
  8070fc:	0023883a 	mov	r17,zero
  807100:	003fd506 	br	807058 <__alt_data_end+0xff807058>
  807104:	0023883a 	mov	r17,zero
  807108:	003fe706 	br	8070a8 <__alt_data_end+0xff8070a8>
  80710c:	00800434 	movhi	r2,16
  807110:	8c000234 	orhi	r16,r17,8
  807114:	10bfffc4 	addi	r2,r2,-1
  807118:	3027883a 	mov	r19,r6
  80711c:	80a0703a 	and	r16,r16,r2
  807120:	902d883a 	mov	r22,r18
  807124:	003ead06 	br	806bdc <__alt_data_end+0xff806bdc>

00807128 <__subdf3>:
  807128:	02000434 	movhi	r8,16
  80712c:	423fffc4 	addi	r8,r8,-1
  807130:	defffb04 	addi	sp,sp,-20
  807134:	2a14703a 	and	r10,r5,r8
  807138:	3812d53a 	srli	r9,r7,20
  80713c:	3a10703a 	and	r8,r7,r8
  807140:	2006d77a 	srli	r3,r4,29
  807144:	3004d77a 	srli	r2,r6,29
  807148:	dc000015 	stw	r16,0(sp)
  80714c:	501490fa 	slli	r10,r10,3
  807150:	2820d53a 	srli	r16,r5,20
  807154:	401090fa 	slli	r8,r8,3
  807158:	dc800215 	stw	r18,8(sp)
  80715c:	dc400115 	stw	r17,4(sp)
  807160:	dfc00415 	stw	ra,16(sp)
  807164:	202290fa 	slli	r17,r4,3
  807168:	dcc00315 	stw	r19,12(sp)
  80716c:	4a41ffcc 	andi	r9,r9,2047
  807170:	0101ffc4 	movi	r4,2047
  807174:	2824d7fa 	srli	r18,r5,31
  807178:	8401ffcc 	andi	r16,r16,2047
  80717c:	50c6b03a 	or	r3,r10,r3
  807180:	380ed7fa 	srli	r7,r7,31
  807184:	408ab03a 	or	r5,r8,r2
  807188:	300c90fa 	slli	r6,r6,3
  80718c:	49009626 	beq	r9,r4,8073e8 <__subdf3+0x2c0>
  807190:	39c0005c 	xori	r7,r7,1
  807194:	8245c83a 	sub	r2,r16,r9
  807198:	3c807426 	beq	r7,r18,80736c <__subdf3+0x244>
  80719c:	0080af0e 	bge	zero,r2,80745c <__subdf3+0x334>
  8071a0:	48002a1e 	bne	r9,zero,80724c <__subdf3+0x124>
  8071a4:	2988b03a 	or	r4,r5,r6
  8071a8:	20009a1e 	bne	r4,zero,807414 <__subdf3+0x2ec>
  8071ac:	888001cc 	andi	r2,r17,7
  8071b0:	10000726 	beq	r2,zero,8071d0 <__subdf3+0xa8>
  8071b4:	888003cc 	andi	r2,r17,15
  8071b8:	01000104 	movi	r4,4
  8071bc:	11000426 	beq	r2,r4,8071d0 <__subdf3+0xa8>
  8071c0:	890b883a 	add	r5,r17,r4
  8071c4:	2c63803a 	cmpltu	r17,r5,r17
  8071c8:	1c47883a 	add	r3,r3,r17
  8071cc:	2823883a 	mov	r17,r5
  8071d0:	1880202c 	andhi	r2,r3,128
  8071d4:	10005926 	beq	r2,zero,80733c <__subdf3+0x214>
  8071d8:	84000044 	addi	r16,r16,1
  8071dc:	0081ffc4 	movi	r2,2047
  8071e0:	8080be26 	beq	r16,r2,8074dc <__subdf3+0x3b4>
  8071e4:	017fe034 	movhi	r5,65408
  8071e8:	297fffc4 	addi	r5,r5,-1
  8071ec:	1946703a 	and	r3,r3,r5
  8071f0:	1804977a 	slli	r2,r3,29
  8071f4:	1806927a 	slli	r3,r3,9
  8071f8:	8822d0fa 	srli	r17,r17,3
  8071fc:	8401ffcc 	andi	r16,r16,2047
  807200:	180ad33a 	srli	r5,r3,12
  807204:	9100004c 	andi	r4,r18,1
  807208:	1444b03a 	or	r2,r2,r17
  80720c:	80c1ffcc 	andi	r3,r16,2047
  807210:	1820953a 	slli	r16,r3,20
  807214:	20c03fcc 	andi	r3,r4,255
  807218:	180897fa 	slli	r4,r3,31
  80721c:	00c00434 	movhi	r3,16
  807220:	18ffffc4 	addi	r3,r3,-1
  807224:	28c6703a 	and	r3,r5,r3
  807228:	1c06b03a 	or	r3,r3,r16
  80722c:	1906b03a 	or	r3,r3,r4
  807230:	dfc00417 	ldw	ra,16(sp)
  807234:	dcc00317 	ldw	r19,12(sp)
  807238:	dc800217 	ldw	r18,8(sp)
  80723c:	dc400117 	ldw	r17,4(sp)
  807240:	dc000017 	ldw	r16,0(sp)
  807244:	dec00504 	addi	sp,sp,20
  807248:	f800283a 	ret
  80724c:	0101ffc4 	movi	r4,2047
  807250:	813fd626 	beq	r16,r4,8071ac <__alt_data_end+0xff8071ac>
  807254:	29402034 	orhi	r5,r5,128
  807258:	01000e04 	movi	r4,56
  80725c:	2080a316 	blt	r4,r2,8074ec <__subdf3+0x3c4>
  807260:	010007c4 	movi	r4,31
  807264:	2080c616 	blt	r4,r2,807580 <__subdf3+0x458>
  807268:	01000804 	movi	r4,32
  80726c:	2089c83a 	sub	r4,r4,r2
  807270:	2910983a 	sll	r8,r5,r4
  807274:	308ed83a 	srl	r7,r6,r2
  807278:	3108983a 	sll	r4,r6,r4
  80727c:	2884d83a 	srl	r2,r5,r2
  807280:	41ccb03a 	or	r6,r8,r7
  807284:	2008c03a 	cmpne	r4,r4,zero
  807288:	310cb03a 	or	r6,r6,r4
  80728c:	898dc83a 	sub	r6,r17,r6
  807290:	89a3803a 	cmpltu	r17,r17,r6
  807294:	1887c83a 	sub	r3,r3,r2
  807298:	1c47c83a 	sub	r3,r3,r17
  80729c:	3023883a 	mov	r17,r6
  8072a0:	1880202c 	andhi	r2,r3,128
  8072a4:	10002326 	beq	r2,zero,807334 <__subdf3+0x20c>
  8072a8:	04c02034 	movhi	r19,128
  8072ac:	9cffffc4 	addi	r19,r19,-1
  8072b0:	1ce6703a 	and	r19,r3,r19
  8072b4:	98007a26 	beq	r19,zero,8074a0 <__subdf3+0x378>
  8072b8:	9809883a 	mov	r4,r19
  8072bc:	08014b40 	call	8014b4 <__clzsi2>
  8072c0:	113ffe04 	addi	r4,r2,-8
  8072c4:	00c007c4 	movi	r3,31
  8072c8:	19007b16 	blt	r3,r4,8074b8 <__subdf3+0x390>
  8072cc:	00800804 	movi	r2,32
  8072d0:	1105c83a 	sub	r2,r2,r4
  8072d4:	8884d83a 	srl	r2,r17,r2
  8072d8:	9906983a 	sll	r3,r19,r4
  8072dc:	8922983a 	sll	r17,r17,r4
  8072e0:	10c4b03a 	or	r2,r2,r3
  8072e4:	24007816 	blt	r4,r16,8074c8 <__subdf3+0x3a0>
  8072e8:	2421c83a 	sub	r16,r4,r16
  8072ec:	80c00044 	addi	r3,r16,1
  8072f0:	010007c4 	movi	r4,31
  8072f4:	20c09516 	blt	r4,r3,80754c <__subdf3+0x424>
  8072f8:	01400804 	movi	r5,32
  8072fc:	28cbc83a 	sub	r5,r5,r3
  807300:	88c8d83a 	srl	r4,r17,r3
  807304:	8962983a 	sll	r17,r17,r5
  807308:	114a983a 	sll	r5,r2,r5
  80730c:	10c6d83a 	srl	r3,r2,r3
  807310:	8804c03a 	cmpne	r2,r17,zero
  807314:	290ab03a 	or	r5,r5,r4
  807318:	28a2b03a 	or	r17,r5,r2
  80731c:	0021883a 	mov	r16,zero
  807320:	003fa206 	br	8071ac <__alt_data_end+0xff8071ac>
  807324:	2090b03a 	or	r8,r4,r2
  807328:	40018e26 	beq	r8,zero,807964 <__subdf3+0x83c>
  80732c:	1007883a 	mov	r3,r2
  807330:	2023883a 	mov	r17,r4
  807334:	888001cc 	andi	r2,r17,7
  807338:	103f9e1e 	bne	r2,zero,8071b4 <__alt_data_end+0xff8071b4>
  80733c:	1804977a 	slli	r2,r3,29
  807340:	8822d0fa 	srli	r17,r17,3
  807344:	1810d0fa 	srli	r8,r3,3
  807348:	9100004c 	andi	r4,r18,1
  80734c:	1444b03a 	or	r2,r2,r17
  807350:	00c1ffc4 	movi	r3,2047
  807354:	80c02826 	beq	r16,r3,8073f8 <__subdf3+0x2d0>
  807358:	01400434 	movhi	r5,16
  80735c:	297fffc4 	addi	r5,r5,-1
  807360:	80e0703a 	and	r16,r16,r3
  807364:	414a703a 	and	r5,r8,r5
  807368:	003fa806 	br	80720c <__alt_data_end+0xff80720c>
  80736c:	0080630e 	bge	zero,r2,8074fc <__subdf3+0x3d4>
  807370:	48003026 	beq	r9,zero,807434 <__subdf3+0x30c>
  807374:	0101ffc4 	movi	r4,2047
  807378:	813f8c26 	beq	r16,r4,8071ac <__alt_data_end+0xff8071ac>
  80737c:	29402034 	orhi	r5,r5,128
  807380:	01000e04 	movi	r4,56
  807384:	2080a90e 	bge	r4,r2,80762c <__subdf3+0x504>
  807388:	298cb03a 	or	r6,r5,r6
  80738c:	3012c03a 	cmpne	r9,r6,zero
  807390:	0005883a 	mov	r2,zero
  807394:	4c53883a 	add	r9,r9,r17
  807398:	4c63803a 	cmpltu	r17,r9,r17
  80739c:	10c7883a 	add	r3,r2,r3
  8073a0:	88c7883a 	add	r3,r17,r3
  8073a4:	4823883a 	mov	r17,r9
  8073a8:	1880202c 	andhi	r2,r3,128
  8073ac:	1000d026 	beq	r2,zero,8076f0 <__subdf3+0x5c8>
  8073b0:	84000044 	addi	r16,r16,1
  8073b4:	0081ffc4 	movi	r2,2047
  8073b8:	8080fe26 	beq	r16,r2,8077b4 <__subdf3+0x68c>
  8073bc:	00bfe034 	movhi	r2,65408
  8073c0:	10bfffc4 	addi	r2,r2,-1
  8073c4:	1886703a 	and	r3,r3,r2
  8073c8:	880ad07a 	srli	r5,r17,1
  8073cc:	180497fa 	slli	r2,r3,31
  8073d0:	8900004c 	andi	r4,r17,1
  8073d4:	2922b03a 	or	r17,r5,r4
  8073d8:	1806d07a 	srli	r3,r3,1
  8073dc:	1462b03a 	or	r17,r2,r17
  8073e0:	3825883a 	mov	r18,r7
  8073e4:	003f7106 	br	8071ac <__alt_data_end+0xff8071ac>
  8073e8:	2984b03a 	or	r2,r5,r6
  8073ec:	103f6826 	beq	r2,zero,807190 <__alt_data_end+0xff807190>
  8073f0:	39c03fcc 	andi	r7,r7,255
  8073f4:	003f6706 	br	807194 <__alt_data_end+0xff807194>
  8073f8:	4086b03a 	or	r3,r8,r2
  8073fc:	18015226 	beq	r3,zero,807948 <__subdf3+0x820>
  807400:	00c00434 	movhi	r3,16
  807404:	41400234 	orhi	r5,r8,8
  807408:	18ffffc4 	addi	r3,r3,-1
  80740c:	28ca703a 	and	r5,r5,r3
  807410:	003f7e06 	br	80720c <__alt_data_end+0xff80720c>
  807414:	10bfffc4 	addi	r2,r2,-1
  807418:	1000491e 	bne	r2,zero,807540 <__subdf3+0x418>
  80741c:	898fc83a 	sub	r7,r17,r6
  807420:	89e3803a 	cmpltu	r17,r17,r7
  807424:	1947c83a 	sub	r3,r3,r5
  807428:	1c47c83a 	sub	r3,r3,r17
  80742c:	3823883a 	mov	r17,r7
  807430:	003f9b06 	br	8072a0 <__alt_data_end+0xff8072a0>
  807434:	2988b03a 	or	r4,r5,r6
  807438:	203f5c26 	beq	r4,zero,8071ac <__alt_data_end+0xff8071ac>
  80743c:	10bfffc4 	addi	r2,r2,-1
  807440:	1000931e 	bne	r2,zero,807690 <__subdf3+0x568>
  807444:	898d883a 	add	r6,r17,r6
  807448:	3463803a 	cmpltu	r17,r6,r17
  80744c:	1947883a 	add	r3,r3,r5
  807450:	88c7883a 	add	r3,r17,r3
  807454:	3023883a 	mov	r17,r6
  807458:	003fd306 	br	8073a8 <__alt_data_end+0xff8073a8>
  80745c:	1000541e 	bne	r2,zero,8075b0 <__subdf3+0x488>
  807460:	80800044 	addi	r2,r16,1
  807464:	1081ffcc 	andi	r2,r2,2047
  807468:	01000044 	movi	r4,1
  80746c:	2080a20e 	bge	r4,r2,8076f8 <__subdf3+0x5d0>
  807470:	8989c83a 	sub	r4,r17,r6
  807474:	8905803a 	cmpltu	r2,r17,r4
  807478:	1967c83a 	sub	r19,r3,r5
  80747c:	98a7c83a 	sub	r19,r19,r2
  807480:	9880202c 	andhi	r2,r19,128
  807484:	10006326 	beq	r2,zero,807614 <__subdf3+0x4ec>
  807488:	3463c83a 	sub	r17,r6,r17
  80748c:	28c7c83a 	sub	r3,r5,r3
  807490:	344d803a 	cmpltu	r6,r6,r17
  807494:	19a7c83a 	sub	r19,r3,r6
  807498:	3825883a 	mov	r18,r7
  80749c:	983f861e 	bne	r19,zero,8072b8 <__alt_data_end+0xff8072b8>
  8074a0:	8809883a 	mov	r4,r17
  8074a4:	08014b40 	call	8014b4 <__clzsi2>
  8074a8:	10800804 	addi	r2,r2,32
  8074ac:	113ffe04 	addi	r4,r2,-8
  8074b0:	00c007c4 	movi	r3,31
  8074b4:	193f850e 	bge	r3,r4,8072cc <__alt_data_end+0xff8072cc>
  8074b8:	10bff604 	addi	r2,r2,-40
  8074bc:	8884983a 	sll	r2,r17,r2
  8074c0:	0023883a 	mov	r17,zero
  8074c4:	243f880e 	bge	r4,r16,8072e8 <__alt_data_end+0xff8072e8>
  8074c8:	00ffe034 	movhi	r3,65408
  8074cc:	18ffffc4 	addi	r3,r3,-1
  8074d0:	8121c83a 	sub	r16,r16,r4
  8074d4:	10c6703a 	and	r3,r2,r3
  8074d8:	003f3406 	br	8071ac <__alt_data_end+0xff8071ac>
  8074dc:	9100004c 	andi	r4,r18,1
  8074e0:	000b883a 	mov	r5,zero
  8074e4:	0005883a 	mov	r2,zero
  8074e8:	003f4806 	br	80720c <__alt_data_end+0xff80720c>
  8074ec:	298cb03a 	or	r6,r5,r6
  8074f0:	300cc03a 	cmpne	r6,r6,zero
  8074f4:	0005883a 	mov	r2,zero
  8074f8:	003f6406 	br	80728c <__alt_data_end+0xff80728c>
  8074fc:	10009a1e 	bne	r2,zero,807768 <__subdf3+0x640>
  807500:	82400044 	addi	r9,r16,1
  807504:	4881ffcc 	andi	r2,r9,2047
  807508:	02800044 	movi	r10,1
  80750c:	5080670e 	bge	r10,r2,8076ac <__subdf3+0x584>
  807510:	0081ffc4 	movi	r2,2047
  807514:	4880af26 	beq	r9,r2,8077d4 <__subdf3+0x6ac>
  807518:	898d883a 	add	r6,r17,r6
  80751c:	1945883a 	add	r2,r3,r5
  807520:	3447803a 	cmpltu	r3,r6,r17
  807524:	1887883a 	add	r3,r3,r2
  807528:	182297fa 	slli	r17,r3,31
  80752c:	300cd07a 	srli	r6,r6,1
  807530:	1806d07a 	srli	r3,r3,1
  807534:	4821883a 	mov	r16,r9
  807538:	89a2b03a 	or	r17,r17,r6
  80753c:	003f1b06 	br	8071ac <__alt_data_end+0xff8071ac>
  807540:	0101ffc4 	movi	r4,2047
  807544:	813f441e 	bne	r16,r4,807258 <__alt_data_end+0xff807258>
  807548:	003f1806 	br	8071ac <__alt_data_end+0xff8071ac>
  80754c:	843ff844 	addi	r16,r16,-31
  807550:	01400804 	movi	r5,32
  807554:	1408d83a 	srl	r4,r2,r16
  807558:	19405026 	beq	r3,r5,80769c <__subdf3+0x574>
  80755c:	01401004 	movi	r5,64
  807560:	28c7c83a 	sub	r3,r5,r3
  807564:	10c4983a 	sll	r2,r2,r3
  807568:	88a2b03a 	or	r17,r17,r2
  80756c:	8822c03a 	cmpne	r17,r17,zero
  807570:	2462b03a 	or	r17,r4,r17
  807574:	0007883a 	mov	r3,zero
  807578:	0021883a 	mov	r16,zero
  80757c:	003f6d06 	br	807334 <__alt_data_end+0xff807334>
  807580:	11fff804 	addi	r7,r2,-32
  807584:	01000804 	movi	r4,32
  807588:	29ced83a 	srl	r7,r5,r7
  80758c:	11004526 	beq	r2,r4,8076a4 <__subdf3+0x57c>
  807590:	01001004 	movi	r4,64
  807594:	2089c83a 	sub	r4,r4,r2
  807598:	2904983a 	sll	r2,r5,r4
  80759c:	118cb03a 	or	r6,r2,r6
  8075a0:	300cc03a 	cmpne	r6,r6,zero
  8075a4:	398cb03a 	or	r6,r7,r6
  8075a8:	0005883a 	mov	r2,zero
  8075ac:	003f3706 	br	80728c <__alt_data_end+0xff80728c>
  8075b0:	80002a26 	beq	r16,zero,80765c <__subdf3+0x534>
  8075b4:	0101ffc4 	movi	r4,2047
  8075b8:	49006626 	beq	r9,r4,807754 <__subdf3+0x62c>
  8075bc:	0085c83a 	sub	r2,zero,r2
  8075c0:	18c02034 	orhi	r3,r3,128
  8075c4:	01000e04 	movi	r4,56
  8075c8:	20807e16 	blt	r4,r2,8077c4 <__subdf3+0x69c>
  8075cc:	010007c4 	movi	r4,31
  8075d0:	2080e716 	blt	r4,r2,807970 <__subdf3+0x848>
  8075d4:	01000804 	movi	r4,32
  8075d8:	2089c83a 	sub	r4,r4,r2
  8075dc:	1914983a 	sll	r10,r3,r4
  8075e0:	8890d83a 	srl	r8,r17,r2
  8075e4:	8908983a 	sll	r4,r17,r4
  8075e8:	1884d83a 	srl	r2,r3,r2
  8075ec:	5222b03a 	or	r17,r10,r8
  8075f0:	2006c03a 	cmpne	r3,r4,zero
  8075f4:	88e2b03a 	or	r17,r17,r3
  8075f8:	3463c83a 	sub	r17,r6,r17
  8075fc:	2885c83a 	sub	r2,r5,r2
  807600:	344d803a 	cmpltu	r6,r6,r17
  807604:	1187c83a 	sub	r3,r2,r6
  807608:	4821883a 	mov	r16,r9
  80760c:	3825883a 	mov	r18,r7
  807610:	003f2306 	br	8072a0 <__alt_data_end+0xff8072a0>
  807614:	24d0b03a 	or	r8,r4,r19
  807618:	40001b1e 	bne	r8,zero,807688 <__subdf3+0x560>
  80761c:	0005883a 	mov	r2,zero
  807620:	0009883a 	mov	r4,zero
  807624:	0021883a 	mov	r16,zero
  807628:	003f4906 	br	807350 <__alt_data_end+0xff807350>
  80762c:	010007c4 	movi	r4,31
  807630:	20803a16 	blt	r4,r2,80771c <__subdf3+0x5f4>
  807634:	01000804 	movi	r4,32
  807638:	2089c83a 	sub	r4,r4,r2
  80763c:	2912983a 	sll	r9,r5,r4
  807640:	3090d83a 	srl	r8,r6,r2
  807644:	3108983a 	sll	r4,r6,r4
  807648:	2884d83a 	srl	r2,r5,r2
  80764c:	4a12b03a 	or	r9,r9,r8
  807650:	2008c03a 	cmpne	r4,r4,zero
  807654:	4912b03a 	or	r9,r9,r4
  807658:	003f4e06 	br	807394 <__alt_data_end+0xff807394>
  80765c:	1c48b03a 	or	r4,r3,r17
  807660:	20003c26 	beq	r4,zero,807754 <__subdf3+0x62c>
  807664:	0084303a 	nor	r2,zero,r2
  807668:	1000381e 	bne	r2,zero,80774c <__subdf3+0x624>
  80766c:	3463c83a 	sub	r17,r6,r17
  807670:	28c5c83a 	sub	r2,r5,r3
  807674:	344d803a 	cmpltu	r6,r6,r17
  807678:	1187c83a 	sub	r3,r2,r6
  80767c:	4821883a 	mov	r16,r9
  807680:	3825883a 	mov	r18,r7
  807684:	003f0606 	br	8072a0 <__alt_data_end+0xff8072a0>
  807688:	2023883a 	mov	r17,r4
  80768c:	003f0906 	br	8072b4 <__alt_data_end+0xff8072b4>
  807690:	0101ffc4 	movi	r4,2047
  807694:	813f3a1e 	bne	r16,r4,807380 <__alt_data_end+0xff807380>
  807698:	003ec406 	br	8071ac <__alt_data_end+0xff8071ac>
  80769c:	0005883a 	mov	r2,zero
  8076a0:	003fb106 	br	807568 <__alt_data_end+0xff807568>
  8076a4:	0005883a 	mov	r2,zero
  8076a8:	003fbc06 	br	80759c <__alt_data_end+0xff80759c>
  8076ac:	1c44b03a 	or	r2,r3,r17
  8076b0:	80008e1e 	bne	r16,zero,8078ec <__subdf3+0x7c4>
  8076b4:	1000c826 	beq	r2,zero,8079d8 <__subdf3+0x8b0>
  8076b8:	2984b03a 	or	r2,r5,r6
  8076bc:	103ebb26 	beq	r2,zero,8071ac <__alt_data_end+0xff8071ac>
  8076c0:	8989883a 	add	r4,r17,r6
  8076c4:	1945883a 	add	r2,r3,r5
  8076c8:	2447803a 	cmpltu	r3,r4,r17
  8076cc:	1887883a 	add	r3,r3,r2
  8076d0:	1880202c 	andhi	r2,r3,128
  8076d4:	2023883a 	mov	r17,r4
  8076d8:	103f1626 	beq	r2,zero,807334 <__alt_data_end+0xff807334>
  8076dc:	00bfe034 	movhi	r2,65408
  8076e0:	10bfffc4 	addi	r2,r2,-1
  8076e4:	5021883a 	mov	r16,r10
  8076e8:	1886703a 	and	r3,r3,r2
  8076ec:	003eaf06 	br	8071ac <__alt_data_end+0xff8071ac>
  8076f0:	3825883a 	mov	r18,r7
  8076f4:	003f0f06 	br	807334 <__alt_data_end+0xff807334>
  8076f8:	1c44b03a 	or	r2,r3,r17
  8076fc:	8000251e 	bne	r16,zero,807794 <__subdf3+0x66c>
  807700:	1000661e 	bne	r2,zero,80789c <__subdf3+0x774>
  807704:	2990b03a 	or	r8,r5,r6
  807708:	40009626 	beq	r8,zero,807964 <__subdf3+0x83c>
  80770c:	2807883a 	mov	r3,r5
  807710:	3023883a 	mov	r17,r6
  807714:	3825883a 	mov	r18,r7
  807718:	003ea406 	br	8071ac <__alt_data_end+0xff8071ac>
  80771c:	127ff804 	addi	r9,r2,-32
  807720:	01000804 	movi	r4,32
  807724:	2a52d83a 	srl	r9,r5,r9
  807728:	11008c26 	beq	r2,r4,80795c <__subdf3+0x834>
  80772c:	01001004 	movi	r4,64
  807730:	2085c83a 	sub	r2,r4,r2
  807734:	2884983a 	sll	r2,r5,r2
  807738:	118cb03a 	or	r6,r2,r6
  80773c:	300cc03a 	cmpne	r6,r6,zero
  807740:	4992b03a 	or	r9,r9,r6
  807744:	0005883a 	mov	r2,zero
  807748:	003f1206 	br	807394 <__alt_data_end+0xff807394>
  80774c:	0101ffc4 	movi	r4,2047
  807750:	493f9c1e 	bne	r9,r4,8075c4 <__alt_data_end+0xff8075c4>
  807754:	2807883a 	mov	r3,r5
  807758:	3023883a 	mov	r17,r6
  80775c:	4821883a 	mov	r16,r9
  807760:	3825883a 	mov	r18,r7
  807764:	003e9106 	br	8071ac <__alt_data_end+0xff8071ac>
  807768:	80001f1e 	bne	r16,zero,8077e8 <__subdf3+0x6c0>
  80776c:	1c48b03a 	or	r4,r3,r17
  807770:	20005a26 	beq	r4,zero,8078dc <__subdf3+0x7b4>
  807774:	0084303a 	nor	r2,zero,r2
  807778:	1000561e 	bne	r2,zero,8078d4 <__subdf3+0x7ac>
  80777c:	89a3883a 	add	r17,r17,r6
  807780:	1945883a 	add	r2,r3,r5
  807784:	898d803a 	cmpltu	r6,r17,r6
  807788:	3087883a 	add	r3,r6,r2
  80778c:	4821883a 	mov	r16,r9
  807790:	003f0506 	br	8073a8 <__alt_data_end+0xff8073a8>
  807794:	10002b1e 	bne	r2,zero,807844 <__subdf3+0x71c>
  807798:	2984b03a 	or	r2,r5,r6
  80779c:	10008026 	beq	r2,zero,8079a0 <__subdf3+0x878>
  8077a0:	2807883a 	mov	r3,r5
  8077a4:	3023883a 	mov	r17,r6
  8077a8:	3825883a 	mov	r18,r7
  8077ac:	0401ffc4 	movi	r16,2047
  8077b0:	003e7e06 	br	8071ac <__alt_data_end+0xff8071ac>
  8077b4:	3809883a 	mov	r4,r7
  8077b8:	0011883a 	mov	r8,zero
  8077bc:	0005883a 	mov	r2,zero
  8077c0:	003ee306 	br	807350 <__alt_data_end+0xff807350>
  8077c4:	1c62b03a 	or	r17,r3,r17
  8077c8:	8822c03a 	cmpne	r17,r17,zero
  8077cc:	0005883a 	mov	r2,zero
  8077d0:	003f8906 	br	8075f8 <__alt_data_end+0xff8075f8>
  8077d4:	3809883a 	mov	r4,r7
  8077d8:	4821883a 	mov	r16,r9
  8077dc:	0011883a 	mov	r8,zero
  8077e0:	0005883a 	mov	r2,zero
  8077e4:	003eda06 	br	807350 <__alt_data_end+0xff807350>
  8077e8:	0101ffc4 	movi	r4,2047
  8077ec:	49003b26 	beq	r9,r4,8078dc <__subdf3+0x7b4>
  8077f0:	0085c83a 	sub	r2,zero,r2
  8077f4:	18c02034 	orhi	r3,r3,128
  8077f8:	01000e04 	movi	r4,56
  8077fc:	20806e16 	blt	r4,r2,8079b8 <__subdf3+0x890>
  807800:	010007c4 	movi	r4,31
  807804:	20807716 	blt	r4,r2,8079e4 <__subdf3+0x8bc>
  807808:	01000804 	movi	r4,32
  80780c:	2089c83a 	sub	r4,r4,r2
  807810:	1914983a 	sll	r10,r3,r4
  807814:	8890d83a 	srl	r8,r17,r2
  807818:	8908983a 	sll	r4,r17,r4
  80781c:	1884d83a 	srl	r2,r3,r2
  807820:	5222b03a 	or	r17,r10,r8
  807824:	2006c03a 	cmpne	r3,r4,zero
  807828:	88e2b03a 	or	r17,r17,r3
  80782c:	89a3883a 	add	r17,r17,r6
  807830:	1145883a 	add	r2,r2,r5
  807834:	898d803a 	cmpltu	r6,r17,r6
  807838:	3087883a 	add	r3,r6,r2
  80783c:	4821883a 	mov	r16,r9
  807840:	003ed906 	br	8073a8 <__alt_data_end+0xff8073a8>
  807844:	2984b03a 	or	r2,r5,r6
  807848:	10004226 	beq	r2,zero,807954 <__subdf3+0x82c>
  80784c:	1808d0fa 	srli	r4,r3,3
  807850:	8822d0fa 	srli	r17,r17,3
  807854:	1806977a 	slli	r3,r3,29
  807858:	2080022c 	andhi	r2,r4,8
  80785c:	1c62b03a 	or	r17,r3,r17
  807860:	10000826 	beq	r2,zero,807884 <__subdf3+0x75c>
  807864:	2812d0fa 	srli	r9,r5,3
  807868:	4880022c 	andhi	r2,r9,8
  80786c:	1000051e 	bne	r2,zero,807884 <__subdf3+0x75c>
  807870:	300cd0fa 	srli	r6,r6,3
  807874:	2804977a 	slli	r2,r5,29
  807878:	4809883a 	mov	r4,r9
  80787c:	3825883a 	mov	r18,r7
  807880:	11a2b03a 	or	r17,r2,r6
  807884:	8806d77a 	srli	r3,r17,29
  807888:	200890fa 	slli	r4,r4,3
  80788c:	882290fa 	slli	r17,r17,3
  807890:	0401ffc4 	movi	r16,2047
  807894:	1906b03a 	or	r3,r3,r4
  807898:	003e4406 	br	8071ac <__alt_data_end+0xff8071ac>
  80789c:	2984b03a 	or	r2,r5,r6
  8078a0:	103e4226 	beq	r2,zero,8071ac <__alt_data_end+0xff8071ac>
  8078a4:	8989c83a 	sub	r4,r17,r6
  8078a8:	8911803a 	cmpltu	r8,r17,r4
  8078ac:	1945c83a 	sub	r2,r3,r5
  8078b0:	1205c83a 	sub	r2,r2,r8
  8078b4:	1200202c 	andhi	r8,r2,128
  8078b8:	403e9a26 	beq	r8,zero,807324 <__alt_data_end+0xff807324>
  8078bc:	3463c83a 	sub	r17,r6,r17
  8078c0:	28c5c83a 	sub	r2,r5,r3
  8078c4:	344d803a 	cmpltu	r6,r6,r17
  8078c8:	1187c83a 	sub	r3,r2,r6
  8078cc:	3825883a 	mov	r18,r7
  8078d0:	003e3606 	br	8071ac <__alt_data_end+0xff8071ac>
  8078d4:	0101ffc4 	movi	r4,2047
  8078d8:	493fc71e 	bne	r9,r4,8077f8 <__alt_data_end+0xff8077f8>
  8078dc:	2807883a 	mov	r3,r5
  8078e0:	3023883a 	mov	r17,r6
  8078e4:	4821883a 	mov	r16,r9
  8078e8:	003e3006 	br	8071ac <__alt_data_end+0xff8071ac>
  8078ec:	10003626 	beq	r2,zero,8079c8 <__subdf3+0x8a0>
  8078f0:	2984b03a 	or	r2,r5,r6
  8078f4:	10001726 	beq	r2,zero,807954 <__subdf3+0x82c>
  8078f8:	1808d0fa 	srli	r4,r3,3
  8078fc:	8822d0fa 	srli	r17,r17,3
  807900:	1806977a 	slli	r3,r3,29
  807904:	2080022c 	andhi	r2,r4,8
  807908:	1c62b03a 	or	r17,r3,r17
  80790c:	10000726 	beq	r2,zero,80792c <__subdf3+0x804>
  807910:	2812d0fa 	srli	r9,r5,3
  807914:	4880022c 	andhi	r2,r9,8
  807918:	1000041e 	bne	r2,zero,80792c <__subdf3+0x804>
  80791c:	300cd0fa 	srli	r6,r6,3
  807920:	2804977a 	slli	r2,r5,29
  807924:	4809883a 	mov	r4,r9
  807928:	11a2b03a 	or	r17,r2,r6
  80792c:	8806d77a 	srli	r3,r17,29
  807930:	200890fa 	slli	r4,r4,3
  807934:	882290fa 	slli	r17,r17,3
  807938:	3825883a 	mov	r18,r7
  80793c:	1906b03a 	or	r3,r3,r4
  807940:	0401ffc4 	movi	r16,2047
  807944:	003e1906 	br	8071ac <__alt_data_end+0xff8071ac>
  807948:	000b883a 	mov	r5,zero
  80794c:	0005883a 	mov	r2,zero
  807950:	003e2e06 	br	80720c <__alt_data_end+0xff80720c>
  807954:	0401ffc4 	movi	r16,2047
  807958:	003e1406 	br	8071ac <__alt_data_end+0xff8071ac>
  80795c:	0005883a 	mov	r2,zero
  807960:	003f7506 	br	807738 <__alt_data_end+0xff807738>
  807964:	0005883a 	mov	r2,zero
  807968:	0009883a 	mov	r4,zero
  80796c:	003e7806 	br	807350 <__alt_data_end+0xff807350>
  807970:	123ff804 	addi	r8,r2,-32
  807974:	01000804 	movi	r4,32
  807978:	1a10d83a 	srl	r8,r3,r8
  80797c:	11002526 	beq	r2,r4,807a14 <__subdf3+0x8ec>
  807980:	01001004 	movi	r4,64
  807984:	2085c83a 	sub	r2,r4,r2
  807988:	1884983a 	sll	r2,r3,r2
  80798c:	1444b03a 	or	r2,r2,r17
  807990:	1004c03a 	cmpne	r2,r2,zero
  807994:	40a2b03a 	or	r17,r8,r2
  807998:	0005883a 	mov	r2,zero
  80799c:	003f1606 	br	8075f8 <__alt_data_end+0xff8075f8>
  8079a0:	02000434 	movhi	r8,16
  8079a4:	0009883a 	mov	r4,zero
  8079a8:	423fffc4 	addi	r8,r8,-1
  8079ac:	00bfffc4 	movi	r2,-1
  8079b0:	0401ffc4 	movi	r16,2047
  8079b4:	003e6606 	br	807350 <__alt_data_end+0xff807350>
  8079b8:	1c62b03a 	or	r17,r3,r17
  8079bc:	8822c03a 	cmpne	r17,r17,zero
  8079c0:	0005883a 	mov	r2,zero
  8079c4:	003f9906 	br	80782c <__alt_data_end+0xff80782c>
  8079c8:	2807883a 	mov	r3,r5
  8079cc:	3023883a 	mov	r17,r6
  8079d0:	0401ffc4 	movi	r16,2047
  8079d4:	003df506 	br	8071ac <__alt_data_end+0xff8071ac>
  8079d8:	2807883a 	mov	r3,r5
  8079dc:	3023883a 	mov	r17,r6
  8079e0:	003df206 	br	8071ac <__alt_data_end+0xff8071ac>
  8079e4:	123ff804 	addi	r8,r2,-32
  8079e8:	01000804 	movi	r4,32
  8079ec:	1a10d83a 	srl	r8,r3,r8
  8079f0:	11000a26 	beq	r2,r4,807a1c <__subdf3+0x8f4>
  8079f4:	01001004 	movi	r4,64
  8079f8:	2085c83a 	sub	r2,r4,r2
  8079fc:	1884983a 	sll	r2,r3,r2
  807a00:	1444b03a 	or	r2,r2,r17
  807a04:	1004c03a 	cmpne	r2,r2,zero
  807a08:	40a2b03a 	or	r17,r8,r2
  807a0c:	0005883a 	mov	r2,zero
  807a10:	003f8606 	br	80782c <__alt_data_end+0xff80782c>
  807a14:	0005883a 	mov	r2,zero
  807a18:	003fdc06 	br	80798c <__alt_data_end+0xff80798c>
  807a1c:	0005883a 	mov	r2,zero
  807a20:	003ff706 	br	807a00 <__alt_data_end+0xff807a00>

00807a24 <__fixdfsi>:
  807a24:	280cd53a 	srli	r6,r5,20
  807a28:	00c00434 	movhi	r3,16
  807a2c:	18ffffc4 	addi	r3,r3,-1
  807a30:	3181ffcc 	andi	r6,r6,2047
  807a34:	01c0ff84 	movi	r7,1022
  807a38:	28c6703a 	and	r3,r5,r3
  807a3c:	280ad7fa 	srli	r5,r5,31
  807a40:	3980120e 	bge	r7,r6,807a8c <__fixdfsi+0x68>
  807a44:	00810744 	movi	r2,1053
  807a48:	11800c16 	blt	r2,r6,807a7c <__fixdfsi+0x58>
  807a4c:	00810cc4 	movi	r2,1075
  807a50:	1185c83a 	sub	r2,r2,r6
  807a54:	01c007c4 	movi	r7,31
  807a58:	18c00434 	orhi	r3,r3,16
  807a5c:	38800d16 	blt	r7,r2,807a94 <__fixdfsi+0x70>
  807a60:	31befb44 	addi	r6,r6,-1043
  807a64:	2084d83a 	srl	r2,r4,r2
  807a68:	1986983a 	sll	r3,r3,r6
  807a6c:	1884b03a 	or	r2,r3,r2
  807a70:	28000726 	beq	r5,zero,807a90 <__fixdfsi+0x6c>
  807a74:	0085c83a 	sub	r2,zero,r2
  807a78:	f800283a 	ret
  807a7c:	00a00034 	movhi	r2,32768
  807a80:	10bfffc4 	addi	r2,r2,-1
  807a84:	2885883a 	add	r2,r5,r2
  807a88:	f800283a 	ret
  807a8c:	0005883a 	mov	r2,zero
  807a90:	f800283a 	ret
  807a94:	008104c4 	movi	r2,1043
  807a98:	1185c83a 	sub	r2,r2,r6
  807a9c:	1884d83a 	srl	r2,r3,r2
  807aa0:	003ff306 	br	807a70 <__alt_data_end+0xff807a70>

00807aa4 <__floatunsidf>:
  807aa4:	defffe04 	addi	sp,sp,-8
  807aa8:	dc000015 	stw	r16,0(sp)
  807aac:	dfc00115 	stw	ra,4(sp)
  807ab0:	2021883a 	mov	r16,r4
  807ab4:	20002226 	beq	r4,zero,807b40 <__floatunsidf+0x9c>
  807ab8:	08014b40 	call	8014b4 <__clzsi2>
  807abc:	01010784 	movi	r4,1054
  807ac0:	2089c83a 	sub	r4,r4,r2
  807ac4:	01810cc4 	movi	r6,1075
  807ac8:	310dc83a 	sub	r6,r6,r4
  807acc:	00c007c4 	movi	r3,31
  807ad0:	1980120e 	bge	r3,r6,807b1c <__floatunsidf+0x78>
  807ad4:	00c104c4 	movi	r3,1043
  807ad8:	1907c83a 	sub	r3,r3,r4
  807adc:	80ca983a 	sll	r5,r16,r3
  807ae0:	00800434 	movhi	r2,16
  807ae4:	10bfffc4 	addi	r2,r2,-1
  807ae8:	2101ffcc 	andi	r4,r4,2047
  807aec:	0021883a 	mov	r16,zero
  807af0:	288a703a 	and	r5,r5,r2
  807af4:	2008953a 	slli	r4,r4,20
  807af8:	00c00434 	movhi	r3,16
  807afc:	18ffffc4 	addi	r3,r3,-1
  807b00:	28c6703a 	and	r3,r5,r3
  807b04:	8005883a 	mov	r2,r16
  807b08:	1906b03a 	or	r3,r3,r4
  807b0c:	dfc00117 	ldw	ra,4(sp)
  807b10:	dc000017 	ldw	r16,0(sp)
  807b14:	dec00204 	addi	sp,sp,8
  807b18:	f800283a 	ret
  807b1c:	00c002c4 	movi	r3,11
  807b20:	188bc83a 	sub	r5,r3,r2
  807b24:	814ad83a 	srl	r5,r16,r5
  807b28:	00c00434 	movhi	r3,16
  807b2c:	18ffffc4 	addi	r3,r3,-1
  807b30:	81a0983a 	sll	r16,r16,r6
  807b34:	2101ffcc 	andi	r4,r4,2047
  807b38:	28ca703a 	and	r5,r5,r3
  807b3c:	003fed06 	br	807af4 <__alt_data_end+0xff807af4>
  807b40:	0009883a 	mov	r4,zero
  807b44:	000b883a 	mov	r5,zero
  807b48:	003fea06 	br	807af4 <__alt_data_end+0xff807af4>

00807b4c <__extendsfdf2>:
  807b4c:	200ad5fa 	srli	r5,r4,23
  807b50:	defffd04 	addi	sp,sp,-12
  807b54:	dc400115 	stw	r17,4(sp)
  807b58:	29403fcc 	andi	r5,r5,255
  807b5c:	29800044 	addi	r6,r5,1
  807b60:	04402034 	movhi	r17,128
  807b64:	dc000015 	stw	r16,0(sp)
  807b68:	8c7fffc4 	addi	r17,r17,-1
  807b6c:	dfc00215 	stw	ra,8(sp)
  807b70:	31803fcc 	andi	r6,r6,255
  807b74:	00800044 	movi	r2,1
  807b78:	8922703a 	and	r17,r17,r4
  807b7c:	2020d7fa 	srli	r16,r4,31
  807b80:	1180110e 	bge	r2,r6,807bc8 <__extendsfdf2+0x7c>
  807b84:	880cd0fa 	srli	r6,r17,3
  807b88:	8822977a 	slli	r17,r17,29
  807b8c:	2940e004 	addi	r5,r5,896
  807b90:	2941ffcc 	andi	r5,r5,2047
  807b94:	2804953a 	slli	r2,r5,20
  807b98:	01400434 	movhi	r5,16
  807b9c:	800697fa 	slli	r3,r16,31
  807ba0:	297fffc4 	addi	r5,r5,-1
  807ba4:	314a703a 	and	r5,r6,r5
  807ba8:	288ab03a 	or	r5,r5,r2
  807bac:	28c6b03a 	or	r3,r5,r3
  807bb0:	8805883a 	mov	r2,r17
  807bb4:	dfc00217 	ldw	ra,8(sp)
  807bb8:	dc400117 	ldw	r17,4(sp)
  807bbc:	dc000017 	ldw	r16,0(sp)
  807bc0:	dec00304 	addi	sp,sp,12
  807bc4:	f800283a 	ret
  807bc8:	2800111e 	bne	r5,zero,807c10 <__extendsfdf2+0xc4>
  807bcc:	88001c26 	beq	r17,zero,807c40 <__extendsfdf2+0xf4>
  807bd0:	8809883a 	mov	r4,r17
  807bd4:	08014b40 	call	8014b4 <__clzsi2>
  807bd8:	00c00284 	movi	r3,10
  807bdc:	18801b16 	blt	r3,r2,807c4c <__extendsfdf2+0x100>
  807be0:	018002c4 	movi	r6,11
  807be4:	308dc83a 	sub	r6,r6,r2
  807be8:	11000544 	addi	r4,r2,21
  807bec:	8986d83a 	srl	r3,r17,r6
  807bf0:	8922983a 	sll	r17,r17,r4
  807bf4:	0180e244 	movi	r6,905
  807bf8:	01400434 	movhi	r5,16
  807bfc:	3085c83a 	sub	r2,r6,r2
  807c00:	297fffc4 	addi	r5,r5,-1
  807c04:	194c703a 	and	r6,r3,r5
  807c08:	1141ffcc 	andi	r5,r2,2047
  807c0c:	003fe006 	br	807b90 <__alt_data_end+0xff807b90>
  807c10:	88000826 	beq	r17,zero,807c34 <__extendsfdf2+0xe8>
  807c14:	880cd0fa 	srli	r6,r17,3
  807c18:	00800434 	movhi	r2,16
  807c1c:	10bfffc4 	addi	r2,r2,-1
  807c20:	31800234 	orhi	r6,r6,8
  807c24:	8822977a 	slli	r17,r17,29
  807c28:	308c703a 	and	r6,r6,r2
  807c2c:	0141ffc4 	movi	r5,2047
  807c30:	003fd706 	br	807b90 <__alt_data_end+0xff807b90>
  807c34:	0141ffc4 	movi	r5,2047
  807c38:	000d883a 	mov	r6,zero
  807c3c:	003fd406 	br	807b90 <__alt_data_end+0xff807b90>
  807c40:	000b883a 	mov	r5,zero
  807c44:	000d883a 	mov	r6,zero
  807c48:	003fd106 	br	807b90 <__alt_data_end+0xff807b90>
  807c4c:	11bffd44 	addi	r6,r2,-11
  807c50:	8986983a 	sll	r3,r17,r6
  807c54:	0023883a 	mov	r17,zero
  807c58:	003fe606 	br	807bf4 <__alt_data_end+0xff807bf4>

00807c5c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  807c5c:	defffc04 	addi	sp,sp,-16
  807c60:	df000315 	stw	fp,12(sp)
  807c64:	df000304 	addi	fp,sp,12
  807c68:	e13ffd15 	stw	r4,-12(fp)
  807c6c:	e17ffe15 	stw	r5,-8(fp)
  807c70:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  807c74:	e0fffe17 	ldw	r3,-8(fp)
  807c78:	e0bffd17 	ldw	r2,-12(fp)
  807c7c:	18800c26 	beq	r3,r2,807cb0 <alt_load_section+0x54>
  {
    while( to != end )
  807c80:	00000806 	br	807ca4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  807c84:	e0bffe17 	ldw	r2,-8(fp)
  807c88:	10c00104 	addi	r3,r2,4
  807c8c:	e0fffe15 	stw	r3,-8(fp)
  807c90:	e0fffd17 	ldw	r3,-12(fp)
  807c94:	19000104 	addi	r4,r3,4
  807c98:	e13ffd15 	stw	r4,-12(fp)
  807c9c:	18c00017 	ldw	r3,0(r3)
  807ca0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807ca4:	e0fffe17 	ldw	r3,-8(fp)
  807ca8:	e0bfff17 	ldw	r2,-4(fp)
  807cac:	18bff51e 	bne	r3,r2,807c84 <__alt_data_end+0xff807c84>
    {
      *to++ = *from++;
    }
  }
}
  807cb0:	0001883a 	nop
  807cb4:	e037883a 	mov	sp,fp
  807cb8:	df000017 	ldw	fp,0(sp)
  807cbc:	dec00104 	addi	sp,sp,4
  807cc0:	f800283a 	ret

00807cc4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  807cc4:	defffe04 	addi	sp,sp,-8
  807cc8:	dfc00115 	stw	ra,4(sp)
  807ccc:	df000015 	stw	fp,0(sp)
  807cd0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807cd4:	01802074 	movhi	r6,129
  807cd8:	31a6fb04 	addi	r6,r6,-25620
  807cdc:	01402074 	movhi	r5,129
  807ce0:	29664204 	addi	r5,r5,-26360
  807ce4:	01002074 	movhi	r4,129
  807ce8:	2126fb04 	addi	r4,r4,-25620
  807cec:	0807c5c0 	call	807c5c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807cf0:	01802034 	movhi	r6,128
  807cf4:	31807004 	addi	r6,r6,448
  807cf8:	01402034 	movhi	r5,128
  807cfc:	29400804 	addi	r5,r5,32
  807d00:	01002034 	movhi	r4,128
  807d04:	21000804 	addi	r4,r4,32
  807d08:	0807c5c0 	call	807c5c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  807d0c:	01802074 	movhi	r6,129
  807d10:	31a64204 	addi	r6,r6,-26360
  807d14:	01402074 	movhi	r5,129
  807d18:	29658104 	addi	r5,r5,-27132
  807d1c:	01002074 	movhi	r4,129
  807d20:	21258104 	addi	r4,r4,-27132
  807d24:	0807c5c0 	call	807c5c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  807d28:	08085fc0 	call	8085fc <alt_dcache_flush_all>
  alt_icache_flush_all();
  807d2c:	080873c0 	call	80873c <alt_icache_flush_all>
}
  807d30:	0001883a 	nop
  807d34:	e037883a 	mov	sp,fp
  807d38:	dfc00117 	ldw	ra,4(sp)
  807d3c:	df000017 	ldw	fp,0(sp)
  807d40:	dec00204 	addi	sp,sp,8
  807d44:	f800283a 	ret

00807d48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  807d48:	defffd04 	addi	sp,sp,-12
  807d4c:	dfc00215 	stw	ra,8(sp)
  807d50:	df000115 	stw	fp,4(sp)
  807d54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  807d58:	0009883a 	mov	r4,zero
  807d5c:	08081080 	call	808108 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  807d60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  807d64:	08081400 	call	808140 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  807d68:	01802074 	movhi	r6,129
  807d6c:	31a63704 	addi	r6,r6,-26404
  807d70:	01402074 	movhi	r5,129
  807d74:	29663704 	addi	r5,r5,-26404
  807d78:	01002074 	movhi	r4,129
  807d7c:	21263704 	addi	r4,r4,-26404
  807d80:	0808b240 	call	808b24 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  807d84:	d0a0c817 	ldw	r2,-31968(gp)
  807d88:	d0e0c917 	ldw	r3,-31964(gp)
  807d8c:	d120ca17 	ldw	r4,-31960(gp)
  807d90:	200d883a 	mov	r6,r4
  807d94:	180b883a 	mov	r5,r3
  807d98:	1009883a 	mov	r4,r2
  807d9c:	08003cc0 	call	8003cc <main>
  807da0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  807da4:	01000044 	movi	r4,1
  807da8:	08085240 	call	808524 <close>
  exit (result);
  807dac:	e13fff17 	ldw	r4,-4(fp)
  807db0:	08093980 	call	809398 <exit>

00807db4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  807db4:	defffd04 	addi	sp,sp,-12
  807db8:	dfc00215 	stw	ra,8(sp)
  807dbc:	df000115 	stw	fp,4(sp)
  807dc0:	df000104 	addi	fp,sp,4
  807dc4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  807dc8:	00802074 	movhi	r2,129
  807dcc:	10a6f004 	addi	r2,r2,-25664
  807dd0:	10800017 	ldw	r2,0(r2)
  807dd4:	10800217 	ldw	r2,8(r2)
  807dd8:	100b883a 	mov	r5,r2
  807ddc:	e13fff17 	ldw	r4,-4(fp)
  807de0:	08093b80 	call	8093b8 <fputs>
#endif
#endif
}
  807de4:	e037883a 	mov	sp,fp
  807de8:	dfc00117 	ldw	ra,4(sp)
  807dec:	df000017 	ldw	fp,0(sp)
  807df0:	dec00204 	addi	sp,sp,8
  807df4:	f800283a 	ret

00807df8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  807df8:	defff904 	addi	sp,sp,-28
  807dfc:	df000615 	stw	fp,24(sp)
  807e00:	df000604 	addi	fp,sp,24
  807e04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e08:	0005303a 	rdctl	r2,status
  807e0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e10:	e0fffe17 	ldw	r3,-8(fp)
  807e14:	00bfff84 	movi	r2,-2
  807e18:	1884703a 	and	r2,r3,r2
  807e1c:	1001703a 	wrctl	status,r2
  
  return context;
  807e20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  807e24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807e28:	d0a00217 	ldw	r2,-32760(gp)
  807e2c:	10c000c4 	addi	r3,r2,3
  807e30:	00bfff04 	movi	r2,-4
  807e34:	1884703a 	and	r2,r3,r2
  807e38:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807e3c:	d0e00217 	ldw	r3,-32760(gp)
  807e40:	e0bfff17 	ldw	r2,-4(fp)
  807e44:	1887883a 	add	r3,r3,r2
  807e48:	00804034 	movhi	r2,256
  807e4c:	10800004 	addi	r2,r2,0
  807e50:	10c0062e 	bgeu	r2,r3,807e6c <sbrk+0x74>
  807e54:	e0bffb17 	ldw	r2,-20(fp)
  807e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e5c:	e0bffa17 	ldw	r2,-24(fp)
  807e60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  807e64:	00bfffc4 	movi	r2,-1
  807e68:	00000b06 	br	807e98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  807e6c:	d0a00217 	ldw	r2,-32760(gp)
  807e70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  807e74:	d0e00217 	ldw	r3,-32760(gp)
  807e78:	e0bfff17 	ldw	r2,-4(fp)
  807e7c:	1885883a 	add	r2,r3,r2
  807e80:	d0a00215 	stw	r2,-32760(gp)
  807e84:	e0bffb17 	ldw	r2,-20(fp)
  807e88:	e0bffc15 	stw	r2,-16(fp)
  807e8c:	e0bffc17 	ldw	r2,-16(fp)
  807e90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  807e94:	e0bffd17 	ldw	r2,-12(fp)
} 
  807e98:	e037883a 	mov	sp,fp
  807e9c:	df000017 	ldw	fp,0(sp)
  807ea0:	dec00104 	addi	sp,sp,4
  807ea4:	f800283a 	ret

00807ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807ea8:	defffe04 	addi	sp,sp,-8
  807eac:	dfc00115 	stw	ra,4(sp)
  807eb0:	df000015 	stw	fp,0(sp)
  807eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  807eb8:	00802074 	movhi	r2,129
  807ebc:	10a6f704 	addi	r2,r2,-25636
  807ec0:	10800017 	ldw	r2,0(r2)
  807ec4:	10000526 	beq	r2,zero,807edc <alt_get_errno+0x34>
  807ec8:	00802074 	movhi	r2,129
  807ecc:	10a6f704 	addi	r2,r2,-25636
  807ed0:	10800017 	ldw	r2,0(r2)
  807ed4:	103ee83a 	callr	r2
  807ed8:	00000206 	br	807ee4 <alt_get_errno+0x3c>
  807edc:	00802074 	movhi	r2,129
  807ee0:	10a7b604 	addi	r2,r2,-24872
}
  807ee4:	e037883a 	mov	sp,fp
  807ee8:	dfc00117 	ldw	ra,4(sp)
  807eec:	df000017 	ldw	fp,0(sp)
  807ef0:	dec00204 	addi	sp,sp,8
  807ef4:	f800283a 	ret

00807ef8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  807ef8:	defffc04 	addi	sp,sp,-16
  807efc:	dfc00315 	stw	ra,12(sp)
  807f00:	df000215 	stw	fp,8(sp)
  807f04:	df000204 	addi	fp,sp,8
  807f08:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  807f0c:	00802074 	movhi	r2,129
  807f10:	10a7bc04 	addi	r2,r2,-24848
  807f14:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  807f18:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  807f1c:	00802074 	movhi	r2,129
  807f20:	10a7bb04 	addi	r2,r2,-24852
  807f24:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  807f28:	1000061e 	bne	r2,zero,807f44 <times+0x4c>
  {
    ALT_ERRNO = ENOSYS;
  807f2c:	0807ea80 	call	807ea8 <alt_get_errno>
  807f30:	1007883a 	mov	r3,r2
  807f34:	00801604 	movi	r2,88
  807f38:	18800015 	stw	r2,0(r3)
    return 0;
  807f3c:	0005883a 	mov	r2,zero
  807f40:	00000a06 	br	807f6c <times+0x74>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  807f44:	e0bfff17 	ldw	r2,-4(fp)
  807f48:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  807f4c:	e0bfff17 	ldw	r2,-4(fp)
  807f50:	e0fffe17 	ldw	r3,-8(fp)
  807f54:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  807f58:	e0bfff17 	ldw	r2,-4(fp)
  807f5c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  807f60:	e0bfff17 	ldw	r2,-4(fp)
  807f64:	10000315 	stw	zero,12(r2)

  return ticks;
  807f68:	e0bffe17 	ldw	r2,-8(fp)
}
  807f6c:	e037883a 	mov	sp,fp
  807f70:	dfc00117 	ldw	ra,4(sp)
  807f74:	df000017 	ldw	fp,0(sp)
  807f78:	dec00204 	addi	sp,sp,8
  807f7c:	f800283a 	ret

00807f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807f80:	defffe04 	addi	sp,sp,-8
  807f84:	dfc00115 	stw	ra,4(sp)
  807f88:	df000015 	stw	fp,0(sp)
  807f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  807f90:	00802074 	movhi	r2,129
  807f94:	10a6f704 	addi	r2,r2,-25636
  807f98:	10800017 	ldw	r2,0(r2)
  807f9c:	10000526 	beq	r2,zero,807fb4 <alt_get_errno+0x34>
  807fa0:	00802074 	movhi	r2,129
  807fa4:	10a6f704 	addi	r2,r2,-25636
  807fa8:	10800017 	ldw	r2,0(r2)
  807fac:	103ee83a 	callr	r2
  807fb0:	00000206 	br	807fbc <alt_get_errno+0x3c>
  807fb4:	00802074 	movhi	r2,129
  807fb8:	10a7b604 	addi	r2,r2,-24872
}
  807fbc:	e037883a 	mov	sp,fp
  807fc0:	dfc00117 	ldw	ra,4(sp)
  807fc4:	df000017 	ldw	fp,0(sp)
  807fc8:	dec00204 	addi	sp,sp,8
  807fcc:	f800283a 	ret

00807fd0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  807fd0:	defff904 	addi	sp,sp,-28
  807fd4:	dfc00615 	stw	ra,24(sp)
  807fd8:	df000515 	stw	fp,20(sp)
  807fdc:	df000504 	addi	fp,sp,20
  807fe0:	e13ffd15 	stw	r4,-12(fp)
  807fe4:	e17ffe15 	stw	r5,-8(fp)
  807fe8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807fec:	e0bffd17 	ldw	r2,-12(fp)
  807ff0:	10000816 	blt	r2,zero,808014 <write+0x44>
  807ff4:	01400304 	movi	r5,12
  807ff8:	e13ffd17 	ldw	r4,-12(fp)
  807ffc:	08015180 	call	801518 <__mulsi3>
  808000:	1007883a 	mov	r3,r2
  808004:	00802074 	movhi	r2,129
  808008:	10a68f04 	addi	r2,r2,-26052
  80800c:	1885883a 	add	r2,r3,r2
  808010:	00000106 	br	808018 <write+0x48>
  808014:	0005883a 	mov	r2,zero
  808018:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80801c:	e0bffb17 	ldw	r2,-20(fp)
  808020:	10002126 	beq	r2,zero,8080a8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  808024:	e0bffb17 	ldw	r2,-20(fp)
  808028:	10800217 	ldw	r2,8(r2)
  80802c:	108000cc 	andi	r2,r2,3
  808030:	10001826 	beq	r2,zero,808094 <write+0xc4>
  808034:	e0bffb17 	ldw	r2,-20(fp)
  808038:	10800017 	ldw	r2,0(r2)
  80803c:	10800617 	ldw	r2,24(r2)
  808040:	10001426 	beq	r2,zero,808094 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  808044:	e0bffb17 	ldw	r2,-20(fp)
  808048:	10800017 	ldw	r2,0(r2)
  80804c:	10800617 	ldw	r2,24(r2)
  808050:	e0ffff17 	ldw	r3,-4(fp)
  808054:	180d883a 	mov	r6,r3
  808058:	e17ffe17 	ldw	r5,-8(fp)
  80805c:	e13ffb17 	ldw	r4,-20(fp)
  808060:	103ee83a 	callr	r2
  808064:	e0bffc15 	stw	r2,-16(fp)
  808068:	e0bffc17 	ldw	r2,-16(fp)
  80806c:	1000070e 	bge	r2,zero,80808c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  808070:	0807f800 	call	807f80 <alt_get_errno>
  808074:	1007883a 	mov	r3,r2
  808078:	e0bffc17 	ldw	r2,-16(fp)
  80807c:	0085c83a 	sub	r2,zero,r2
  808080:	18800015 	stw	r2,0(r3)
        return -1;
  808084:	00bfffc4 	movi	r2,-1
  808088:	00000c06 	br	8080bc <write+0xec>
      }
      return rval;
  80808c:	e0bffc17 	ldw	r2,-16(fp)
  808090:	00000a06 	br	8080bc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  808094:	0807f800 	call	807f80 <alt_get_errno>
  808098:	1007883a 	mov	r3,r2
  80809c:	00800344 	movi	r2,13
  8080a0:	18800015 	stw	r2,0(r3)
  8080a4:	00000406 	br	8080b8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8080a8:	0807f800 	call	807f80 <alt_get_errno>
  8080ac:	1007883a 	mov	r3,r2
  8080b0:	00801444 	movi	r2,81
  8080b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8080b8:	00bfffc4 	movi	r2,-1
}
  8080bc:	e037883a 	mov	sp,fp
  8080c0:	dfc00117 	ldw	ra,4(sp)
  8080c4:	df000017 	ldw	fp,0(sp)
  8080c8:	dec00204 	addi	sp,sp,8
  8080cc:	f800283a 	ret

008080d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8080d0:	defffd04 	addi	sp,sp,-12
  8080d4:	dfc00215 	stw	ra,8(sp)
  8080d8:	df000115 	stw	fp,4(sp)
  8080dc:	df000104 	addi	fp,sp,4
  8080e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8080e4:	01402074 	movhi	r5,129
  8080e8:	2966f404 	addi	r5,r5,-25648
  8080ec:	e13fff17 	ldw	r4,-4(fp)
  8080f0:	08086980 	call	808698 <alt_dev_llist_insert>
}
  8080f4:	e037883a 	mov	sp,fp
  8080f8:	dfc00117 	ldw	ra,4(sp)
  8080fc:	df000017 	ldw	fp,0(sp)
  808100:	dec00204 	addi	sp,sp,8
  808104:	f800283a 	ret

00808108 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  808108:	defffd04 	addi	sp,sp,-12
  80810c:	dfc00215 	stw	ra,8(sp)
  808110:	df000115 	stw	fp,4(sp)
  808114:	df000104 	addi	fp,sp,4
  808118:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80811c:	080906c0 	call	80906c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  808120:	00800044 	movi	r2,1
  808124:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  808128:	0001883a 	nop
  80812c:	e037883a 	mov	sp,fp
  808130:	dfc00117 	ldw	ra,4(sp)
  808134:	df000017 	ldw	fp,0(sp)
  808138:	dec00204 	addi	sp,sp,8
  80813c:	f800283a 	ret

00808140 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  808140:	defffe04 	addi	sp,sp,-8
  808144:	dfc00115 	stw	ra,4(sp)
  808148:	df000015 	stw	fp,0(sp)
  80814c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  808150:	01c0fa04 	movi	r7,1000
  808154:	01800044 	movi	r6,1
  808158:	000b883a 	mov	r5,zero
  80815c:	01004034 	movhi	r4,256
  808160:	21040004 	addi	r4,r4,4096
  808164:	08084480 	call	808448 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  808168:	01002074 	movhi	r4,129
  80816c:	21267a04 	addi	r4,r4,-26136
  808170:	08080d00 	call	8080d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  808174:	0001883a 	nop
}
  808178:	0001883a 	nop
  80817c:	e037883a 	mov	sp,fp
  808180:	dfc00117 	ldw	ra,4(sp)
  808184:	df000017 	ldw	fp,0(sp)
  808188:	dec00204 	addi	sp,sp,8
  80818c:	f800283a 	ret

00808190 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  808190:	defffa04 	addi	sp,sp,-24
  808194:	dfc00515 	stw	ra,20(sp)
  808198:	df000415 	stw	fp,16(sp)
  80819c:	df000404 	addi	fp,sp,16
  8081a0:	e13ffd15 	stw	r4,-12(fp)
  8081a4:	e17ffe15 	stw	r5,-8(fp)
  8081a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8081ac:	e0bffd17 	ldw	r2,-12(fp)
  8081b0:	10800017 	ldw	r2,0(r2)
  8081b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8081b8:	e0bffc17 	ldw	r2,-16(fp)
  8081bc:	10c00a04 	addi	r3,r2,40
  8081c0:	e0bffd17 	ldw	r2,-12(fp)
  8081c4:	10800217 	ldw	r2,8(r2)
  8081c8:	100f883a 	mov	r7,r2
  8081cc:	e1bfff17 	ldw	r6,-4(fp)
  8081d0:	e17ffe17 	ldw	r5,-8(fp)
  8081d4:	1809883a 	mov	r4,r3
  8081d8:	08082500 	call	808250 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8081dc:	e037883a 	mov	sp,fp
  8081e0:	dfc00117 	ldw	ra,4(sp)
  8081e4:	df000017 	ldw	fp,0(sp)
  8081e8:	dec00204 	addi	sp,sp,8
  8081ec:	f800283a 	ret

008081f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8081f0:	defffa04 	addi	sp,sp,-24
  8081f4:	dfc00515 	stw	ra,20(sp)
  8081f8:	df000415 	stw	fp,16(sp)
  8081fc:	df000404 	addi	fp,sp,16
  808200:	e13ffd15 	stw	r4,-12(fp)
  808204:	e17ffe15 	stw	r5,-8(fp)
  808208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80820c:	e0bffd17 	ldw	r2,-12(fp)
  808210:	10800017 	ldw	r2,0(r2)
  808214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  808218:	e0bffc17 	ldw	r2,-16(fp)
  80821c:	10c00a04 	addi	r3,r2,40
  808220:	e0bffd17 	ldw	r2,-12(fp)
  808224:	10800217 	ldw	r2,8(r2)
  808228:	100f883a 	mov	r7,r2
  80822c:	e1bfff17 	ldw	r6,-4(fp)
  808230:	e17ffe17 	ldw	r5,-8(fp)
  808234:	1809883a 	mov	r4,r3
  808238:	080833c0 	call	80833c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80823c:	e037883a 	mov	sp,fp
  808240:	dfc00117 	ldw	ra,4(sp)
  808244:	df000017 	ldw	fp,0(sp)
  808248:	dec00204 	addi	sp,sp,8
  80824c:	f800283a 	ret

00808250 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  808250:	defff704 	addi	sp,sp,-36
  808254:	df000815 	stw	fp,32(sp)
  808258:	df000804 	addi	fp,sp,32
  80825c:	e13ffc15 	stw	r4,-16(fp)
  808260:	e17ffd15 	stw	r5,-12(fp)
  808264:	e1bffe15 	stw	r6,-8(fp)
  808268:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  80826c:	e0bffc17 	ldw	r2,-16(fp)
  808270:	10800017 	ldw	r2,0(r2)
  808274:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  808278:	e0bffd17 	ldw	r2,-12(fp)
  80827c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  808280:	e0bffe17 	ldw	r2,-8(fp)
  808284:	e0fffd17 	ldw	r3,-12(fp)
  808288:	1885883a 	add	r2,r3,r2
  80828c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  808290:	00001206 	br	8082dc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  808294:	e0bff917 	ldw	r2,-28(fp)
  808298:	10800037 	ldwio	r2,0(r2)
  80829c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8082a0:	e0bffb17 	ldw	r2,-20(fp)
  8082a4:	10a0000c 	andi	r2,r2,32768
  8082a8:	10000626 	beq	r2,zero,8082c4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8082ac:	e0bff817 	ldw	r2,-32(fp)
  8082b0:	10c00044 	addi	r3,r2,1
  8082b4:	e0fff815 	stw	r3,-32(fp)
  8082b8:	e0fffb17 	ldw	r3,-20(fp)
  8082bc:	10c00005 	stb	r3,0(r2)
  8082c0:	00000606 	br	8082dc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  8082c4:	e0fff817 	ldw	r3,-32(fp)
  8082c8:	e0bffd17 	ldw	r2,-12(fp)
  8082cc:	1880071e 	bne	r3,r2,8082ec <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  8082d0:	e0bfff17 	ldw	r2,-4(fp)
  8082d4:	1090000c 	andi	r2,r2,16384
  8082d8:	1000061e 	bne	r2,zero,8082f4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  8082dc:	e0fff817 	ldw	r3,-32(fp)
  8082e0:	e0bffa17 	ldw	r2,-24(fp)
  8082e4:	18bfeb36 	bltu	r3,r2,808294 <__alt_data_end+0xff808294>
  8082e8:	00000306 	br	8082f8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  8082ec:	0001883a 	nop
  8082f0:	00000106 	br	8082f8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  8082f4:	0001883a 	nop
    
  }

  if (ptr != buffer)
  8082f8:	e0fff817 	ldw	r3,-32(fp)
  8082fc:	e0bffd17 	ldw	r2,-12(fp)
  808300:	18800426 	beq	r3,r2,808314 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  808304:	e0fff817 	ldw	r3,-32(fp)
  808308:	e0bffd17 	ldw	r2,-12(fp)
  80830c:	1885c83a 	sub	r2,r3,r2
  808310:	00000606 	br	80832c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  808314:	e0bfff17 	ldw	r2,-4(fp)
  808318:	1090000c 	andi	r2,r2,16384
  80831c:	10000226 	beq	r2,zero,808328 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  808320:	00bffd44 	movi	r2,-11
  808324:	00000106 	br	80832c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  808328:	00bffec4 	movi	r2,-5
}
  80832c:	e037883a 	mov	sp,fp
  808330:	df000017 	ldw	fp,0(sp)
  808334:	dec00104 	addi	sp,sp,4
  808338:	f800283a 	ret

0080833c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80833c:	defff904 	addi	sp,sp,-28
  808340:	df000615 	stw	fp,24(sp)
  808344:	df000604 	addi	fp,sp,24
  808348:	e13ffc15 	stw	r4,-16(fp)
  80834c:	e17ffd15 	stw	r5,-12(fp)
  808350:	e1bffe15 	stw	r6,-8(fp)
  808354:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  808358:	e0bffc17 	ldw	r2,-16(fp)
  80835c:	10800017 	ldw	r2,0(r2)
  808360:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  808364:	e0bffe17 	ldw	r2,-8(fp)
  808368:	e0fffd17 	ldw	r3,-12(fp)
  80836c:	1885883a 	add	r2,r3,r2
  808370:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  808374:	00000e06 	br	8083b0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  808378:	e0bffa17 	ldw	r2,-24(fp)
  80837c:	10800104 	addi	r2,r2,4
  808380:	10800037 	ldwio	r2,0(r2)
  808384:	10bfffec 	andhi	r2,r2,65535
  808388:	10000926 	beq	r2,zero,8083b0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  80838c:	e0fffa17 	ldw	r3,-24(fp)
  808390:	e0bffd17 	ldw	r2,-12(fp)
  808394:	11000044 	addi	r4,r2,1
  808398:	e13ffd15 	stw	r4,-12(fp)
  80839c:	10800003 	ldbu	r2,0(r2)
  8083a0:	10803fcc 	andi	r2,r2,255
  8083a4:	1080201c 	xori	r2,r2,128
  8083a8:	10bfe004 	addi	r2,r2,-128
  8083ac:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8083b0:	e0fffd17 	ldw	r3,-12(fp)
  8083b4:	e0bffb17 	ldw	r2,-20(fp)
  8083b8:	18bfef36 	bltu	r3,r2,808378 <__alt_data_end+0xff808378>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  8083bc:	e0bffe17 	ldw	r2,-8(fp)
}
  8083c0:	e037883a 	mov	sp,fp
  8083c4:	df000017 	ldw	fp,0(sp)
  8083c8:	dec00104 	addi	sp,sp,4
  8083cc:	f800283a 	ret

008083d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8083d0:	defffa04 	addi	sp,sp,-24
  8083d4:	dfc00515 	stw	ra,20(sp)
  8083d8:	df000415 	stw	fp,16(sp)
  8083dc:	df000404 	addi	fp,sp,16
  8083e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8083e4:	0007883a 	mov	r3,zero
  8083e8:	e0bfff17 	ldw	r2,-4(fp)
  8083ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8083f0:	e0bfff17 	ldw	r2,-4(fp)
  8083f4:	10800104 	addi	r2,r2,4
  8083f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8083fc:	0005303a 	rdctl	r2,status
  808400:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808404:	e0fffd17 	ldw	r3,-12(fp)
  808408:	00bfff84 	movi	r2,-2
  80840c:	1884703a 	and	r2,r3,r2
  808410:	1001703a 	wrctl	status,r2
  
  return context;
  808414:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  808418:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80841c:	0808f640 	call	808f64 <alt_tick>
  808420:	e0bffc17 	ldw	r2,-16(fp)
  808424:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808428:	e0bffe17 	ldw	r2,-8(fp)
  80842c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  808430:	0001883a 	nop
  808434:	e037883a 	mov	sp,fp
  808438:	dfc00117 	ldw	ra,4(sp)
  80843c:	df000017 	ldw	fp,0(sp)
  808440:	dec00204 	addi	sp,sp,8
  808444:	f800283a 	ret

00808448 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  808448:	defff804 	addi	sp,sp,-32
  80844c:	dfc00715 	stw	ra,28(sp)
  808450:	df000615 	stw	fp,24(sp)
  808454:	df000604 	addi	fp,sp,24
  808458:	e13ffc15 	stw	r4,-16(fp)
  80845c:	e17ffd15 	stw	r5,-12(fp)
  808460:	e1bffe15 	stw	r6,-8(fp)
  808464:	e1ffff15 	stw	r7,-4(fp)
  808468:	e0bfff17 	ldw	r2,-4(fp)
  80846c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  808470:	00802074 	movhi	r2,129
  808474:	10a7bb04 	addi	r2,r2,-24852
  808478:	10800017 	ldw	r2,0(r2)
  80847c:	1000041e 	bne	r2,zero,808490 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  808480:	00802074 	movhi	r2,129
  808484:	10a7bb04 	addi	r2,r2,-24852
  808488:	e0fffb17 	ldw	r3,-20(fp)
  80848c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  808490:	e0bffc17 	ldw	r2,-16(fp)
  808494:	10800104 	addi	r2,r2,4
  808498:	00c001c4 	movi	r3,7
  80849c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8084a0:	d8000015 	stw	zero,0(sp)
  8084a4:	e1fffc17 	ldw	r7,-16(fp)
  8084a8:	01802074 	movhi	r6,129
  8084ac:	31a0f404 	addi	r6,r6,-31792
  8084b0:	e17ffe17 	ldw	r5,-8(fp)
  8084b4:	e13ffd17 	ldw	r4,-12(fp)
  8084b8:	08087700 	call	808770 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8084bc:	0001883a 	nop
  8084c0:	e037883a 	mov	sp,fp
  8084c4:	dfc00117 	ldw	ra,4(sp)
  8084c8:	df000017 	ldw	fp,0(sp)
  8084cc:	dec00204 	addi	sp,sp,8
  8084d0:	f800283a 	ret

008084d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8084d4:	defffe04 	addi	sp,sp,-8
  8084d8:	dfc00115 	stw	ra,4(sp)
  8084dc:	df000015 	stw	fp,0(sp)
  8084e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8084e4:	00802074 	movhi	r2,129
  8084e8:	10a6f704 	addi	r2,r2,-25636
  8084ec:	10800017 	ldw	r2,0(r2)
  8084f0:	10000526 	beq	r2,zero,808508 <alt_get_errno+0x34>
  8084f4:	00802074 	movhi	r2,129
  8084f8:	10a6f704 	addi	r2,r2,-25636
  8084fc:	10800017 	ldw	r2,0(r2)
  808500:	103ee83a 	callr	r2
  808504:	00000206 	br	808510 <alt_get_errno+0x3c>
  808508:	00802074 	movhi	r2,129
  80850c:	10a7b604 	addi	r2,r2,-24872
}
  808510:	e037883a 	mov	sp,fp
  808514:	dfc00117 	ldw	ra,4(sp)
  808518:	df000017 	ldw	fp,0(sp)
  80851c:	dec00204 	addi	sp,sp,8
  808520:	f800283a 	ret

00808524 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  808524:	defffb04 	addi	sp,sp,-20
  808528:	dfc00415 	stw	ra,16(sp)
  80852c:	df000315 	stw	fp,12(sp)
  808530:	df000304 	addi	fp,sp,12
  808534:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  808538:	e0bfff17 	ldw	r2,-4(fp)
  80853c:	10000816 	blt	r2,zero,808560 <close+0x3c>
  808540:	01400304 	movi	r5,12
  808544:	e13fff17 	ldw	r4,-4(fp)
  808548:	08015180 	call	801518 <__mulsi3>
  80854c:	1007883a 	mov	r3,r2
  808550:	00802074 	movhi	r2,129
  808554:	10a68f04 	addi	r2,r2,-26052
  808558:	1885883a 	add	r2,r3,r2
  80855c:	00000106 	br	808564 <close+0x40>
  808560:	0005883a 	mov	r2,zero
  808564:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  808568:	e0bffd17 	ldw	r2,-12(fp)
  80856c:	10001926 	beq	r2,zero,8085d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  808570:	e0bffd17 	ldw	r2,-12(fp)
  808574:	10800017 	ldw	r2,0(r2)
  808578:	10800417 	ldw	r2,16(r2)
  80857c:	10000626 	beq	r2,zero,808598 <close+0x74>
  808580:	e0bffd17 	ldw	r2,-12(fp)
  808584:	10800017 	ldw	r2,0(r2)
  808588:	10800417 	ldw	r2,16(r2)
  80858c:	e13ffd17 	ldw	r4,-12(fp)
  808590:	103ee83a 	callr	r2
  808594:	00000106 	br	80859c <close+0x78>
  808598:	0005883a 	mov	r2,zero
  80859c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8085a0:	e13fff17 	ldw	r4,-4(fp)
  8085a4:	0808e440 	call	808e44 <alt_release_fd>
    if (rval < 0)
  8085a8:	e0bffe17 	ldw	r2,-8(fp)
  8085ac:	1000070e 	bge	r2,zero,8085cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
  8085b0:	08084d40 	call	8084d4 <alt_get_errno>
  8085b4:	1007883a 	mov	r3,r2
  8085b8:	e0bffe17 	ldw	r2,-8(fp)
  8085bc:	0085c83a 	sub	r2,zero,r2
  8085c0:	18800015 	stw	r2,0(r3)
      return -1;
  8085c4:	00bfffc4 	movi	r2,-1
  8085c8:	00000706 	br	8085e8 <close+0xc4>
    }
    return 0;
  8085cc:	0005883a 	mov	r2,zero
  8085d0:	00000506 	br	8085e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8085d4:	08084d40 	call	8084d4 <alt_get_errno>
  8085d8:	1007883a 	mov	r3,r2
  8085dc:	00801444 	movi	r2,81
  8085e0:	18800015 	stw	r2,0(r3)
    return -1;
  8085e4:	00bfffc4 	movi	r2,-1
  }
}
  8085e8:	e037883a 	mov	sp,fp
  8085ec:	dfc00117 	ldw	ra,4(sp)
  8085f0:	df000017 	ldw	fp,0(sp)
  8085f4:	dec00204 	addi	sp,sp,8
  8085f8:	f800283a 	ret

008085fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8085fc:	deffff04 	addi	sp,sp,-4
  808600:	df000015 	stw	fp,0(sp)
  808604:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  808608:	0001883a 	nop
  80860c:	e037883a 	mov	sp,fp
  808610:	df000017 	ldw	fp,0(sp)
  808614:	dec00104 	addi	sp,sp,4
  808618:	f800283a 	ret

0080861c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80861c:	defffc04 	addi	sp,sp,-16
  808620:	df000315 	stw	fp,12(sp)
  808624:	df000304 	addi	fp,sp,12
  808628:	e13ffd15 	stw	r4,-12(fp)
  80862c:	e17ffe15 	stw	r5,-8(fp)
  808630:	e1bfff15 	stw	r6,-4(fp)
  return len;
  808634:	e0bfff17 	ldw	r2,-4(fp)
}
  808638:	e037883a 	mov	sp,fp
  80863c:	df000017 	ldw	fp,0(sp)
  808640:	dec00104 	addi	sp,sp,4
  808644:	f800283a 	ret

00808648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808648:	defffe04 	addi	sp,sp,-8
  80864c:	dfc00115 	stw	ra,4(sp)
  808650:	df000015 	stw	fp,0(sp)
  808654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808658:	00802074 	movhi	r2,129
  80865c:	10a6f704 	addi	r2,r2,-25636
  808660:	10800017 	ldw	r2,0(r2)
  808664:	10000526 	beq	r2,zero,80867c <alt_get_errno+0x34>
  808668:	00802074 	movhi	r2,129
  80866c:	10a6f704 	addi	r2,r2,-25636
  808670:	10800017 	ldw	r2,0(r2)
  808674:	103ee83a 	callr	r2
  808678:	00000206 	br	808684 <alt_get_errno+0x3c>
  80867c:	00802074 	movhi	r2,129
  808680:	10a7b604 	addi	r2,r2,-24872
}
  808684:	e037883a 	mov	sp,fp
  808688:	dfc00117 	ldw	ra,4(sp)
  80868c:	df000017 	ldw	fp,0(sp)
  808690:	dec00204 	addi	sp,sp,8
  808694:	f800283a 	ret

00808698 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  808698:	defffa04 	addi	sp,sp,-24
  80869c:	dfc00515 	stw	ra,20(sp)
  8086a0:	df000415 	stw	fp,16(sp)
  8086a4:	df000404 	addi	fp,sp,16
  8086a8:	e13ffe15 	stw	r4,-8(fp)
  8086ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8086b0:	e0bffe17 	ldw	r2,-8(fp)
  8086b4:	10000326 	beq	r2,zero,8086c4 <alt_dev_llist_insert+0x2c>
  8086b8:	e0bffe17 	ldw	r2,-8(fp)
  8086bc:	10800217 	ldw	r2,8(r2)
  8086c0:	1000061e 	bne	r2,zero,8086dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8086c4:	08086480 	call	808648 <alt_get_errno>
  8086c8:	1007883a 	mov	r3,r2
  8086cc:	00800584 	movi	r2,22
  8086d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8086d4:	00bffa84 	movi	r2,-22
  8086d8:	00001306 	br	808728 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8086dc:	e0bffe17 	ldw	r2,-8(fp)
  8086e0:	e0ffff17 	ldw	r3,-4(fp)
  8086e4:	e0fffc15 	stw	r3,-16(fp)
  8086e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8086ec:	e0bffd17 	ldw	r2,-12(fp)
  8086f0:	e0fffc17 	ldw	r3,-16(fp)
  8086f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8086f8:	e0bffc17 	ldw	r2,-16(fp)
  8086fc:	10c00017 	ldw	r3,0(r2)
  808700:	e0bffd17 	ldw	r2,-12(fp)
  808704:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  808708:	e0bffc17 	ldw	r2,-16(fp)
  80870c:	10800017 	ldw	r2,0(r2)
  808710:	e0fffd17 	ldw	r3,-12(fp)
  808714:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  808718:	e0bffc17 	ldw	r2,-16(fp)
  80871c:	e0fffd17 	ldw	r3,-12(fp)
  808720:	10c00015 	stw	r3,0(r2)

  return 0;  
  808724:	0005883a 	mov	r2,zero
}
  808728:	e037883a 	mov	sp,fp
  80872c:	dfc00117 	ldw	ra,4(sp)
  808730:	df000017 	ldw	fp,0(sp)
  808734:	dec00204 	addi	sp,sp,8
  808738:	f800283a 	ret

0080873c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80873c:	defffe04 	addi	sp,sp,-8
  808740:	dfc00115 	stw	ra,4(sp)
  808744:	df000015 	stw	fp,0(sp)
  808748:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80874c:	01500004 	movi	r5,16384
  808750:	0009883a 	mov	r4,zero
  808754:	08093080 	call	809308 <alt_icache_flush>
#endif
}
  808758:	0001883a 	nop
  80875c:	e037883a 	mov	sp,fp
  808760:	dfc00117 	ldw	ra,4(sp)
  808764:	df000017 	ldw	fp,0(sp)
  808768:	dec00204 	addi	sp,sp,8
  80876c:	f800283a 	ret

00808770 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  808770:	defff904 	addi	sp,sp,-28
  808774:	dfc00615 	stw	ra,24(sp)
  808778:	df000515 	stw	fp,20(sp)
  80877c:	df000504 	addi	fp,sp,20
  808780:	e13ffc15 	stw	r4,-16(fp)
  808784:	e17ffd15 	stw	r5,-12(fp)
  808788:	e1bffe15 	stw	r6,-8(fp)
  80878c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  808790:	e0800217 	ldw	r2,8(fp)
  808794:	d8800015 	stw	r2,0(sp)
  808798:	e1ffff17 	ldw	r7,-4(fp)
  80879c:	e1bffe17 	ldw	r6,-8(fp)
  8087a0:	e17ffd17 	ldw	r5,-12(fp)
  8087a4:	e13ffc17 	ldw	r4,-16(fp)
  8087a8:	08089500 	call	808950 <alt_iic_isr_register>
}  
  8087ac:	e037883a 	mov	sp,fp
  8087b0:	dfc00117 	ldw	ra,4(sp)
  8087b4:	df000017 	ldw	fp,0(sp)
  8087b8:	dec00204 	addi	sp,sp,8
  8087bc:	f800283a 	ret

008087c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8087c0:	defff904 	addi	sp,sp,-28
  8087c4:	df000615 	stw	fp,24(sp)
  8087c8:	df000604 	addi	fp,sp,24
  8087cc:	e13ffe15 	stw	r4,-8(fp)
  8087d0:	e17fff15 	stw	r5,-4(fp)
  8087d4:	e0bfff17 	ldw	r2,-4(fp)
  8087d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8087dc:	0005303a 	rdctl	r2,status
  8087e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8087e4:	e0fffb17 	ldw	r3,-20(fp)
  8087e8:	00bfff84 	movi	r2,-2
  8087ec:	1884703a 	and	r2,r3,r2
  8087f0:	1001703a 	wrctl	status,r2
  
  return context;
  8087f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8087f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8087fc:	00c00044 	movi	r3,1
  808800:	e0bffa17 	ldw	r2,-24(fp)
  808804:	1884983a 	sll	r2,r3,r2
  808808:	1007883a 	mov	r3,r2
  80880c:	00802074 	movhi	r2,129
  808810:	10a7ba04 	addi	r2,r2,-24856
  808814:	10800017 	ldw	r2,0(r2)
  808818:	1886b03a 	or	r3,r3,r2
  80881c:	00802074 	movhi	r2,129
  808820:	10a7ba04 	addi	r2,r2,-24856
  808824:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808828:	00802074 	movhi	r2,129
  80882c:	10a7ba04 	addi	r2,r2,-24856
  808830:	10800017 	ldw	r2,0(r2)
  808834:	100170fa 	wrctl	ienable,r2
  808838:	e0bffc17 	ldw	r2,-16(fp)
  80883c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808840:	e0bffd17 	ldw	r2,-12(fp)
  808844:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  808848:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80884c:	0001883a 	nop
}
  808850:	e037883a 	mov	sp,fp
  808854:	df000017 	ldw	fp,0(sp)
  808858:	dec00104 	addi	sp,sp,4
  80885c:	f800283a 	ret

00808860 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  808860:	defff904 	addi	sp,sp,-28
  808864:	df000615 	stw	fp,24(sp)
  808868:	df000604 	addi	fp,sp,24
  80886c:	e13ffe15 	stw	r4,-8(fp)
  808870:	e17fff15 	stw	r5,-4(fp)
  808874:	e0bfff17 	ldw	r2,-4(fp)
  808878:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80887c:	0005303a 	rdctl	r2,status
  808880:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808884:	e0fffb17 	ldw	r3,-20(fp)
  808888:	00bfff84 	movi	r2,-2
  80888c:	1884703a 	and	r2,r3,r2
  808890:	1001703a 	wrctl	status,r2
  
  return context;
  808894:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  808898:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80889c:	00c00044 	movi	r3,1
  8088a0:	e0bffa17 	ldw	r2,-24(fp)
  8088a4:	1884983a 	sll	r2,r3,r2
  8088a8:	0084303a 	nor	r2,zero,r2
  8088ac:	1007883a 	mov	r3,r2
  8088b0:	00802074 	movhi	r2,129
  8088b4:	10a7ba04 	addi	r2,r2,-24856
  8088b8:	10800017 	ldw	r2,0(r2)
  8088bc:	1886703a 	and	r3,r3,r2
  8088c0:	00802074 	movhi	r2,129
  8088c4:	10a7ba04 	addi	r2,r2,-24856
  8088c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8088cc:	00802074 	movhi	r2,129
  8088d0:	10a7ba04 	addi	r2,r2,-24856
  8088d4:	10800017 	ldw	r2,0(r2)
  8088d8:	100170fa 	wrctl	ienable,r2
  8088dc:	e0bffc17 	ldw	r2,-16(fp)
  8088e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088e4:	e0bffd17 	ldw	r2,-12(fp)
  8088e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8088ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8088f0:	0001883a 	nop
}
  8088f4:	e037883a 	mov	sp,fp
  8088f8:	df000017 	ldw	fp,0(sp)
  8088fc:	dec00104 	addi	sp,sp,4
  808900:	f800283a 	ret

00808904 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  808904:	defffc04 	addi	sp,sp,-16
  808908:	df000315 	stw	fp,12(sp)
  80890c:	df000304 	addi	fp,sp,12
  808910:	e13ffe15 	stw	r4,-8(fp)
  808914:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  808918:	000530fa 	rdctl	r2,ienable
  80891c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  808920:	00c00044 	movi	r3,1
  808924:	e0bfff17 	ldw	r2,-4(fp)
  808928:	1884983a 	sll	r2,r3,r2
  80892c:	1007883a 	mov	r3,r2
  808930:	e0bffd17 	ldw	r2,-12(fp)
  808934:	1884703a 	and	r2,r3,r2
  808938:	1004c03a 	cmpne	r2,r2,zero
  80893c:	10803fcc 	andi	r2,r2,255
}
  808940:	e037883a 	mov	sp,fp
  808944:	df000017 	ldw	fp,0(sp)
  808948:	dec00104 	addi	sp,sp,4
  80894c:	f800283a 	ret

00808950 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  808950:	defff504 	addi	sp,sp,-44
  808954:	dfc00a15 	stw	ra,40(sp)
  808958:	df000915 	stw	fp,36(sp)
  80895c:	df000904 	addi	fp,sp,36
  808960:	e13ffc15 	stw	r4,-16(fp)
  808964:	e17ffd15 	stw	r5,-12(fp)
  808968:	e1bffe15 	stw	r6,-8(fp)
  80896c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  808970:	00bffa84 	movi	r2,-22
  808974:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  808978:	e0bffd17 	ldw	r2,-12(fp)
  80897c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  808980:	e0bff817 	ldw	r2,-32(fp)
  808984:	10800808 	cmpgei	r2,r2,32
  808988:	1000271e 	bne	r2,zero,808a28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80898c:	0005303a 	rdctl	r2,status
  808990:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808994:	e0fffb17 	ldw	r3,-20(fp)
  808998:	00bfff84 	movi	r2,-2
  80899c:	1884703a 	and	r2,r3,r2
  8089a0:	1001703a 	wrctl	status,r2
  
  return context;
  8089a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8089a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8089ac:	00802074 	movhi	r2,129
  8089b0:	10a7bd04 	addi	r2,r2,-24844
  8089b4:	e0fff817 	ldw	r3,-32(fp)
  8089b8:	180690fa 	slli	r3,r3,3
  8089bc:	10c5883a 	add	r2,r2,r3
  8089c0:	e0fffe17 	ldw	r3,-8(fp)
  8089c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8089c8:	00802074 	movhi	r2,129
  8089cc:	10a7bd04 	addi	r2,r2,-24844
  8089d0:	e0fff817 	ldw	r3,-32(fp)
  8089d4:	180690fa 	slli	r3,r3,3
  8089d8:	10c5883a 	add	r2,r2,r3
  8089dc:	10800104 	addi	r2,r2,4
  8089e0:	e0ffff17 	ldw	r3,-4(fp)
  8089e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8089e8:	e0bffe17 	ldw	r2,-8(fp)
  8089ec:	10000526 	beq	r2,zero,808a04 <alt_iic_isr_register+0xb4>
  8089f0:	e0bff817 	ldw	r2,-32(fp)
  8089f4:	100b883a 	mov	r5,r2
  8089f8:	e13ffc17 	ldw	r4,-16(fp)
  8089fc:	08087c00 	call	8087c0 <alt_ic_irq_enable>
  808a00:	00000406 	br	808a14 <alt_iic_isr_register+0xc4>
  808a04:	e0bff817 	ldw	r2,-32(fp)
  808a08:	100b883a 	mov	r5,r2
  808a0c:	e13ffc17 	ldw	r4,-16(fp)
  808a10:	08088600 	call	808860 <alt_ic_irq_disable>
  808a14:	e0bff715 	stw	r2,-36(fp)
  808a18:	e0bffa17 	ldw	r2,-24(fp)
  808a1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a20:	e0bff917 	ldw	r2,-28(fp)
  808a24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  808a28:	e0bff717 	ldw	r2,-36(fp)
}
  808a2c:	e037883a 	mov	sp,fp
  808a30:	dfc00117 	ldw	ra,4(sp)
  808a34:	df000017 	ldw	fp,0(sp)
  808a38:	dec00204 	addi	sp,sp,8
  808a3c:	f800283a 	ret

00808a40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  808a40:	defff804 	addi	sp,sp,-32
  808a44:	dfc00715 	stw	ra,28(sp)
  808a48:	df000615 	stw	fp,24(sp)
  808a4c:	dc000515 	stw	r16,20(sp)
  808a50:	df000604 	addi	fp,sp,24
  808a54:	e13ffb15 	stw	r4,-20(fp)
  808a58:	e17ffc15 	stw	r5,-16(fp)
  808a5c:	e1bffd15 	stw	r6,-12(fp)
  808a60:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  808a64:	e1bffe17 	ldw	r6,-8(fp)
  808a68:	e17ffd17 	ldw	r5,-12(fp)
  808a6c:	e13ffc17 	ldw	r4,-16(fp)
  808a70:	0808ce40 	call	808ce4 <open>
  808a74:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  808a78:	e0bffa17 	ldw	r2,-24(fp)
  808a7c:	10002216 	blt	r2,zero,808b08 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  808a80:	04002074 	movhi	r16,129
  808a84:	84268f04 	addi	r16,r16,-26052
  808a88:	e0bffa17 	ldw	r2,-24(fp)
  808a8c:	01400304 	movi	r5,12
  808a90:	1009883a 	mov	r4,r2
  808a94:	08015180 	call	801518 <__mulsi3>
  808a98:	8085883a 	add	r2,r16,r2
  808a9c:	10c00017 	ldw	r3,0(r2)
  808aa0:	e0bffb17 	ldw	r2,-20(fp)
  808aa4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  808aa8:	04002074 	movhi	r16,129
  808aac:	84268f04 	addi	r16,r16,-26052
  808ab0:	e0bffa17 	ldw	r2,-24(fp)
  808ab4:	01400304 	movi	r5,12
  808ab8:	1009883a 	mov	r4,r2
  808abc:	08015180 	call	801518 <__mulsi3>
  808ac0:	8085883a 	add	r2,r16,r2
  808ac4:	10800104 	addi	r2,r2,4
  808ac8:	10c00017 	ldw	r3,0(r2)
  808acc:	e0bffb17 	ldw	r2,-20(fp)
  808ad0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808ad4:	04002074 	movhi	r16,129
  808ad8:	84268f04 	addi	r16,r16,-26052
  808adc:	e0bffa17 	ldw	r2,-24(fp)
  808ae0:	01400304 	movi	r5,12
  808ae4:	1009883a 	mov	r4,r2
  808ae8:	08015180 	call	801518 <__mulsi3>
  808aec:	8085883a 	add	r2,r16,r2
  808af0:	10800204 	addi	r2,r2,8
  808af4:	10c00017 	ldw	r3,0(r2)
  808af8:	e0bffb17 	ldw	r2,-20(fp)
  808afc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  808b00:	e13ffa17 	ldw	r4,-24(fp)
  808b04:	0808e440 	call	808e44 <alt_release_fd>
  }
} 
  808b08:	0001883a 	nop
  808b0c:	e6ffff04 	addi	sp,fp,-4
  808b10:	dfc00217 	ldw	ra,8(sp)
  808b14:	df000117 	ldw	fp,4(sp)
  808b18:	dc000017 	ldw	r16,0(sp)
  808b1c:	dec00304 	addi	sp,sp,12
  808b20:	f800283a 	ret

00808b24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  808b24:	defffb04 	addi	sp,sp,-20
  808b28:	dfc00415 	stw	ra,16(sp)
  808b2c:	df000315 	stw	fp,12(sp)
  808b30:	df000304 	addi	fp,sp,12
  808b34:	e13ffd15 	stw	r4,-12(fp)
  808b38:	e17ffe15 	stw	r5,-8(fp)
  808b3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  808b40:	01c07fc4 	movi	r7,511
  808b44:	01800044 	movi	r6,1
  808b48:	e17ffd17 	ldw	r5,-12(fp)
  808b4c:	01002074 	movhi	r4,129
  808b50:	21269204 	addi	r4,r4,-26040
  808b54:	0808a400 	call	808a40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  808b58:	01c07fc4 	movi	r7,511
  808b5c:	000d883a 	mov	r6,zero
  808b60:	e17ffe17 	ldw	r5,-8(fp)
  808b64:	01002074 	movhi	r4,129
  808b68:	21268f04 	addi	r4,r4,-26052
  808b6c:	0808a400 	call	808a40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  808b70:	01c07fc4 	movi	r7,511
  808b74:	01800044 	movi	r6,1
  808b78:	e17fff17 	ldw	r5,-4(fp)
  808b7c:	01002074 	movhi	r4,129
  808b80:	21269504 	addi	r4,r4,-26028
  808b84:	0808a400 	call	808a40 <alt_open_fd>
}  
  808b88:	0001883a 	nop
  808b8c:	e037883a 	mov	sp,fp
  808b90:	dfc00117 	ldw	ra,4(sp)
  808b94:	df000017 	ldw	fp,0(sp)
  808b98:	dec00204 	addi	sp,sp,8
  808b9c:	f800283a 	ret

00808ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808ba0:	defffe04 	addi	sp,sp,-8
  808ba4:	dfc00115 	stw	ra,4(sp)
  808ba8:	df000015 	stw	fp,0(sp)
  808bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808bb0:	00802074 	movhi	r2,129
  808bb4:	10a6f704 	addi	r2,r2,-25636
  808bb8:	10800017 	ldw	r2,0(r2)
  808bbc:	10000526 	beq	r2,zero,808bd4 <alt_get_errno+0x34>
  808bc0:	00802074 	movhi	r2,129
  808bc4:	10a6f704 	addi	r2,r2,-25636
  808bc8:	10800017 	ldw	r2,0(r2)
  808bcc:	103ee83a 	callr	r2
  808bd0:	00000206 	br	808bdc <alt_get_errno+0x3c>
  808bd4:	00802074 	movhi	r2,129
  808bd8:	10a7b604 	addi	r2,r2,-24872
}
  808bdc:	e037883a 	mov	sp,fp
  808be0:	dfc00117 	ldw	ra,4(sp)
  808be4:	df000017 	ldw	fp,0(sp)
  808be8:	dec00204 	addi	sp,sp,8
  808bec:	f800283a 	ret

00808bf0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  808bf0:	defffb04 	addi	sp,sp,-20
  808bf4:	dfc00415 	stw	ra,16(sp)
  808bf8:	df000315 	stw	fp,12(sp)
  808bfc:	dc000215 	stw	r16,8(sp)
  808c00:	df000304 	addi	fp,sp,12
  808c04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  808c08:	e0bffe17 	ldw	r2,-8(fp)
  808c0c:	10800217 	ldw	r2,8(r2)
  808c10:	10d00034 	orhi	r3,r2,16384
  808c14:	e0bffe17 	ldw	r2,-8(fp)
  808c18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808c1c:	e03ffd15 	stw	zero,-12(fp)
  808c20:	00002306 	br	808cb0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808c24:	04002074 	movhi	r16,129
  808c28:	84268f04 	addi	r16,r16,-26052
  808c2c:	e0bffd17 	ldw	r2,-12(fp)
  808c30:	01400304 	movi	r5,12
  808c34:	1009883a 	mov	r4,r2
  808c38:	08015180 	call	801518 <__mulsi3>
  808c3c:	8085883a 	add	r2,r16,r2
  808c40:	10c00017 	ldw	r3,0(r2)
  808c44:	e0bffe17 	ldw	r2,-8(fp)
  808c48:	10800017 	ldw	r2,0(r2)
  808c4c:	1880151e 	bne	r3,r2,808ca4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  808c50:	04002074 	movhi	r16,129
  808c54:	84268f04 	addi	r16,r16,-26052
  808c58:	e0bffd17 	ldw	r2,-12(fp)
  808c5c:	01400304 	movi	r5,12
  808c60:	1009883a 	mov	r4,r2
  808c64:	08015180 	call	801518 <__mulsi3>
  808c68:	8085883a 	add	r2,r16,r2
  808c6c:	10800204 	addi	r2,r2,8
  808c70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808c74:	10000b0e 	bge	r2,zero,808ca4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  808c78:	01400304 	movi	r5,12
  808c7c:	e13ffd17 	ldw	r4,-12(fp)
  808c80:	08015180 	call	801518 <__mulsi3>
  808c84:	1007883a 	mov	r3,r2
  808c88:	00802074 	movhi	r2,129
  808c8c:	10a68f04 	addi	r2,r2,-26052
  808c90:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  808c94:	e0bffe17 	ldw	r2,-8(fp)
  808c98:	18800226 	beq	r3,r2,808ca4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  808c9c:	00bffcc4 	movi	r2,-13
  808ca0:	00000a06 	br	808ccc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808ca4:	e0bffd17 	ldw	r2,-12(fp)
  808ca8:	10800044 	addi	r2,r2,1
  808cac:	e0bffd15 	stw	r2,-12(fp)
  808cb0:	00802074 	movhi	r2,129
  808cb4:	10a6f604 	addi	r2,r2,-25640
  808cb8:	10800017 	ldw	r2,0(r2)
  808cbc:	1007883a 	mov	r3,r2
  808cc0:	e0bffd17 	ldw	r2,-12(fp)
  808cc4:	18bfd72e 	bgeu	r3,r2,808c24 <__alt_data_end+0xff808c24>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  808cc8:	0005883a 	mov	r2,zero
}
  808ccc:	e6ffff04 	addi	sp,fp,-4
  808cd0:	dfc00217 	ldw	ra,8(sp)
  808cd4:	df000117 	ldw	fp,4(sp)
  808cd8:	dc000017 	ldw	r16,0(sp)
  808cdc:	dec00304 	addi	sp,sp,12
  808ce0:	f800283a 	ret

00808ce4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808ce4:	defff604 	addi	sp,sp,-40
  808ce8:	dfc00915 	stw	ra,36(sp)
  808cec:	df000815 	stw	fp,32(sp)
  808cf0:	df000804 	addi	fp,sp,32
  808cf4:	e13ffd15 	stw	r4,-12(fp)
  808cf8:	e17ffe15 	stw	r5,-8(fp)
  808cfc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  808d00:	00bfffc4 	movi	r2,-1
  808d04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  808d08:	00bffb44 	movi	r2,-19
  808d0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  808d10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808d14:	01402074 	movhi	r5,129
  808d18:	2966f404 	addi	r5,r5,-25648
  808d1c:	e13ffd17 	ldw	r4,-12(fp)
  808d20:	08090900 	call	809090 <alt_find_dev>
  808d24:	e0bff815 	stw	r2,-32(fp)
  808d28:	e0bff817 	ldw	r2,-32(fp)
  808d2c:	1000051e 	bne	r2,zero,808d44 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  808d30:	e13ffd17 	ldw	r4,-12(fp)
  808d34:	08091200 	call	809120 <alt_find_file>
  808d38:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  808d3c:	00800044 	movi	r2,1
  808d40:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  808d44:	e0bff817 	ldw	r2,-32(fp)
  808d48:	10002b26 	beq	r2,zero,808df8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  808d4c:	e13ff817 	ldw	r4,-32(fp)
  808d50:	08092340 	call	809234 <alt_get_fd>
  808d54:	e0bff915 	stw	r2,-28(fp)
  808d58:	e0bff917 	ldw	r2,-28(fp)
  808d5c:	1000030e 	bge	r2,zero,808d6c <open+0x88>
    {
      status = index;
  808d60:	e0bff917 	ldw	r2,-28(fp)
  808d64:	e0bffa15 	stw	r2,-24(fp)
  808d68:	00002506 	br	808e00 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  808d6c:	01400304 	movi	r5,12
  808d70:	e13ff917 	ldw	r4,-28(fp)
  808d74:	08015180 	call	801518 <__mulsi3>
  808d78:	1007883a 	mov	r3,r2
  808d7c:	00802074 	movhi	r2,129
  808d80:	10a68f04 	addi	r2,r2,-26052
  808d84:	1885883a 	add	r2,r3,r2
  808d88:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808d8c:	e0fffe17 	ldw	r3,-8(fp)
  808d90:	00900034 	movhi	r2,16384
  808d94:	10bfffc4 	addi	r2,r2,-1
  808d98:	1886703a 	and	r3,r3,r2
  808d9c:	e0bffc17 	ldw	r2,-16(fp)
  808da0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  808da4:	e0bffb17 	ldw	r2,-20(fp)
  808da8:	1000051e 	bne	r2,zero,808dc0 <open+0xdc>
  808dac:	e13ffc17 	ldw	r4,-16(fp)
  808db0:	0808bf00 	call	808bf0 <alt_file_locked>
  808db4:	e0bffa15 	stw	r2,-24(fp)
  808db8:	e0bffa17 	ldw	r2,-24(fp)
  808dbc:	10001016 	blt	r2,zero,808e00 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  808dc0:	e0bff817 	ldw	r2,-32(fp)
  808dc4:	10800317 	ldw	r2,12(r2)
  808dc8:	10000826 	beq	r2,zero,808dec <open+0x108>
  808dcc:	e0bff817 	ldw	r2,-32(fp)
  808dd0:	10800317 	ldw	r2,12(r2)
  808dd4:	e1ffff17 	ldw	r7,-4(fp)
  808dd8:	e1bffe17 	ldw	r6,-8(fp)
  808ddc:	e17ffd17 	ldw	r5,-12(fp)
  808de0:	e13ffc17 	ldw	r4,-16(fp)
  808de4:	103ee83a 	callr	r2
  808de8:	00000106 	br	808df0 <open+0x10c>
  808dec:	0005883a 	mov	r2,zero
  808df0:	e0bffa15 	stw	r2,-24(fp)
  808df4:	00000206 	br	808e00 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  808df8:	00bffb44 	movi	r2,-19
  808dfc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808e00:	e0bffa17 	ldw	r2,-24(fp)
  808e04:	1000090e 	bge	r2,zero,808e2c <open+0x148>
  {
    alt_release_fd (index);  
  808e08:	e13ff917 	ldw	r4,-28(fp)
  808e0c:	0808e440 	call	808e44 <alt_release_fd>
    ALT_ERRNO = -status;
  808e10:	0808ba00 	call	808ba0 <alt_get_errno>
  808e14:	1007883a 	mov	r3,r2
  808e18:	e0bffa17 	ldw	r2,-24(fp)
  808e1c:	0085c83a 	sub	r2,zero,r2
  808e20:	18800015 	stw	r2,0(r3)
    return -1;
  808e24:	00bfffc4 	movi	r2,-1
  808e28:	00000106 	br	808e30 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  808e2c:	e0bff917 	ldw	r2,-28(fp)
}
  808e30:	e037883a 	mov	sp,fp
  808e34:	dfc00117 	ldw	ra,4(sp)
  808e38:	df000017 	ldw	fp,0(sp)
  808e3c:	dec00204 	addi	sp,sp,8
  808e40:	f800283a 	ret

00808e44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  808e44:	defffc04 	addi	sp,sp,-16
  808e48:	dfc00315 	stw	ra,12(sp)
  808e4c:	df000215 	stw	fp,8(sp)
  808e50:	dc000115 	stw	r16,4(sp)
  808e54:	df000204 	addi	fp,sp,8
  808e58:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  808e5c:	e0bffe17 	ldw	r2,-8(fp)
  808e60:	108000d0 	cmplti	r2,r2,3
  808e64:	1000111e 	bne	r2,zero,808eac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  808e68:	04002074 	movhi	r16,129
  808e6c:	84268f04 	addi	r16,r16,-26052
  808e70:	e0bffe17 	ldw	r2,-8(fp)
  808e74:	01400304 	movi	r5,12
  808e78:	1009883a 	mov	r4,r2
  808e7c:	08015180 	call	801518 <__mulsi3>
  808e80:	8085883a 	add	r2,r16,r2
  808e84:	10800204 	addi	r2,r2,8
  808e88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  808e8c:	04002074 	movhi	r16,129
  808e90:	84268f04 	addi	r16,r16,-26052
  808e94:	e0bffe17 	ldw	r2,-8(fp)
  808e98:	01400304 	movi	r5,12
  808e9c:	1009883a 	mov	r4,r2
  808ea0:	08015180 	call	801518 <__mulsi3>
  808ea4:	8085883a 	add	r2,r16,r2
  808ea8:	10000015 	stw	zero,0(r2)
  }
}
  808eac:	0001883a 	nop
  808eb0:	e6ffff04 	addi	sp,fp,-4
  808eb4:	dfc00217 	ldw	ra,8(sp)
  808eb8:	df000117 	ldw	fp,4(sp)
  808ebc:	dc000017 	ldw	r16,0(sp)
  808ec0:	dec00304 	addi	sp,sp,12
  808ec4:	f800283a 	ret

00808ec8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  808ec8:	defffa04 	addi	sp,sp,-24
  808ecc:	df000515 	stw	fp,20(sp)
  808ed0:	df000504 	addi	fp,sp,20
  808ed4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ed8:	0005303a 	rdctl	r2,status
  808edc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808ee0:	e0fffc17 	ldw	r3,-16(fp)
  808ee4:	00bfff84 	movi	r2,-2
  808ee8:	1884703a 	and	r2,r3,r2
  808eec:	1001703a 	wrctl	status,r2
  
  return context;
  808ef0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  808ef4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  808ef8:	e0bfff17 	ldw	r2,-4(fp)
  808efc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  808f00:	e0bffd17 	ldw	r2,-12(fp)
  808f04:	10800017 	ldw	r2,0(r2)
  808f08:	e0fffd17 	ldw	r3,-12(fp)
  808f0c:	18c00117 	ldw	r3,4(r3)
  808f10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  808f14:	e0bffd17 	ldw	r2,-12(fp)
  808f18:	10800117 	ldw	r2,4(r2)
  808f1c:	e0fffd17 	ldw	r3,-12(fp)
  808f20:	18c00017 	ldw	r3,0(r3)
  808f24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  808f28:	e0bffd17 	ldw	r2,-12(fp)
  808f2c:	e0fffd17 	ldw	r3,-12(fp)
  808f30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  808f34:	e0bffd17 	ldw	r2,-12(fp)
  808f38:	e0fffd17 	ldw	r3,-12(fp)
  808f3c:	10c00015 	stw	r3,0(r2)
  808f40:	e0bffb17 	ldw	r2,-20(fp)
  808f44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808f48:	e0bffe17 	ldw	r2,-8(fp)
  808f4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  808f50:	0001883a 	nop
  808f54:	e037883a 	mov	sp,fp
  808f58:	df000017 	ldw	fp,0(sp)
  808f5c:	dec00104 	addi	sp,sp,4
  808f60:	f800283a 	ret

00808f64 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  808f64:	defffb04 	addi	sp,sp,-20
  808f68:	dfc00415 	stw	ra,16(sp)
  808f6c:	df000315 	stw	fp,12(sp)
  808f70:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  808f74:	d0a00a17 	ldw	r2,-32728(gp)
  808f78:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  808f7c:	d0a0cd17 	ldw	r2,-31948(gp)
  808f80:	10800044 	addi	r2,r2,1
  808f84:	d0a0cd15 	stw	r2,-31948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  808f88:	00002e06 	br	809044 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  808f8c:	e0bffd17 	ldw	r2,-12(fp)
  808f90:	10800017 	ldw	r2,0(r2)
  808f94:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  808f98:	e0bffd17 	ldw	r2,-12(fp)
  808f9c:	10800403 	ldbu	r2,16(r2)
  808fa0:	10803fcc 	andi	r2,r2,255
  808fa4:	10000426 	beq	r2,zero,808fb8 <alt_tick+0x54>
  808fa8:	d0a0cd17 	ldw	r2,-31948(gp)
  808fac:	1000021e 	bne	r2,zero,808fb8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  808fb0:	e0bffd17 	ldw	r2,-12(fp)
  808fb4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  808fb8:	e0bffd17 	ldw	r2,-12(fp)
  808fbc:	10800217 	ldw	r2,8(r2)
  808fc0:	d0e0cd17 	ldw	r3,-31948(gp)
  808fc4:	18801d36 	bltu	r3,r2,80903c <alt_tick+0xd8>
  808fc8:	e0bffd17 	ldw	r2,-12(fp)
  808fcc:	10800403 	ldbu	r2,16(r2)
  808fd0:	10803fcc 	andi	r2,r2,255
  808fd4:	1000191e 	bne	r2,zero,80903c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  808fd8:	e0bffd17 	ldw	r2,-12(fp)
  808fdc:	10800317 	ldw	r2,12(r2)
  808fe0:	e0fffd17 	ldw	r3,-12(fp)
  808fe4:	18c00517 	ldw	r3,20(r3)
  808fe8:	1809883a 	mov	r4,r3
  808fec:	103ee83a 	callr	r2
  808ff0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  808ff4:	e0bfff17 	ldw	r2,-4(fp)
  808ff8:	1000031e 	bne	r2,zero,809008 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  808ffc:	e13ffd17 	ldw	r4,-12(fp)
  809000:	0808ec80 	call	808ec8 <alt_alarm_stop>
  809004:	00000d06 	br	80903c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  809008:	e0bffd17 	ldw	r2,-12(fp)
  80900c:	10c00217 	ldw	r3,8(r2)
  809010:	e0bfff17 	ldw	r2,-4(fp)
  809014:	1887883a 	add	r3,r3,r2
  809018:	e0bffd17 	ldw	r2,-12(fp)
  80901c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  809020:	e0bffd17 	ldw	r2,-12(fp)
  809024:	10c00217 	ldw	r3,8(r2)
  809028:	d0a0cd17 	ldw	r2,-31948(gp)
  80902c:	1880032e 	bgeu	r3,r2,80903c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  809030:	e0bffd17 	ldw	r2,-12(fp)
  809034:	00c00044 	movi	r3,1
  809038:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80903c:	e0bffe17 	ldw	r2,-8(fp)
  809040:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809044:	e0fffd17 	ldw	r3,-12(fp)
  809048:	d0a00a04 	addi	r2,gp,-32728
  80904c:	18bfcf1e 	bne	r3,r2,808f8c <__alt_data_end+0xff808f8c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  809050:	0001883a 	nop
}
  809054:	0001883a 	nop
  809058:	e037883a 	mov	sp,fp
  80905c:	dfc00117 	ldw	ra,4(sp)
  809060:	df000017 	ldw	fp,0(sp)
  809064:	dec00204 	addi	sp,sp,8
  809068:	f800283a 	ret

0080906c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80906c:	deffff04 	addi	sp,sp,-4
  809070:	df000015 	stw	fp,0(sp)
  809074:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  809078:	000170fa 	wrctl	ienable,zero
}
  80907c:	0001883a 	nop
  809080:	e037883a 	mov	sp,fp
  809084:	df000017 	ldw	fp,0(sp)
  809088:	dec00104 	addi	sp,sp,4
  80908c:	f800283a 	ret

00809090 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  809090:	defffa04 	addi	sp,sp,-24
  809094:	dfc00515 	stw	ra,20(sp)
  809098:	df000415 	stw	fp,16(sp)
  80909c:	df000404 	addi	fp,sp,16
  8090a0:	e13ffe15 	stw	r4,-8(fp)
  8090a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8090a8:	e0bfff17 	ldw	r2,-4(fp)
  8090ac:	10800017 	ldw	r2,0(r2)
  8090b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8090b4:	e13ffe17 	ldw	r4,-8(fp)
  8090b8:	080182c0 	call	80182c <strlen>
  8090bc:	10800044 	addi	r2,r2,1
  8090c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8090c4:	00000d06 	br	8090fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8090c8:	e0bffc17 	ldw	r2,-16(fp)
  8090cc:	10800217 	ldw	r2,8(r2)
  8090d0:	e0fffd17 	ldw	r3,-12(fp)
  8090d4:	180d883a 	mov	r6,r3
  8090d8:	e17ffe17 	ldw	r5,-8(fp)
  8090dc:	1009883a 	mov	r4,r2
  8090e0:	08094100 	call	809410 <memcmp>
  8090e4:	1000021e 	bne	r2,zero,8090f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8090e8:	e0bffc17 	ldw	r2,-16(fp)
  8090ec:	00000706 	br	80910c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8090f0:	e0bffc17 	ldw	r2,-16(fp)
  8090f4:	10800017 	ldw	r2,0(r2)
  8090f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8090fc:	e0fffc17 	ldw	r3,-16(fp)
  809100:	e0bfff17 	ldw	r2,-4(fp)
  809104:	18bff01e 	bne	r3,r2,8090c8 <__alt_data_end+0xff8090c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  809108:	0005883a 	mov	r2,zero
}
  80910c:	e037883a 	mov	sp,fp
  809110:	dfc00117 	ldw	ra,4(sp)
  809114:	df000017 	ldw	fp,0(sp)
  809118:	dec00204 	addi	sp,sp,8
  80911c:	f800283a 	ret

00809120 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  809120:	defffb04 	addi	sp,sp,-20
  809124:	dfc00415 	stw	ra,16(sp)
  809128:	df000315 	stw	fp,12(sp)
  80912c:	df000304 	addi	fp,sp,12
  809130:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  809134:	00802074 	movhi	r2,129
  809138:	10a6f204 	addi	r2,r2,-25656
  80913c:	10800017 	ldw	r2,0(r2)
  809140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  809144:	00003106 	br	80920c <alt_find_file+0xec>
  {
    len = strlen(next->name);
  809148:	e0bffd17 	ldw	r2,-12(fp)
  80914c:	10800217 	ldw	r2,8(r2)
  809150:	1009883a 	mov	r4,r2
  809154:	080182c0 	call	80182c <strlen>
  809158:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80915c:	e0bffd17 	ldw	r2,-12(fp)
  809160:	10c00217 	ldw	r3,8(r2)
  809164:	e0bffe17 	ldw	r2,-8(fp)
  809168:	10bfffc4 	addi	r2,r2,-1
  80916c:	1885883a 	add	r2,r3,r2
  809170:	10800003 	ldbu	r2,0(r2)
  809174:	10803fcc 	andi	r2,r2,255
  809178:	1080201c 	xori	r2,r2,128
  80917c:	10bfe004 	addi	r2,r2,-128
  809180:	10800bd8 	cmpnei	r2,r2,47
  809184:	1000031e 	bne	r2,zero,809194 <alt_find_file+0x74>
    {
      len -= 1;
  809188:	e0bffe17 	ldw	r2,-8(fp)
  80918c:	10bfffc4 	addi	r2,r2,-1
  809190:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  809194:	e0bffe17 	ldw	r2,-8(fp)
  809198:	e0ffff17 	ldw	r3,-4(fp)
  80919c:	1885883a 	add	r2,r3,r2
  8091a0:	10800003 	ldbu	r2,0(r2)
  8091a4:	10803fcc 	andi	r2,r2,255
  8091a8:	1080201c 	xori	r2,r2,128
  8091ac:	10bfe004 	addi	r2,r2,-128
  8091b0:	10800be0 	cmpeqi	r2,r2,47
  8091b4:	1000081e 	bne	r2,zero,8091d8 <alt_find_file+0xb8>
  8091b8:	e0bffe17 	ldw	r2,-8(fp)
  8091bc:	e0ffff17 	ldw	r3,-4(fp)
  8091c0:	1885883a 	add	r2,r3,r2
  8091c4:	10800003 	ldbu	r2,0(r2)
  8091c8:	10803fcc 	andi	r2,r2,255
  8091cc:	1080201c 	xori	r2,r2,128
  8091d0:	10bfe004 	addi	r2,r2,-128
  8091d4:	10000a1e 	bne	r2,zero,809200 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  8091d8:	e0bffd17 	ldw	r2,-12(fp)
  8091dc:	10800217 	ldw	r2,8(r2)
  8091e0:	e0fffe17 	ldw	r3,-8(fp)
  8091e4:	180d883a 	mov	r6,r3
  8091e8:	e17fff17 	ldw	r5,-4(fp)
  8091ec:	1009883a 	mov	r4,r2
  8091f0:	08094100 	call	809410 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8091f4:	1000021e 	bne	r2,zero,809200 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8091f8:	e0bffd17 	ldw	r2,-12(fp)
  8091fc:	00000806 	br	809220 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  809200:	e0bffd17 	ldw	r2,-12(fp)
  809204:	10800017 	ldw	r2,0(r2)
  809208:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80920c:	e0fffd17 	ldw	r3,-12(fp)
  809210:	00802074 	movhi	r2,129
  809214:	10a6f204 	addi	r2,r2,-25656
  809218:	18bfcb1e 	bne	r3,r2,809148 <__alt_data_end+0xff809148>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80921c:	0005883a 	mov	r2,zero
}
  809220:	e037883a 	mov	sp,fp
  809224:	dfc00117 	ldw	ra,4(sp)
  809228:	df000017 	ldw	fp,0(sp)
  80922c:	dec00204 	addi	sp,sp,8
  809230:	f800283a 	ret

00809234 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  809234:	defffa04 	addi	sp,sp,-24
  809238:	dfc00515 	stw	ra,20(sp)
  80923c:	df000415 	stw	fp,16(sp)
  809240:	dc000315 	stw	r16,12(sp)
  809244:	df000404 	addi	fp,sp,16
  809248:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80924c:	00bffa04 	movi	r2,-24
  809250:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  809254:	e03ffc15 	stw	zero,-16(fp)
  809258:	00002106 	br	8092e0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  80925c:	04002074 	movhi	r16,129
  809260:	84268f04 	addi	r16,r16,-26052
  809264:	e0bffc17 	ldw	r2,-16(fp)
  809268:	01400304 	movi	r5,12
  80926c:	1009883a 	mov	r4,r2
  809270:	08015180 	call	801518 <__mulsi3>
  809274:	8085883a 	add	r2,r16,r2
  809278:	10800017 	ldw	r2,0(r2)
  80927c:	1000151e 	bne	r2,zero,8092d4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  809280:	04002074 	movhi	r16,129
  809284:	84268f04 	addi	r16,r16,-26052
  809288:	e0bffc17 	ldw	r2,-16(fp)
  80928c:	01400304 	movi	r5,12
  809290:	1009883a 	mov	r4,r2
  809294:	08015180 	call	801518 <__mulsi3>
  809298:	8085883a 	add	r2,r16,r2
  80929c:	e0fffe17 	ldw	r3,-8(fp)
  8092a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8092a4:	00802074 	movhi	r2,129
  8092a8:	10a6f604 	addi	r2,r2,-25640
  8092ac:	10c00017 	ldw	r3,0(r2)
  8092b0:	e0bffc17 	ldw	r2,-16(fp)
  8092b4:	1880040e 	bge	r3,r2,8092c8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  8092b8:	00802074 	movhi	r2,129
  8092bc:	10a6f604 	addi	r2,r2,-25640
  8092c0:	e0fffc17 	ldw	r3,-16(fp)
  8092c4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  8092c8:	e0bffc17 	ldw	r2,-16(fp)
  8092cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8092d0:	00000606 	br	8092ec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8092d4:	e0bffc17 	ldw	r2,-16(fp)
  8092d8:	10800044 	addi	r2,r2,1
  8092dc:	e0bffc15 	stw	r2,-16(fp)
  8092e0:	e0bffc17 	ldw	r2,-16(fp)
  8092e4:	10800810 	cmplti	r2,r2,32
  8092e8:	103fdc1e 	bne	r2,zero,80925c <__alt_data_end+0xff80925c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8092ec:	e0bffd17 	ldw	r2,-12(fp)
}
  8092f0:	e6ffff04 	addi	sp,fp,-4
  8092f4:	dfc00217 	ldw	ra,8(sp)
  8092f8:	df000117 	ldw	fp,4(sp)
  8092fc:	dc000017 	ldw	r16,0(sp)
  809300:	dec00304 	addi	sp,sp,12
  809304:	f800283a 	ret

00809308 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  809308:	defffb04 	addi	sp,sp,-20
  80930c:	df000415 	stw	fp,16(sp)
  809310:	df000404 	addi	fp,sp,16
  809314:	e13ffe15 	stw	r4,-8(fp)
  809318:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80931c:	e0bfff17 	ldw	r2,-4(fp)
  809320:	10900070 	cmpltui	r2,r2,16385
  809324:	1000021e 	bne	r2,zero,809330 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  809328:	00900004 	movi	r2,16384
  80932c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  809330:	e0fffe17 	ldw	r3,-8(fp)
  809334:	e0bfff17 	ldw	r2,-4(fp)
  809338:	1885883a 	add	r2,r3,r2
  80933c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  809340:	e0bffe17 	ldw	r2,-8(fp)
  809344:	e0bffc15 	stw	r2,-16(fp)
  809348:	00000506 	br	809360 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80934c:	e0bffc17 	ldw	r2,-16(fp)
  809350:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  809354:	e0bffc17 	ldw	r2,-16(fp)
  809358:	10800804 	addi	r2,r2,32
  80935c:	e0bffc15 	stw	r2,-16(fp)
  809360:	e0fffc17 	ldw	r3,-16(fp)
  809364:	e0bffd17 	ldw	r2,-12(fp)
  809368:	18bff836 	bltu	r3,r2,80934c <__alt_data_end+0xff80934c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80936c:	e0bffe17 	ldw	r2,-8(fp)
  809370:	108007cc 	andi	r2,r2,31
  809374:	10000226 	beq	r2,zero,809380 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  809378:	e0bffc17 	ldw	r2,-16(fp)
  80937c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  809380:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  809384:	0001883a 	nop
  809388:	e037883a 	mov	sp,fp
  80938c:	df000017 	ldw	fp,0(sp)
  809390:	dec00104 	addi	sp,sp,4
  809394:	f800283a 	ret

00809398 <exit>:
  809398:	defffe04 	addi	sp,sp,-8
  80939c:	000b883a 	mov	r5,zero
  8093a0:	dc000015 	stw	r16,0(sp)
  8093a4:	dfc00115 	stw	ra,4(sp)
  8093a8:	2021883a 	mov	r16,r4
  8093ac:	08094400 	call	809440 <__call_exitprocs>
  8093b0:	8009883a 	mov	r4,r16
  8093b4:	08095d00 	call	8095d0 <_exit>

008093b8 <fputs>:
  8093b8:	defffd04 	addi	sp,sp,-12
  8093bc:	dfc00215 	stw	ra,8(sp)
  8093c0:	dc000115 	stw	r16,4(sp)
  8093c4:	d9400015 	stw	r5,0(sp)
  8093c8:	2021883a 	mov	r16,r4
  8093cc:	080182c0 	call	80182c <strlen>
  8093d0:	100f883a 	mov	r7,r2
  8093d4:	00802074 	movhi	r2,129
  8093d8:	d9400017 	ldw	r5,0(sp)
  8093dc:	10a6f004 	addi	r2,r2,-25664
  8093e0:	11000017 	ldw	r4,0(r2)
  8093e4:	00c02034 	movhi	r3,128
  8093e8:	18c9ee04 	addi	r3,r3,10168
  8093ec:	28c00115 	stw	r3,4(r5)
  8093f0:	800d883a 	mov	r6,r16
  8093f4:	08027b80 	call	8027b8 <__sfvwrite_small_dev>
  8093f8:	10bfffe0 	cmpeqi	r2,r2,-1
  8093fc:	0085c83a 	sub	r2,zero,r2
  809400:	dfc00217 	ldw	ra,8(sp)
  809404:	dc000117 	ldw	r16,4(sp)
  809408:	dec00304 	addi	sp,sp,12
  80940c:	f800283a 	ret

00809410 <memcmp>:
  809410:	218d883a 	add	r6,r4,r6
  809414:	21800826 	beq	r4,r6,809438 <memcmp+0x28>
  809418:	20800003 	ldbu	r2,0(r4)
  80941c:	28c00003 	ldbu	r3,0(r5)
  809420:	10c00226 	beq	r2,r3,80942c <memcmp+0x1c>
  809424:	10c5c83a 	sub	r2,r2,r3
  809428:	f800283a 	ret
  80942c:	21000044 	addi	r4,r4,1
  809430:	29400044 	addi	r5,r5,1
  809434:	003ff706 	br	809414 <__alt_data_end+0xff809414>
  809438:	0005883a 	mov	r2,zero
  80943c:	f800283a 	ret

00809440 <__call_exitprocs>:
  809440:	defff504 	addi	sp,sp,-44
  809444:	dd000515 	stw	r20,20(sp)
  809448:	05002074 	movhi	r20,129
  80944c:	dc800315 	stw	r18,12(sp)
  809450:	dfc00a15 	stw	ra,40(sp)
  809454:	df000915 	stw	fp,36(sp)
  809458:	ddc00815 	stw	r23,32(sp)
  80945c:	dd800715 	stw	r22,28(sp)
  809460:	dd400615 	stw	r21,24(sp)
  809464:	dcc00415 	stw	r19,16(sp)
  809468:	dc400215 	stw	r17,8(sp)
  80946c:	dc000115 	stw	r16,4(sp)
  809470:	d9000015 	stw	r4,0(sp)
  809474:	2825883a 	mov	r18,r5
  809478:	a526ef04 	addi	r20,r20,-25668
  80947c:	a4400017 	ldw	r17,0(r20)
  809480:	8cc00c17 	ldw	r19,48(r17)
  809484:	8c400c04 	addi	r17,r17,48
  809488:	98004526 	beq	r19,zero,8095a0 <__call_exitprocs+0x160>
  80948c:	9c000117 	ldw	r16,4(r19)
  809490:	00900034 	movhi	r2,16384
  809494:	10bfffc4 	addi	r2,r2,-1
  809498:	9d402217 	ldw	r21,136(r19)
  80949c:	85bfffc4 	addi	r22,r16,-1
  8094a0:	80a1883a 	add	r16,r16,r2
  8094a4:	8421883a 	add	r16,r16,r16
  8094a8:	8421883a 	add	r16,r16,r16
  8094ac:	ac2f883a 	add	r23,r21,r16
  8094b0:	84000204 	addi	r16,r16,8
  8094b4:	9c21883a 	add	r16,r19,r16
  8094b8:	b0002716 	blt	r22,zero,809558 <__call_exitprocs+0x118>
  8094bc:	90000726 	beq	r18,zero,8094dc <__call_exitprocs+0x9c>
  8094c0:	a800041e 	bne	r21,zero,8094d4 <__call_exitprocs+0x94>
  8094c4:	b5bfffc4 	addi	r22,r22,-1
  8094c8:	bdffff04 	addi	r23,r23,-4
  8094cc:	843fff04 	addi	r16,r16,-4
  8094d0:	003ff906 	br	8094b8 <__alt_data_end+0xff8094b8>
  8094d4:	b9002017 	ldw	r4,128(r23)
  8094d8:	913ffa1e 	bne	r18,r4,8094c4 <__alt_data_end+0xff8094c4>
  8094dc:	99000117 	ldw	r4,4(r19)
  8094e0:	82000017 	ldw	r8,0(r16)
  8094e4:	213fffc4 	addi	r4,r4,-1
  8094e8:	b100021e 	bne	r22,r4,8094f4 <__call_exitprocs+0xb4>
  8094ec:	9d800115 	stw	r22,4(r19)
  8094f0:	00000106 	br	8094f8 <__call_exitprocs+0xb8>
  8094f4:	80000015 	stw	zero,0(r16)
  8094f8:	403ff226 	beq	r8,zero,8094c4 <__alt_data_end+0xff8094c4>
  8094fc:	9f000117 	ldw	fp,4(r19)
  809500:	a8000526 	beq	r21,zero,809518 <__call_exitprocs+0xd8>
  809504:	00800044 	movi	r2,1
  809508:	1592983a 	sll	r9,r2,r22
  80950c:	a9404017 	ldw	r5,256(r21)
  809510:	494a703a 	and	r5,r9,r5
  809514:	2800021e 	bne	r5,zero,809520 <__call_exitprocs+0xe0>
  809518:	403ee83a 	callr	r8
  80951c:	00000906 	br	809544 <__call_exitprocs+0x104>
  809520:	a9004117 	ldw	r4,260(r21)
  809524:	4908703a 	and	r4,r9,r4
  809528:	2000041e 	bne	r4,zero,80953c <__call_exitprocs+0xfc>
  80952c:	b9400017 	ldw	r5,0(r23)
  809530:	d9000017 	ldw	r4,0(sp)
  809534:	403ee83a 	callr	r8
  809538:	00000206 	br	809544 <__call_exitprocs+0x104>
  80953c:	b9000017 	ldw	r4,0(r23)
  809540:	403ee83a 	callr	r8
  809544:	99000117 	ldw	r4,4(r19)
  809548:	e13fcc1e 	bne	fp,r4,80947c <__alt_data_end+0xff80947c>
  80954c:	89000017 	ldw	r4,0(r17)
  809550:	993fdc26 	beq	r19,r4,8094c4 <__alt_data_end+0xff8094c4>
  809554:	003fc906 	br	80947c <__alt_data_end+0xff80947c>
  809558:	00802034 	movhi	r2,128
  80955c:	10943704 	addi	r2,r2,20700
  809560:	10000f26 	beq	r2,zero,8095a0 <__call_exitprocs+0x160>
  809564:	99400117 	ldw	r5,4(r19)
  809568:	99000017 	ldw	r4,0(r19)
  80956c:	2800091e 	bne	r5,zero,809594 <__call_exitprocs+0x154>
  809570:	20000826 	beq	r4,zero,809594 <__call_exitprocs+0x154>
  809574:	89000015 	stw	r4,0(r17)
  809578:	a8000226 	beq	r21,zero,809584 <__call_exitprocs+0x144>
  80957c:	a809883a 	mov	r4,r21
  809580:	08050dc0 	call	8050dc <free>
  809584:	9809883a 	mov	r4,r19
  809588:	08050dc0 	call	8050dc <free>
  80958c:	8cc00017 	ldw	r19,0(r17)
  809590:	003fbd06 	br	809488 <__alt_data_end+0xff809488>
  809594:	9823883a 	mov	r17,r19
  809598:	2027883a 	mov	r19,r4
  80959c:	003fba06 	br	809488 <__alt_data_end+0xff809488>
  8095a0:	dfc00a17 	ldw	ra,40(sp)
  8095a4:	df000917 	ldw	fp,36(sp)
  8095a8:	ddc00817 	ldw	r23,32(sp)
  8095ac:	dd800717 	ldw	r22,28(sp)
  8095b0:	dd400617 	ldw	r21,24(sp)
  8095b4:	dd000517 	ldw	r20,20(sp)
  8095b8:	dcc00417 	ldw	r19,16(sp)
  8095bc:	dc800317 	ldw	r18,12(sp)
  8095c0:	dc400217 	ldw	r17,8(sp)
  8095c4:	dc000117 	ldw	r16,4(sp)
  8095c8:	dec00b04 	addi	sp,sp,44
  8095cc:	f800283a 	ret

008095d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8095d0:	defffd04 	addi	sp,sp,-12
  8095d4:	df000215 	stw	fp,8(sp)
  8095d8:	df000204 	addi	fp,sp,8
  8095dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8095e0:	0001883a 	nop
  8095e4:	e0bfff17 	ldw	r2,-4(fp)
  8095e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8095ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8095f0:	10000226 	beq	r2,zero,8095fc <_exit+0x2c>
    ALT_SIM_FAIL();
  8095f4:	002af070 	cmpltui	zero,zero,43969
  8095f8:	00000106 	br	809600 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8095fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  809600:	003fff06 	br	809600 <__alt_data_end+0xff809600>
