
pipeline_test_2.elf:     file format elf32-littlenios2
pipeline_test_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x018001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x01800000 paddr 0x01800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01800020 paddr 0x01800020 align 2**12
         filesz 0x00005940 memsz 0x00005940 flags r-x
    LOAD off    0x00006960 vaddr 0x01805960 paddr 0x018073cc align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008e38 vaddr 0x01808e38 paddr 0x01808e38 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01800000  01800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01800020  01800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005758  018001c0  018001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  01805918  01805918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  01805960  018073cc  00006960  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  01808e38  01808e38  00008e38  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  01808f88  01808f88  000083cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000083cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a28  00000000  00000000  000083f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001633e  00000000  00000000  00008e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005fdf  00000000  00000000  0001f156  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068b8  00000000  00000000  00025135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000157c  00000000  00000000  0002b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000237e  00000000  00000000  0002cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a51  00000000  00000000  0002f2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00033d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000668  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000368f6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000368f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000368fc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000368fd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000368fe  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036902  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036906  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003690a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00036913  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003691c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00036925  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000009  00000000  00000000  00036937  2**0
                  CONTENTS, READONLY
 29 .jdi          0000603d  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048203  00000000  00000000  0003c97d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01800000 l    d  .entry	00000000 .entry
01800020 l    d  .exceptions	00000000 .exceptions
018001c0 l    d  .text	00000000 .text
01805918 l    d  .rodata	00000000 .rodata
01805960 l    d  .rwdata	00000000 .rwdata
01808e38 l    d  .bss	00000000 .bss
01808f88 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pipeline_test_2_bsp//obj/HAL/src/crt0.o
018001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0180039c l     F .text	00000008 __fp_unlock
018003b0 l     F .text	0000019c __sinit.part.1
0180054c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01805960 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0180303c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01803164 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01803190 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01803298 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01803394 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01803480 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01803670 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
018073bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
018038f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01803a48 l     F .text	00000038 alt_dev_reg
01806334 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01803d48 l     F .text	0000020c altera_avalon_jtag_uart_irq
01803f54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01804594 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
018047f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01804cb0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01804e10 l     F .text	00000050 alt_get_errno
01804e60 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01802e0c g     F .text	00000054 _isatty_r
018035ac g     F .text	0000007c alt_main
01800230 g     F .text	000000c0 _puts_r
01808e88 g     O .bss	00000100 alt_irq
01802b34 g     F .text	00000060 _lseek_r
018073cc g       *ABS*	00000000 __flash_rwdata_start
01808f88 g       *ABS*	00000000 __alt_heap_start
018020e8 g     F .text	0000005c __sseek
018006fc g     F .text	00000010 __sinit
01800554 g     F .text	00000078 __sfmoreglue
0180364c g     F .text	00000024 __malloc_unlock
018017d4 g     F .text	0000015c memmove
018006e4 g     F .text	00000018 _cleanup
01800000 g     F .entry	0000001c __reset
01800020 g       *ABS*	00000000 __flash_exceptions_start
01802db0 g     F .text	0000005c _fstat_r
01808e44 g     O .bss	00000004 errno
01802064 g     F .text	00000008 __seofread
01808e4c g     O .bss	00000004 alt_argv
0180f394 g       *ABS*	00000000 _gp
018061b4 g     O .rwdata	00000180 alt_fd_list
0180527c g     F .text	00000090 alt_find_dev
0180168c g     F .text	00000148 memcpy
018003a4 g     F .text	0000000c _cleanup_r
01804d94 g     F .text	0000007c alt_io_redirect
01805918 g       *ABS*	00000000 __DTOR_END__
018002f0 g     F .text	00000014 puts
01804154 g     F .text	0000021c altera_avalon_jtag_uart_read
01802f58 g     F .text	00000064 .hidden __udivsi3
018032e8 g     F .text	000000ac isatty
018054f4 g     F .text	00000090 alt_icache_flush
01808e40 g     O .bss	00000004 __malloc_top_pad
0180074c g     F .text	000004c8 __sfvwrite_r
01801fbc g     F .text	00000054 _sbrk_r
01802d50 g     F .text	00000060 _read_r
018073b4 g     O .rwdata	00000004 alt_max_fd
01802354 g     F .text	000000f0 _fclose_r
018026d0 g     F .text	00000030 fflush
01808e3c g     O .bss	00000004 __malloc_max_sbrked_mem
018034d0 g     F .text	000000dc lseek
01807394 g     O .rwdata	00000004 _global_impure_ptr
01801a58 g     F .text	00000564 _realloc_r
01808f88 g       *ABS*	00000000 __bss_end
01804bc0 g     F .text	000000f0 alt_iic_isr_register
01805150 g     F .text	00000108 alt_tick
0180071c g     F .text	00000018 __fp_lock_all
01804b74 g     F .text	0000004c alt_ic_irq_enabled
018050b4 g     F .text	0000009c alt_alarm_stop
01808e54 g     O .bss	00000004 alt_irq_active
018000ec g     F .exceptions	000000d4 alt_irq_handler
0180618c g     O .rwdata	00000028 alt_dev_null
018047d8 g     F .text	00000020 alt_dcache_flush_all
018073cc g       *ABS*	00000000 __ram_rwdata_end
018073ac g     O .rwdata	00000008 alt_dev_list
01803948 g     F .text	00000100 write
01805960 g       *ABS*	00000000 __ram_rodata_end
018031e0 g     F .text	000000b8 fstat
01802fbc g     F .text	00000058 .hidden __umodsi3
01808f88 g       *ABS*	00000000 end
01803c80 g     F .text	000000c8 altera_avalon_jtag_uart_init
01805918 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0180460c g     F .text	0000008c alt_avalon_timer_sc_init
01804370 g     F .text	00000224 altera_avalon_jtag_uart_write
0180070c g     F .text	00000004 __sfp_lock_acquire
018015a8 g     F .text	000000e4 memchr
01802824 g     F .text	00000310 _free_r
01805764 g     F .text	00000180 __call_exitprocs
0180739c g     O .rwdata	00000004 __malloc_sbrk_base
018001c0 g     F .text	0000003c _start
01808e58 g     O .bss	00000004 _alt_tick_rate
01808e5c g     O .bss	00000004 _alt_nticks
018036c0 g     F .text	00000104 read
01803ab8 g     F .text	00000064 alt_sys_init
0180564c g     F .text	00000118 __register_exitproc
01803ffc g     F .text	00000068 altera_avalon_jtag_uart_close
01803014 g     F .text	00000028 .hidden __mulsi3
01805960 g       *ABS*	00000000 __ram_rwdata_start
01805918 g       *ABS*	00000000 __ram_rodata_start
01808e60 g     O .bss	00000028 __malloc_current_mallinfo
01803b1c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01805420 g     F .text	000000d4 alt_get_fd
01802300 g     F .text	00000054 _close_r
018055d0 g     F .text	0000007c memcmp
01803bdc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01808f88 g       *ABS*	00000000 __alt_stack_base
01803c2c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
018021ac g     F .text	00000154 __swsetup_r
018005cc g     F .text	00000118 __sfp
01805d84 g     O .rwdata	00000408 __malloc_av_
01800718 g     F .text	00000004 __sinit_lock_release
01802010 g     F .text	00000054 __sread
0180530c g     F .text	00000114 alt_find_file
01804848 g     F .text	000000a4 alt_dev_llist_insert
01803628 g     F .text	00000024 __malloc_lock
01803848 g     F .text	000000b0 sbrk
01802674 g     F .text	0000005c _fflush_r
01808e38 g       *ABS*	00000000 __bss_start
01801930 g     F .text	00000128 memset
018001fc g     F .text	00000034 main
01808e50 g     O .bss	00000004 alt_envp
01808e38 g     O .bss	00000004 __malloc_max_total_mem
01803b7c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01802144 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01802444 g     F .text	00000014 fclose
01800d9c g     F .text	0000080c _malloc_r
018073b8 g     O .rwdata	00000004 alt_errno
01800c14 g     F .text	000000c4 _fwalk
01802e60 g     F .text	00000084 .hidden __divsi3
01802700 g     F .text	00000124 _malloc_trim_r
01805918 g       *ABS*	00000000 __CTOR_END__
01805918 g       *ABS*	00000000 __flash_rodata_start
01805918 g       *ABS*	00000000 __DTOR_LIST__
01803a80 g     F .text	00000038 alt_irq_init
018037c4 g     F .text	00000084 alt_release_fd
01805584 g     F .text	00000014 atexit
0180214c g     F .text	00000060 _write_r
01807398 g     O .rwdata	00000004 _impure_ptr
01808e48 g     O .bss	00000004 alt_argc
01802458 g     F .text	0000021c __sflush_r
0180494c g     F .text	00000060 _do_dtors
01800020 g       .exceptions	00000000 alt_irq_entry
01800734 g     F .text	00000018 __fp_unlock_all
018073a4 g     O .rwdata	00000008 alt_fs_list
01800020 g       *ABS*	00000000 __ram_exceptions_start
018049e0 g     F .text	00000050 alt_ic_isr_register
018073cc g       *ABS*	00000000 _edata
01808f88 g       *ABS*	00000000 _end
018001c0 g       *ABS*	00000000 __ram_exceptions_end
01804064 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01804ad0 g     F .text	000000a4 alt_ic_irq_disable
0180206c g     F .text	0000007c __swrite
018073a0 g     O .rwdata	00000004 __malloc_trim_threshold
01805258 g     F .text	00000024 altera_nios2_qsys_irq_init
01805598 g     F .text	00000038 exit
01800cd8 g     F .text	000000c4 _fwalk_reent
01802ee4 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01800020 g     F .exceptions	00000000 alt_exception
01800710 g     F .text	00000004 __sfp_lock_release
01800000 g       *ABS*	00000000 __alt_mem_sdram
018058e4 g     F .text	00000034 _exit
01804698 g     F .text	00000140 alt_alarm_start
01802b94 g     F .text	000001bc __smakebuf_r
01800304 g     F .text	00000098 strlen
01804f54 g     F .text	00000160 open
018049ac g     F .text	00000034 alt_icache_flush_all
018073c0 g     O .rwdata	00000004 alt_priority_mask
01804a30 g     F .text	000000a0 alt_ic_irq_enable
018073c4 g     O .rwdata	00000008 alt_alarm_list
018048ec g     F .text	00000060 _do_ctors
0180308c g     F .text	000000d8 close
018033fc g     F .text	00000084 alt_load
01800714 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 1800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 180000c:	00bffd16 	blt	zero,r2,1800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1800010:	00406034 	movhi	at,384
    ori r1, r1, %lo(_start)
 1800014:	08407014 	ori	at,at,448
    jmp r1
 1800018:	0800683a 	jmp	at
 180001c:	00000000 	call	0 <__alt_mem_sdram-0x1800000>

Disassembly of section .exceptions:

01800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 180002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 180003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 180004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 180005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 180006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 180007c:	10000326 	beq	r2,zero,180008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1800080:	20000226 	beq	r4,zero,180008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1800084:	18000ec0 	call	18000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1800088:	00000306 	br	1800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 180008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1800090:	e8bfff17 	ldw	r2,-4(ea)

01800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 180009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 18000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 18000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 18000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 18000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 18000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 18000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 18000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 18000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 18000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 18000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 18000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 18000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 18000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 18000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 18000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 18000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 18000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 18000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 18000e8:	ef80083a 	eret

018000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 18000ec:	defff904 	addi	sp,sp,-28
 18000f0:	dfc00615 	stw	ra,24(sp)
 18000f4:	df000515 	stw	fp,20(sp)
 18000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 18000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1800100:	0005313a 	rdctl	r2,ipending
 1800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 180010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1800114:	00800044 	movi	r2,1
 1800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 180011c:	e0fffb17 	ldw	r3,-20(fp)
 1800120:	e0bffc17 	ldw	r2,-16(fp)
 1800124:	1884703a 	and	r2,r3,r2
 1800128:	10001426 	beq	r2,zero,180017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 180012c:	00806074 	movhi	r2,385
 1800130:	10a3a204 	addi	r2,r2,-29048
 1800134:	e0fffd17 	ldw	r3,-12(fp)
 1800138:	180690fa 	slli	r3,r3,3
 180013c:	10c5883a 	add	r2,r2,r3
 1800140:	10c00017 	ldw	r3,0(r2)
 1800144:	00806074 	movhi	r2,385
 1800148:	10a3a204 	addi	r2,r2,-29048
 180014c:	e13ffd17 	ldw	r4,-12(fp)
 1800150:	200890fa 	slli	r4,r4,3
 1800154:	1105883a 	add	r2,r2,r4
 1800158:	10800104 	addi	r2,r2,4
 180015c:	10800017 	ldw	r2,0(r2)
 1800160:	1009883a 	mov	r4,r2
 1800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180016c:	0005313a 	rdctl	r2,ipending
 1800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1800174:	e0bfff17 	ldw	r2,-4(fp)
 1800178:	00000706 	br	1800198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 180017c:	e0bffc17 	ldw	r2,-16(fp)
 1800180:	1085883a 	add	r2,r2,r2
 1800184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1800188:	e0bffd17 	ldw	r2,-12(fp)
 180018c:	10800044 	addi	r2,r2,1
 1800190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1800194:	003fe106 	br	180011c <__alt_data_end+0xff80011c>

    active = alt_irq_pending ();
 1800198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 180019c:	e0bffb17 	ldw	r2,-20(fp)
 18001a0:	103fdb1e 	bne	r2,zero,1800110 <__alt_data_end+0xff800110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 18001a4:	0001883a 	nop
}
 18001a8:	0001883a 	nop
 18001ac:	e037883a 	mov	sp,fp
 18001b0:	dfc00117 	ldw	ra,4(sp)
 18001b4:	df000017 	ldw	fp,0(sp)
 18001b8:	dec00204 	addi	sp,sp,8
 18001bc:	f800283a 	ret

Disassembly of section .text:

018001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 18001c0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 18001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 18001c8:	06806034 	movhi	gp,384
    ori gp, gp, %lo(_gp)
 18001cc:	d6bce514 	ori	gp,gp,62356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 18001d0:	00806034 	movhi	r2,384
    ori r2, r2, %lo(__bss_start)
 18001d4:	10a38e14 	ori	r2,r2,36408

    movhi r3, %hi(__bss_end)
 18001d8:	00c06034 	movhi	r3,384
    ori r3, r3, %lo(__bss_end)
 18001dc:	18e3e214 	ori	r3,r3,36744

    beq r2, r3, 1f
 18001e0:	10c00326 	beq	r2,r3,18001f0 <_start+0x30>

0:
    stw zero, (r2)
 18001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 18001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 18001ec:	10fffd36 	bltu	r2,r3,18001e4 <__alt_data_end+0xff8001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 18001f0:	18033fc0 	call	18033fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 18001f4:	18035ac0 	call	18035ac <alt_main>

018001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 18001f8:	003fff06 	br	18001f8 <__alt_data_end+0xff8001f8>

018001fc <main>:
 */

#include <stdio.h>

int main()
{
 18001fc:	defffe04 	addi	sp,sp,-8
 1800200:	dfc00115 	stw	ra,4(sp)
 1800204:	df000015 	stw	fp,0(sp)
 1800208:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 180020c:	01006034 	movhi	r4,384
 1800210:	21164604 	addi	r4,r4,22808
 1800214:	18002f00 	call	18002f0 <puts>

  return 0;
 1800218:	0005883a 	mov	r2,zero
}
 180021c:	e037883a 	mov	sp,fp
 1800220:	dfc00117 	ldw	ra,4(sp)
 1800224:	df000017 	ldw	fp,0(sp)
 1800228:	dec00204 	addi	sp,sp,8
 180022c:	f800283a 	ret

01800230 <_puts_r>:
 1800230:	defff604 	addi	sp,sp,-40
 1800234:	dc000715 	stw	r16,28(sp)
 1800238:	2021883a 	mov	r16,r4
 180023c:	2809883a 	mov	r4,r5
 1800240:	dc400815 	stw	r17,32(sp)
 1800244:	dfc00915 	stw	ra,36(sp)
 1800248:	2823883a 	mov	r17,r5
 180024c:	18003040 	call	1800304 <strlen>
 1800250:	10c00044 	addi	r3,r2,1
 1800254:	d8800115 	stw	r2,4(sp)
 1800258:	00806034 	movhi	r2,384
 180025c:	10964b04 	addi	r2,r2,22828
 1800260:	d8800215 	stw	r2,8(sp)
 1800264:	00800044 	movi	r2,1
 1800268:	d8800315 	stw	r2,12(sp)
 180026c:	00800084 	movi	r2,2
 1800270:	dc400015 	stw	r17,0(sp)
 1800274:	d8c00615 	stw	r3,24(sp)
 1800278:	dec00415 	stw	sp,16(sp)
 180027c:	d8800515 	stw	r2,20(sp)
 1800280:	80000226 	beq	r16,zero,180028c <_puts_r+0x5c>
 1800284:	80800e17 	ldw	r2,56(r16)
 1800288:	10001426 	beq	r2,zero,18002dc <_puts_r+0xac>
 180028c:	81400217 	ldw	r5,8(r16)
 1800290:	2880030b 	ldhu	r2,12(r5)
 1800294:	10c8000c 	andi	r3,r2,8192
 1800298:	1800061e 	bne	r3,zero,18002b4 <_puts_r+0x84>
 180029c:	29001917 	ldw	r4,100(r5)
 18002a0:	00f7ffc4 	movi	r3,-8193
 18002a4:	10880014 	ori	r2,r2,8192
 18002a8:	20c6703a 	and	r3,r4,r3
 18002ac:	2880030d 	sth	r2,12(r5)
 18002b0:	28c01915 	stw	r3,100(r5)
 18002b4:	d9800404 	addi	r6,sp,16
 18002b8:	8009883a 	mov	r4,r16
 18002bc:	180074c0 	call	180074c <__sfvwrite_r>
 18002c0:	1000091e 	bne	r2,zero,18002e8 <_puts_r+0xb8>
 18002c4:	00800284 	movi	r2,10
 18002c8:	dfc00917 	ldw	ra,36(sp)
 18002cc:	dc400817 	ldw	r17,32(sp)
 18002d0:	dc000717 	ldw	r16,28(sp)
 18002d4:	dec00a04 	addi	sp,sp,40
 18002d8:	f800283a 	ret
 18002dc:	8009883a 	mov	r4,r16
 18002e0:	18006fc0 	call	18006fc <__sinit>
 18002e4:	003fe906 	br	180028c <__alt_data_end+0xff80028c>
 18002e8:	00bfffc4 	movi	r2,-1
 18002ec:	003ff606 	br	18002c8 <__alt_data_end+0xff8002c8>

018002f0 <puts>:
 18002f0:	00806034 	movhi	r2,384
 18002f4:	109ce604 	addi	r2,r2,29592
 18002f8:	200b883a 	mov	r5,r4
 18002fc:	11000017 	ldw	r4,0(r2)
 1800300:	18002301 	jmpi	1800230 <_puts_r>

01800304 <strlen>:
 1800304:	208000cc 	andi	r2,r4,3
 1800308:	10002026 	beq	r2,zero,180038c <strlen+0x88>
 180030c:	20800007 	ldb	r2,0(r4)
 1800310:	10002026 	beq	r2,zero,1800394 <strlen+0x90>
 1800314:	2005883a 	mov	r2,r4
 1800318:	00000206 	br	1800324 <strlen+0x20>
 180031c:	10c00007 	ldb	r3,0(r2)
 1800320:	18001826 	beq	r3,zero,1800384 <strlen+0x80>
 1800324:	10800044 	addi	r2,r2,1
 1800328:	10c000cc 	andi	r3,r2,3
 180032c:	183ffb1e 	bne	r3,zero,180031c <__alt_data_end+0xff80031c>
 1800330:	10c00017 	ldw	r3,0(r2)
 1800334:	01ffbff4 	movhi	r7,65279
 1800338:	39ffbfc4 	addi	r7,r7,-257
 180033c:	00ca303a 	nor	r5,zero,r3
 1800340:	01a02074 	movhi	r6,32897
 1800344:	19c7883a 	add	r3,r3,r7
 1800348:	31a02004 	addi	r6,r6,-32640
 180034c:	1946703a 	and	r3,r3,r5
 1800350:	1986703a 	and	r3,r3,r6
 1800354:	1800091e 	bne	r3,zero,180037c <strlen+0x78>
 1800358:	10800104 	addi	r2,r2,4
 180035c:	10c00017 	ldw	r3,0(r2)
 1800360:	19cb883a 	add	r5,r3,r7
 1800364:	00c6303a 	nor	r3,zero,r3
 1800368:	28c6703a 	and	r3,r5,r3
 180036c:	1986703a 	and	r3,r3,r6
 1800370:	183ff926 	beq	r3,zero,1800358 <__alt_data_end+0xff800358>
 1800374:	00000106 	br	180037c <strlen+0x78>
 1800378:	10800044 	addi	r2,r2,1
 180037c:	10c00007 	ldb	r3,0(r2)
 1800380:	183ffd1e 	bne	r3,zero,1800378 <__alt_data_end+0xff800378>
 1800384:	1105c83a 	sub	r2,r2,r4
 1800388:	f800283a 	ret
 180038c:	2005883a 	mov	r2,r4
 1800390:	003fe706 	br	1800330 <__alt_data_end+0xff800330>
 1800394:	0005883a 	mov	r2,zero
 1800398:	f800283a 	ret

0180039c <__fp_unlock>:
 180039c:	0005883a 	mov	r2,zero
 18003a0:	f800283a 	ret

018003a4 <_cleanup_r>:
 18003a4:	01406034 	movhi	r5,384
 18003a8:	2948d504 	addi	r5,r5,9044
 18003ac:	1800cd81 	jmpi	1800cd8 <_fwalk_reent>

018003b0 <__sinit.part.1>:
 18003b0:	defff704 	addi	sp,sp,-36
 18003b4:	00c06034 	movhi	r3,384
 18003b8:	dfc00815 	stw	ra,32(sp)
 18003bc:	ddc00715 	stw	r23,28(sp)
 18003c0:	dd800615 	stw	r22,24(sp)
 18003c4:	dd400515 	stw	r21,20(sp)
 18003c8:	dd000415 	stw	r20,16(sp)
 18003cc:	dcc00315 	stw	r19,12(sp)
 18003d0:	dc800215 	stw	r18,8(sp)
 18003d4:	dc400115 	stw	r17,4(sp)
 18003d8:	dc000015 	stw	r16,0(sp)
 18003dc:	18c0e904 	addi	r3,r3,932
 18003e0:	24000117 	ldw	r16,4(r4)
 18003e4:	20c00f15 	stw	r3,60(r4)
 18003e8:	2080bb04 	addi	r2,r4,748
 18003ec:	00c000c4 	movi	r3,3
 18003f0:	20c0b915 	stw	r3,740(r4)
 18003f4:	2080ba15 	stw	r2,744(r4)
 18003f8:	2000b815 	stw	zero,736(r4)
 18003fc:	05c00204 	movi	r23,8
 1800400:	00800104 	movi	r2,4
 1800404:	2025883a 	mov	r18,r4
 1800408:	b80d883a 	mov	r6,r23
 180040c:	81001704 	addi	r4,r16,92
 1800410:	000b883a 	mov	r5,zero
 1800414:	80000015 	stw	zero,0(r16)
 1800418:	80000115 	stw	zero,4(r16)
 180041c:	80000215 	stw	zero,8(r16)
 1800420:	8080030d 	sth	r2,12(r16)
 1800424:	80001915 	stw	zero,100(r16)
 1800428:	8000038d 	sth	zero,14(r16)
 180042c:	80000415 	stw	zero,16(r16)
 1800430:	80000515 	stw	zero,20(r16)
 1800434:	80000615 	stw	zero,24(r16)
 1800438:	18019300 	call	1801930 <memset>
 180043c:	05806034 	movhi	r22,384
 1800440:	94400217 	ldw	r17,8(r18)
 1800444:	05406034 	movhi	r21,384
 1800448:	05006034 	movhi	r20,384
 180044c:	04c06034 	movhi	r19,384
 1800450:	b5880404 	addi	r22,r22,8208
 1800454:	ad481b04 	addi	r21,r21,8300
 1800458:	a5083a04 	addi	r20,r20,8424
 180045c:	9cc85104 	addi	r19,r19,8516
 1800460:	85800815 	stw	r22,32(r16)
 1800464:	85400915 	stw	r21,36(r16)
 1800468:	85000a15 	stw	r20,40(r16)
 180046c:	84c00b15 	stw	r19,44(r16)
 1800470:	84000715 	stw	r16,28(r16)
 1800474:	00800284 	movi	r2,10
 1800478:	8880030d 	sth	r2,12(r17)
 180047c:	00800044 	movi	r2,1
 1800480:	b80d883a 	mov	r6,r23
 1800484:	89001704 	addi	r4,r17,92
 1800488:	000b883a 	mov	r5,zero
 180048c:	88000015 	stw	zero,0(r17)
 1800490:	88000115 	stw	zero,4(r17)
 1800494:	88000215 	stw	zero,8(r17)
 1800498:	88001915 	stw	zero,100(r17)
 180049c:	8880038d 	sth	r2,14(r17)
 18004a0:	88000415 	stw	zero,16(r17)
 18004a4:	88000515 	stw	zero,20(r17)
 18004a8:	88000615 	stw	zero,24(r17)
 18004ac:	18019300 	call	1801930 <memset>
 18004b0:	94000317 	ldw	r16,12(r18)
 18004b4:	00800484 	movi	r2,18
 18004b8:	8c400715 	stw	r17,28(r17)
 18004bc:	8d800815 	stw	r22,32(r17)
 18004c0:	8d400915 	stw	r21,36(r17)
 18004c4:	8d000a15 	stw	r20,40(r17)
 18004c8:	8cc00b15 	stw	r19,44(r17)
 18004cc:	8080030d 	sth	r2,12(r16)
 18004d0:	00800084 	movi	r2,2
 18004d4:	80000015 	stw	zero,0(r16)
 18004d8:	80000115 	stw	zero,4(r16)
 18004dc:	80000215 	stw	zero,8(r16)
 18004e0:	80001915 	stw	zero,100(r16)
 18004e4:	8080038d 	sth	r2,14(r16)
 18004e8:	80000415 	stw	zero,16(r16)
 18004ec:	80000515 	stw	zero,20(r16)
 18004f0:	80000615 	stw	zero,24(r16)
 18004f4:	b80d883a 	mov	r6,r23
 18004f8:	000b883a 	mov	r5,zero
 18004fc:	81001704 	addi	r4,r16,92
 1800500:	18019300 	call	1801930 <memset>
 1800504:	00800044 	movi	r2,1
 1800508:	84000715 	stw	r16,28(r16)
 180050c:	85800815 	stw	r22,32(r16)
 1800510:	85400915 	stw	r21,36(r16)
 1800514:	85000a15 	stw	r20,40(r16)
 1800518:	84c00b15 	stw	r19,44(r16)
 180051c:	90800e15 	stw	r2,56(r18)
 1800520:	dfc00817 	ldw	ra,32(sp)
 1800524:	ddc00717 	ldw	r23,28(sp)
 1800528:	dd800617 	ldw	r22,24(sp)
 180052c:	dd400517 	ldw	r21,20(sp)
 1800530:	dd000417 	ldw	r20,16(sp)
 1800534:	dcc00317 	ldw	r19,12(sp)
 1800538:	dc800217 	ldw	r18,8(sp)
 180053c:	dc400117 	ldw	r17,4(sp)
 1800540:	dc000017 	ldw	r16,0(sp)
 1800544:	dec00904 	addi	sp,sp,36
 1800548:	f800283a 	ret

0180054c <__fp_lock>:
 180054c:	0005883a 	mov	r2,zero
 1800550:	f800283a 	ret

01800554 <__sfmoreglue>:
 1800554:	defffc04 	addi	sp,sp,-16
 1800558:	dc800215 	stw	r18,8(sp)
 180055c:	2825883a 	mov	r18,r5
 1800560:	dc000015 	stw	r16,0(sp)
 1800564:	01401a04 	movi	r5,104
 1800568:	2021883a 	mov	r16,r4
 180056c:	913fffc4 	addi	r4,r18,-1
 1800570:	dfc00315 	stw	ra,12(sp)
 1800574:	dc400115 	stw	r17,4(sp)
 1800578:	18030140 	call	1803014 <__mulsi3>
 180057c:	8009883a 	mov	r4,r16
 1800580:	11401d04 	addi	r5,r2,116
 1800584:	1023883a 	mov	r17,r2
 1800588:	1800d9c0 	call	1800d9c <_malloc_r>
 180058c:	1021883a 	mov	r16,r2
 1800590:	10000726 	beq	r2,zero,18005b0 <__sfmoreglue+0x5c>
 1800594:	11000304 	addi	r4,r2,12
 1800598:	10000015 	stw	zero,0(r2)
 180059c:	14800115 	stw	r18,4(r2)
 18005a0:	11000215 	stw	r4,8(r2)
 18005a4:	89801a04 	addi	r6,r17,104
 18005a8:	000b883a 	mov	r5,zero
 18005ac:	18019300 	call	1801930 <memset>
 18005b0:	8005883a 	mov	r2,r16
 18005b4:	dfc00317 	ldw	ra,12(sp)
 18005b8:	dc800217 	ldw	r18,8(sp)
 18005bc:	dc400117 	ldw	r17,4(sp)
 18005c0:	dc000017 	ldw	r16,0(sp)
 18005c4:	dec00404 	addi	sp,sp,16
 18005c8:	f800283a 	ret

018005cc <__sfp>:
 18005cc:	defffb04 	addi	sp,sp,-20
 18005d0:	dc000015 	stw	r16,0(sp)
 18005d4:	04006034 	movhi	r16,384
 18005d8:	841ce504 	addi	r16,r16,29588
 18005dc:	dcc00315 	stw	r19,12(sp)
 18005e0:	2027883a 	mov	r19,r4
 18005e4:	81000017 	ldw	r4,0(r16)
 18005e8:	dfc00415 	stw	ra,16(sp)
 18005ec:	dc800215 	stw	r18,8(sp)
 18005f0:	20800e17 	ldw	r2,56(r4)
 18005f4:	dc400115 	stw	r17,4(sp)
 18005f8:	1000021e 	bne	r2,zero,1800604 <__sfp+0x38>
 18005fc:	18003b00 	call	18003b0 <__sinit.part.1>
 1800600:	81000017 	ldw	r4,0(r16)
 1800604:	2480b804 	addi	r18,r4,736
 1800608:	047fffc4 	movi	r17,-1
 180060c:	91000117 	ldw	r4,4(r18)
 1800610:	94000217 	ldw	r16,8(r18)
 1800614:	213fffc4 	addi	r4,r4,-1
 1800618:	20000a16 	blt	r4,zero,1800644 <__sfp+0x78>
 180061c:	8080030f 	ldh	r2,12(r16)
 1800620:	10000c26 	beq	r2,zero,1800654 <__sfp+0x88>
 1800624:	80c01d04 	addi	r3,r16,116
 1800628:	00000206 	br	1800634 <__sfp+0x68>
 180062c:	18bfe60f 	ldh	r2,-104(r3)
 1800630:	10000826 	beq	r2,zero,1800654 <__sfp+0x88>
 1800634:	213fffc4 	addi	r4,r4,-1
 1800638:	1c3ffd04 	addi	r16,r3,-12
 180063c:	18c01a04 	addi	r3,r3,104
 1800640:	247ffa1e 	bne	r4,r17,180062c <__alt_data_end+0xff80062c>
 1800644:	90800017 	ldw	r2,0(r18)
 1800648:	10001d26 	beq	r2,zero,18006c0 <__sfp+0xf4>
 180064c:	1025883a 	mov	r18,r2
 1800650:	003fee06 	br	180060c <__alt_data_end+0xff80060c>
 1800654:	00bfffc4 	movi	r2,-1
 1800658:	8080038d 	sth	r2,14(r16)
 180065c:	00800044 	movi	r2,1
 1800660:	8080030d 	sth	r2,12(r16)
 1800664:	80001915 	stw	zero,100(r16)
 1800668:	80000015 	stw	zero,0(r16)
 180066c:	80000215 	stw	zero,8(r16)
 1800670:	80000115 	stw	zero,4(r16)
 1800674:	80000415 	stw	zero,16(r16)
 1800678:	80000515 	stw	zero,20(r16)
 180067c:	80000615 	stw	zero,24(r16)
 1800680:	01800204 	movi	r6,8
 1800684:	000b883a 	mov	r5,zero
 1800688:	81001704 	addi	r4,r16,92
 180068c:	18019300 	call	1801930 <memset>
 1800690:	8005883a 	mov	r2,r16
 1800694:	80000c15 	stw	zero,48(r16)
 1800698:	80000d15 	stw	zero,52(r16)
 180069c:	80001115 	stw	zero,68(r16)
 18006a0:	80001215 	stw	zero,72(r16)
 18006a4:	dfc00417 	ldw	ra,16(sp)
 18006a8:	dcc00317 	ldw	r19,12(sp)
 18006ac:	dc800217 	ldw	r18,8(sp)
 18006b0:	dc400117 	ldw	r17,4(sp)
 18006b4:	dc000017 	ldw	r16,0(sp)
 18006b8:	dec00504 	addi	sp,sp,20
 18006bc:	f800283a 	ret
 18006c0:	01400104 	movi	r5,4
 18006c4:	9809883a 	mov	r4,r19
 18006c8:	18005540 	call	1800554 <__sfmoreglue>
 18006cc:	90800015 	stw	r2,0(r18)
 18006d0:	103fde1e 	bne	r2,zero,180064c <__alt_data_end+0xff80064c>
 18006d4:	00800304 	movi	r2,12
 18006d8:	98800015 	stw	r2,0(r19)
 18006dc:	0005883a 	mov	r2,zero
 18006e0:	003ff006 	br	18006a4 <__alt_data_end+0xff8006a4>

018006e4 <_cleanup>:
 18006e4:	00806034 	movhi	r2,384
 18006e8:	109ce504 	addi	r2,r2,29588
 18006ec:	11000017 	ldw	r4,0(r2)
 18006f0:	01406034 	movhi	r5,384
 18006f4:	2948d504 	addi	r5,r5,9044
 18006f8:	1800cd81 	jmpi	1800cd8 <_fwalk_reent>

018006fc <__sinit>:
 18006fc:	20800e17 	ldw	r2,56(r4)
 1800700:	10000126 	beq	r2,zero,1800708 <__sinit+0xc>
 1800704:	f800283a 	ret
 1800708:	18003b01 	jmpi	18003b0 <__sinit.part.1>

0180070c <__sfp_lock_acquire>:
 180070c:	f800283a 	ret

01800710 <__sfp_lock_release>:
 1800710:	f800283a 	ret

01800714 <__sinit_lock_acquire>:
 1800714:	f800283a 	ret

01800718 <__sinit_lock_release>:
 1800718:	f800283a 	ret

0180071c <__fp_lock_all>:
 180071c:	00806034 	movhi	r2,384
 1800720:	109ce604 	addi	r2,r2,29592
 1800724:	11000017 	ldw	r4,0(r2)
 1800728:	01406034 	movhi	r5,384
 180072c:	29415304 	addi	r5,r5,1356
 1800730:	1800c141 	jmpi	1800c14 <_fwalk>

01800734 <__fp_unlock_all>:
 1800734:	00806034 	movhi	r2,384
 1800738:	109ce604 	addi	r2,r2,29592
 180073c:	11000017 	ldw	r4,0(r2)
 1800740:	01406034 	movhi	r5,384
 1800744:	2940e704 	addi	r5,r5,924
 1800748:	1800c141 	jmpi	1800c14 <_fwalk>

0180074c <__sfvwrite_r>:
 180074c:	30800217 	ldw	r2,8(r6)
 1800750:	10006726 	beq	r2,zero,18008f0 <__sfvwrite_r+0x1a4>
 1800754:	28c0030b 	ldhu	r3,12(r5)
 1800758:	defff404 	addi	sp,sp,-48
 180075c:	dd400715 	stw	r21,28(sp)
 1800760:	dd000615 	stw	r20,24(sp)
 1800764:	dc000215 	stw	r16,8(sp)
 1800768:	dfc00b15 	stw	ra,44(sp)
 180076c:	df000a15 	stw	fp,40(sp)
 1800770:	ddc00915 	stw	r23,36(sp)
 1800774:	dd800815 	stw	r22,32(sp)
 1800778:	dcc00515 	stw	r19,20(sp)
 180077c:	dc800415 	stw	r18,16(sp)
 1800780:	dc400315 	stw	r17,12(sp)
 1800784:	1880020c 	andi	r2,r3,8
 1800788:	2821883a 	mov	r16,r5
 180078c:	202b883a 	mov	r21,r4
 1800790:	3029883a 	mov	r20,r6
 1800794:	10002726 	beq	r2,zero,1800834 <__sfvwrite_r+0xe8>
 1800798:	28800417 	ldw	r2,16(r5)
 180079c:	10002526 	beq	r2,zero,1800834 <__sfvwrite_r+0xe8>
 18007a0:	1880008c 	andi	r2,r3,2
 18007a4:	a4400017 	ldw	r17,0(r20)
 18007a8:	10002a26 	beq	r2,zero,1800854 <__sfvwrite_r+0x108>
 18007ac:	05a00034 	movhi	r22,32768
 18007b0:	0027883a 	mov	r19,zero
 18007b4:	0025883a 	mov	r18,zero
 18007b8:	b5bf0004 	addi	r22,r22,-1024
 18007bc:	980d883a 	mov	r6,r19
 18007c0:	a809883a 	mov	r4,r21
 18007c4:	90004626 	beq	r18,zero,18008e0 <__sfvwrite_r+0x194>
 18007c8:	900f883a 	mov	r7,r18
 18007cc:	b480022e 	bgeu	r22,r18,18007d8 <__sfvwrite_r+0x8c>
 18007d0:	01e00034 	movhi	r7,32768
 18007d4:	39ff0004 	addi	r7,r7,-1024
 18007d8:	80800917 	ldw	r2,36(r16)
 18007dc:	81400717 	ldw	r5,28(r16)
 18007e0:	103ee83a 	callr	r2
 18007e4:	00805a0e 	bge	zero,r2,1800950 <__sfvwrite_r+0x204>
 18007e8:	a0c00217 	ldw	r3,8(r20)
 18007ec:	98a7883a 	add	r19,r19,r2
 18007f0:	90a5c83a 	sub	r18,r18,r2
 18007f4:	1885c83a 	sub	r2,r3,r2
 18007f8:	a0800215 	stw	r2,8(r20)
 18007fc:	103fef1e 	bne	r2,zero,18007bc <__alt_data_end+0xff8007bc>
 1800800:	0005883a 	mov	r2,zero
 1800804:	dfc00b17 	ldw	ra,44(sp)
 1800808:	df000a17 	ldw	fp,40(sp)
 180080c:	ddc00917 	ldw	r23,36(sp)
 1800810:	dd800817 	ldw	r22,32(sp)
 1800814:	dd400717 	ldw	r21,28(sp)
 1800818:	dd000617 	ldw	r20,24(sp)
 180081c:	dcc00517 	ldw	r19,20(sp)
 1800820:	dc800417 	ldw	r18,16(sp)
 1800824:	dc400317 	ldw	r17,12(sp)
 1800828:	dc000217 	ldw	r16,8(sp)
 180082c:	dec00c04 	addi	sp,sp,48
 1800830:	f800283a 	ret
 1800834:	800b883a 	mov	r5,r16
 1800838:	a809883a 	mov	r4,r21
 180083c:	18021ac0 	call	18021ac <__swsetup_r>
 1800840:	1000ee1e 	bne	r2,zero,1800bfc <__sfvwrite_r+0x4b0>
 1800844:	80c0030b 	ldhu	r3,12(r16)
 1800848:	a4400017 	ldw	r17,0(r20)
 180084c:	1880008c 	andi	r2,r3,2
 1800850:	103fd61e 	bne	r2,zero,18007ac <__alt_data_end+0xff8007ac>
 1800854:	1880004c 	andi	r2,r3,1
 1800858:	1000421e 	bne	r2,zero,1800964 <__sfvwrite_r+0x218>
 180085c:	0039883a 	mov	fp,zero
 1800860:	0025883a 	mov	r18,zero
 1800864:	90001a26 	beq	r18,zero,18008d0 <__sfvwrite_r+0x184>
 1800868:	1880800c 	andi	r2,r3,512
 180086c:	84c00217 	ldw	r19,8(r16)
 1800870:	10002126 	beq	r2,zero,18008f8 <__sfvwrite_r+0x1ac>
 1800874:	982f883a 	mov	r23,r19
 1800878:	94c09636 	bltu	r18,r19,1800ad4 <__sfvwrite_r+0x388>
 180087c:	1881200c 	andi	r2,r3,1152
 1800880:	1000a11e 	bne	r2,zero,1800b08 <__sfvwrite_r+0x3bc>
 1800884:	81000017 	ldw	r4,0(r16)
 1800888:	b80d883a 	mov	r6,r23
 180088c:	e00b883a 	mov	r5,fp
 1800890:	18017d40 	call	18017d4 <memmove>
 1800894:	80c00217 	ldw	r3,8(r16)
 1800898:	81000017 	ldw	r4,0(r16)
 180089c:	9005883a 	mov	r2,r18
 18008a0:	1ce7c83a 	sub	r19,r3,r19
 18008a4:	25cf883a 	add	r7,r4,r23
 18008a8:	84c00215 	stw	r19,8(r16)
 18008ac:	81c00015 	stw	r7,0(r16)
 18008b0:	a0c00217 	ldw	r3,8(r20)
 18008b4:	e0b9883a 	add	fp,fp,r2
 18008b8:	90a5c83a 	sub	r18,r18,r2
 18008bc:	18a7c83a 	sub	r19,r3,r2
 18008c0:	a4c00215 	stw	r19,8(r20)
 18008c4:	983fce26 	beq	r19,zero,1800800 <__alt_data_end+0xff800800>
 18008c8:	80c0030b 	ldhu	r3,12(r16)
 18008cc:	903fe61e 	bne	r18,zero,1800868 <__alt_data_end+0xff800868>
 18008d0:	8f000017 	ldw	fp,0(r17)
 18008d4:	8c800117 	ldw	r18,4(r17)
 18008d8:	8c400204 	addi	r17,r17,8
 18008dc:	003fe106 	br	1800864 <__alt_data_end+0xff800864>
 18008e0:	8cc00017 	ldw	r19,0(r17)
 18008e4:	8c800117 	ldw	r18,4(r17)
 18008e8:	8c400204 	addi	r17,r17,8
 18008ec:	003fb306 	br	18007bc <__alt_data_end+0xff8007bc>
 18008f0:	0005883a 	mov	r2,zero
 18008f4:	f800283a 	ret
 18008f8:	81000017 	ldw	r4,0(r16)
 18008fc:	80800417 	ldw	r2,16(r16)
 1800900:	11005a36 	bltu	r2,r4,1800a6c <__sfvwrite_r+0x320>
 1800904:	85c00517 	ldw	r23,20(r16)
 1800908:	95c05836 	bltu	r18,r23,1800a6c <__sfvwrite_r+0x320>
 180090c:	00a00034 	movhi	r2,32768
 1800910:	10bfffc4 	addi	r2,r2,-1
 1800914:	9009883a 	mov	r4,r18
 1800918:	1480012e 	bgeu	r2,r18,1800920 <__sfvwrite_r+0x1d4>
 180091c:	1009883a 	mov	r4,r2
 1800920:	b80b883a 	mov	r5,r23
 1800924:	1802e600 	call	1802e60 <__divsi3>
 1800928:	b80b883a 	mov	r5,r23
 180092c:	1009883a 	mov	r4,r2
 1800930:	18030140 	call	1803014 <__mulsi3>
 1800934:	81400717 	ldw	r5,28(r16)
 1800938:	80c00917 	ldw	r3,36(r16)
 180093c:	100f883a 	mov	r7,r2
 1800940:	e00d883a 	mov	r6,fp
 1800944:	a809883a 	mov	r4,r21
 1800948:	183ee83a 	callr	r3
 180094c:	00bfd816 	blt	zero,r2,18008b0 <__alt_data_end+0xff8008b0>
 1800950:	8080030b 	ldhu	r2,12(r16)
 1800954:	10801014 	ori	r2,r2,64
 1800958:	8080030d 	sth	r2,12(r16)
 180095c:	00bfffc4 	movi	r2,-1
 1800960:	003fa806 	br	1800804 <__alt_data_end+0xff800804>
 1800964:	0027883a 	mov	r19,zero
 1800968:	0011883a 	mov	r8,zero
 180096c:	0039883a 	mov	fp,zero
 1800970:	0025883a 	mov	r18,zero
 1800974:	90001f26 	beq	r18,zero,18009f4 <__sfvwrite_r+0x2a8>
 1800978:	40005a26 	beq	r8,zero,1800ae4 <__sfvwrite_r+0x398>
 180097c:	982d883a 	mov	r22,r19
 1800980:	94c0012e 	bgeu	r18,r19,1800988 <__sfvwrite_r+0x23c>
 1800984:	902d883a 	mov	r22,r18
 1800988:	81000017 	ldw	r4,0(r16)
 180098c:	80800417 	ldw	r2,16(r16)
 1800990:	b02f883a 	mov	r23,r22
 1800994:	81c00517 	ldw	r7,20(r16)
 1800998:	1100032e 	bgeu	r2,r4,18009a8 <__sfvwrite_r+0x25c>
 180099c:	80c00217 	ldw	r3,8(r16)
 18009a0:	38c7883a 	add	r3,r7,r3
 18009a4:	1d801816 	blt	r3,r22,1800a08 <__sfvwrite_r+0x2bc>
 18009a8:	b1c03e16 	blt	r22,r7,1800aa4 <__sfvwrite_r+0x358>
 18009ac:	80800917 	ldw	r2,36(r16)
 18009b0:	81400717 	ldw	r5,28(r16)
 18009b4:	e00d883a 	mov	r6,fp
 18009b8:	da000115 	stw	r8,4(sp)
 18009bc:	a809883a 	mov	r4,r21
 18009c0:	103ee83a 	callr	r2
 18009c4:	102f883a 	mov	r23,r2
 18009c8:	da000117 	ldw	r8,4(sp)
 18009cc:	00bfe00e 	bge	zero,r2,1800950 <__alt_data_end+0xff800950>
 18009d0:	9de7c83a 	sub	r19,r19,r23
 18009d4:	98001f26 	beq	r19,zero,1800a54 <__sfvwrite_r+0x308>
 18009d8:	a0800217 	ldw	r2,8(r20)
 18009dc:	e5f9883a 	add	fp,fp,r23
 18009e0:	95e5c83a 	sub	r18,r18,r23
 18009e4:	15efc83a 	sub	r23,r2,r23
 18009e8:	a5c00215 	stw	r23,8(r20)
 18009ec:	b83f8426 	beq	r23,zero,1800800 <__alt_data_end+0xff800800>
 18009f0:	903fe11e 	bne	r18,zero,1800978 <__alt_data_end+0xff800978>
 18009f4:	8f000017 	ldw	fp,0(r17)
 18009f8:	8c800117 	ldw	r18,4(r17)
 18009fc:	0011883a 	mov	r8,zero
 1800a00:	8c400204 	addi	r17,r17,8
 1800a04:	003fdb06 	br	1800974 <__alt_data_end+0xff800974>
 1800a08:	180d883a 	mov	r6,r3
 1800a0c:	e00b883a 	mov	r5,fp
 1800a10:	da000115 	stw	r8,4(sp)
 1800a14:	d8c00015 	stw	r3,0(sp)
 1800a18:	18017d40 	call	18017d4 <memmove>
 1800a1c:	d8c00017 	ldw	r3,0(sp)
 1800a20:	80800017 	ldw	r2,0(r16)
 1800a24:	800b883a 	mov	r5,r16
 1800a28:	a809883a 	mov	r4,r21
 1800a2c:	10c5883a 	add	r2,r2,r3
 1800a30:	80800015 	stw	r2,0(r16)
 1800a34:	d8c00015 	stw	r3,0(sp)
 1800a38:	18026740 	call	1802674 <_fflush_r>
 1800a3c:	d8c00017 	ldw	r3,0(sp)
 1800a40:	da000117 	ldw	r8,4(sp)
 1800a44:	103fc21e 	bne	r2,zero,1800950 <__alt_data_end+0xff800950>
 1800a48:	182f883a 	mov	r23,r3
 1800a4c:	9de7c83a 	sub	r19,r19,r23
 1800a50:	983fe11e 	bne	r19,zero,18009d8 <__alt_data_end+0xff8009d8>
 1800a54:	800b883a 	mov	r5,r16
 1800a58:	a809883a 	mov	r4,r21
 1800a5c:	18026740 	call	1802674 <_fflush_r>
 1800a60:	103fbb1e 	bne	r2,zero,1800950 <__alt_data_end+0xff800950>
 1800a64:	0011883a 	mov	r8,zero
 1800a68:	003fdb06 	br	18009d8 <__alt_data_end+0xff8009d8>
 1800a6c:	94c0012e 	bgeu	r18,r19,1800a74 <__sfvwrite_r+0x328>
 1800a70:	9027883a 	mov	r19,r18
 1800a74:	980d883a 	mov	r6,r19
 1800a78:	e00b883a 	mov	r5,fp
 1800a7c:	18017d40 	call	18017d4 <memmove>
 1800a80:	80800217 	ldw	r2,8(r16)
 1800a84:	80c00017 	ldw	r3,0(r16)
 1800a88:	14c5c83a 	sub	r2,r2,r19
 1800a8c:	1cc7883a 	add	r3,r3,r19
 1800a90:	80800215 	stw	r2,8(r16)
 1800a94:	80c00015 	stw	r3,0(r16)
 1800a98:	10004326 	beq	r2,zero,1800ba8 <__sfvwrite_r+0x45c>
 1800a9c:	9805883a 	mov	r2,r19
 1800aa0:	003f8306 	br	18008b0 <__alt_data_end+0xff8008b0>
 1800aa4:	b00d883a 	mov	r6,r22
 1800aa8:	e00b883a 	mov	r5,fp
 1800aac:	da000115 	stw	r8,4(sp)
 1800ab0:	18017d40 	call	18017d4 <memmove>
 1800ab4:	80800217 	ldw	r2,8(r16)
 1800ab8:	80c00017 	ldw	r3,0(r16)
 1800abc:	da000117 	ldw	r8,4(sp)
 1800ac0:	1585c83a 	sub	r2,r2,r22
 1800ac4:	1dad883a 	add	r22,r3,r22
 1800ac8:	80800215 	stw	r2,8(r16)
 1800acc:	85800015 	stw	r22,0(r16)
 1800ad0:	003fbf06 	br	18009d0 <__alt_data_end+0xff8009d0>
 1800ad4:	81000017 	ldw	r4,0(r16)
 1800ad8:	9027883a 	mov	r19,r18
 1800adc:	902f883a 	mov	r23,r18
 1800ae0:	003f6906 	br	1800888 <__alt_data_end+0xff800888>
 1800ae4:	900d883a 	mov	r6,r18
 1800ae8:	01400284 	movi	r5,10
 1800aec:	e009883a 	mov	r4,fp
 1800af0:	18015a80 	call	18015a8 <memchr>
 1800af4:	10003e26 	beq	r2,zero,1800bf0 <__sfvwrite_r+0x4a4>
 1800af8:	10800044 	addi	r2,r2,1
 1800afc:	1727c83a 	sub	r19,r2,fp
 1800b00:	02000044 	movi	r8,1
 1800b04:	003f9d06 	br	180097c <__alt_data_end+0xff80097c>
 1800b08:	80800517 	ldw	r2,20(r16)
 1800b0c:	81400417 	ldw	r5,16(r16)
 1800b10:	81c00017 	ldw	r7,0(r16)
 1800b14:	10a7883a 	add	r19,r2,r2
 1800b18:	9885883a 	add	r2,r19,r2
 1800b1c:	1026d7fa 	srli	r19,r2,31
 1800b20:	396dc83a 	sub	r22,r7,r5
 1800b24:	b1000044 	addi	r4,r22,1
 1800b28:	9885883a 	add	r2,r19,r2
 1800b2c:	1027d07a 	srai	r19,r2,1
 1800b30:	2485883a 	add	r2,r4,r18
 1800b34:	980d883a 	mov	r6,r19
 1800b38:	9880022e 	bgeu	r19,r2,1800b44 <__sfvwrite_r+0x3f8>
 1800b3c:	1027883a 	mov	r19,r2
 1800b40:	100d883a 	mov	r6,r2
 1800b44:	18c1000c 	andi	r3,r3,1024
 1800b48:	18001c26 	beq	r3,zero,1800bbc <__sfvwrite_r+0x470>
 1800b4c:	300b883a 	mov	r5,r6
 1800b50:	a809883a 	mov	r4,r21
 1800b54:	1800d9c0 	call	1800d9c <_malloc_r>
 1800b58:	102f883a 	mov	r23,r2
 1800b5c:	10002926 	beq	r2,zero,1800c04 <__sfvwrite_r+0x4b8>
 1800b60:	81400417 	ldw	r5,16(r16)
 1800b64:	b00d883a 	mov	r6,r22
 1800b68:	1009883a 	mov	r4,r2
 1800b6c:	180168c0 	call	180168c <memcpy>
 1800b70:	8080030b 	ldhu	r2,12(r16)
 1800b74:	00fedfc4 	movi	r3,-1153
 1800b78:	10c4703a 	and	r2,r2,r3
 1800b7c:	10802014 	ori	r2,r2,128
 1800b80:	8080030d 	sth	r2,12(r16)
 1800b84:	bd89883a 	add	r4,r23,r22
 1800b88:	9d8fc83a 	sub	r7,r19,r22
 1800b8c:	85c00415 	stw	r23,16(r16)
 1800b90:	84c00515 	stw	r19,20(r16)
 1800b94:	81000015 	stw	r4,0(r16)
 1800b98:	9027883a 	mov	r19,r18
 1800b9c:	81c00215 	stw	r7,8(r16)
 1800ba0:	902f883a 	mov	r23,r18
 1800ba4:	003f3806 	br	1800888 <__alt_data_end+0xff800888>
 1800ba8:	800b883a 	mov	r5,r16
 1800bac:	a809883a 	mov	r4,r21
 1800bb0:	18026740 	call	1802674 <_fflush_r>
 1800bb4:	103fb926 	beq	r2,zero,1800a9c <__alt_data_end+0xff800a9c>
 1800bb8:	003f6506 	br	1800950 <__alt_data_end+0xff800950>
 1800bbc:	a809883a 	mov	r4,r21
 1800bc0:	1801a580 	call	1801a58 <_realloc_r>
 1800bc4:	102f883a 	mov	r23,r2
 1800bc8:	103fee1e 	bne	r2,zero,1800b84 <__alt_data_end+0xff800b84>
 1800bcc:	81400417 	ldw	r5,16(r16)
 1800bd0:	a809883a 	mov	r4,r21
 1800bd4:	18028240 	call	1802824 <_free_r>
 1800bd8:	8080030b 	ldhu	r2,12(r16)
 1800bdc:	00ffdfc4 	movi	r3,-129
 1800be0:	1884703a 	and	r2,r3,r2
 1800be4:	00c00304 	movi	r3,12
 1800be8:	a8c00015 	stw	r3,0(r21)
 1800bec:	003f5906 	br	1800954 <__alt_data_end+0xff800954>
 1800bf0:	94c00044 	addi	r19,r18,1
 1800bf4:	02000044 	movi	r8,1
 1800bf8:	003f6006 	br	180097c <__alt_data_end+0xff80097c>
 1800bfc:	00bfffc4 	movi	r2,-1
 1800c00:	003f0006 	br	1800804 <__alt_data_end+0xff800804>
 1800c04:	00800304 	movi	r2,12
 1800c08:	a8800015 	stw	r2,0(r21)
 1800c0c:	8080030b 	ldhu	r2,12(r16)
 1800c10:	003f5006 	br	1800954 <__alt_data_end+0xff800954>

01800c14 <_fwalk>:
 1800c14:	defff704 	addi	sp,sp,-36
 1800c18:	dd000415 	stw	r20,16(sp)
 1800c1c:	dfc00815 	stw	ra,32(sp)
 1800c20:	ddc00715 	stw	r23,28(sp)
 1800c24:	dd800615 	stw	r22,24(sp)
 1800c28:	dd400515 	stw	r21,20(sp)
 1800c2c:	dcc00315 	stw	r19,12(sp)
 1800c30:	dc800215 	stw	r18,8(sp)
 1800c34:	dc400115 	stw	r17,4(sp)
 1800c38:	dc000015 	stw	r16,0(sp)
 1800c3c:	2500b804 	addi	r20,r4,736
 1800c40:	a0002326 	beq	r20,zero,1800cd0 <_fwalk+0xbc>
 1800c44:	282b883a 	mov	r21,r5
 1800c48:	002f883a 	mov	r23,zero
 1800c4c:	05800044 	movi	r22,1
 1800c50:	04ffffc4 	movi	r19,-1
 1800c54:	a4400117 	ldw	r17,4(r20)
 1800c58:	a4800217 	ldw	r18,8(r20)
 1800c5c:	8c7fffc4 	addi	r17,r17,-1
 1800c60:	88000d16 	blt	r17,zero,1800c98 <_fwalk+0x84>
 1800c64:	94000304 	addi	r16,r18,12
 1800c68:	94800384 	addi	r18,r18,14
 1800c6c:	8080000b 	ldhu	r2,0(r16)
 1800c70:	8c7fffc4 	addi	r17,r17,-1
 1800c74:	813ffd04 	addi	r4,r16,-12
 1800c78:	b080042e 	bgeu	r22,r2,1800c8c <_fwalk+0x78>
 1800c7c:	9080000f 	ldh	r2,0(r18)
 1800c80:	14c00226 	beq	r2,r19,1800c8c <_fwalk+0x78>
 1800c84:	a83ee83a 	callr	r21
 1800c88:	b8aeb03a 	or	r23,r23,r2
 1800c8c:	84001a04 	addi	r16,r16,104
 1800c90:	94801a04 	addi	r18,r18,104
 1800c94:	8cfff51e 	bne	r17,r19,1800c6c <__alt_data_end+0xff800c6c>
 1800c98:	a5000017 	ldw	r20,0(r20)
 1800c9c:	a03fed1e 	bne	r20,zero,1800c54 <__alt_data_end+0xff800c54>
 1800ca0:	b805883a 	mov	r2,r23
 1800ca4:	dfc00817 	ldw	ra,32(sp)
 1800ca8:	ddc00717 	ldw	r23,28(sp)
 1800cac:	dd800617 	ldw	r22,24(sp)
 1800cb0:	dd400517 	ldw	r21,20(sp)
 1800cb4:	dd000417 	ldw	r20,16(sp)
 1800cb8:	dcc00317 	ldw	r19,12(sp)
 1800cbc:	dc800217 	ldw	r18,8(sp)
 1800cc0:	dc400117 	ldw	r17,4(sp)
 1800cc4:	dc000017 	ldw	r16,0(sp)
 1800cc8:	dec00904 	addi	sp,sp,36
 1800ccc:	f800283a 	ret
 1800cd0:	002f883a 	mov	r23,zero
 1800cd4:	003ff206 	br	1800ca0 <__alt_data_end+0xff800ca0>

01800cd8 <_fwalk_reent>:
 1800cd8:	defff704 	addi	sp,sp,-36
 1800cdc:	dd000415 	stw	r20,16(sp)
 1800ce0:	dfc00815 	stw	ra,32(sp)
 1800ce4:	ddc00715 	stw	r23,28(sp)
 1800ce8:	dd800615 	stw	r22,24(sp)
 1800cec:	dd400515 	stw	r21,20(sp)
 1800cf0:	dcc00315 	stw	r19,12(sp)
 1800cf4:	dc800215 	stw	r18,8(sp)
 1800cf8:	dc400115 	stw	r17,4(sp)
 1800cfc:	dc000015 	stw	r16,0(sp)
 1800d00:	2500b804 	addi	r20,r4,736
 1800d04:	a0002326 	beq	r20,zero,1800d94 <_fwalk_reent+0xbc>
 1800d08:	282b883a 	mov	r21,r5
 1800d0c:	2027883a 	mov	r19,r4
 1800d10:	002f883a 	mov	r23,zero
 1800d14:	05800044 	movi	r22,1
 1800d18:	04bfffc4 	movi	r18,-1
 1800d1c:	a4400117 	ldw	r17,4(r20)
 1800d20:	a4000217 	ldw	r16,8(r20)
 1800d24:	8c7fffc4 	addi	r17,r17,-1
 1800d28:	88000c16 	blt	r17,zero,1800d5c <_fwalk_reent+0x84>
 1800d2c:	84000304 	addi	r16,r16,12
 1800d30:	8080000b 	ldhu	r2,0(r16)
 1800d34:	8c7fffc4 	addi	r17,r17,-1
 1800d38:	817ffd04 	addi	r5,r16,-12
 1800d3c:	b080052e 	bgeu	r22,r2,1800d54 <_fwalk_reent+0x7c>
 1800d40:	8080008f 	ldh	r2,2(r16)
 1800d44:	9809883a 	mov	r4,r19
 1800d48:	14800226 	beq	r2,r18,1800d54 <_fwalk_reent+0x7c>
 1800d4c:	a83ee83a 	callr	r21
 1800d50:	b8aeb03a 	or	r23,r23,r2
 1800d54:	84001a04 	addi	r16,r16,104
 1800d58:	8cbff51e 	bne	r17,r18,1800d30 <__alt_data_end+0xff800d30>
 1800d5c:	a5000017 	ldw	r20,0(r20)
 1800d60:	a03fee1e 	bne	r20,zero,1800d1c <__alt_data_end+0xff800d1c>
 1800d64:	b805883a 	mov	r2,r23
 1800d68:	dfc00817 	ldw	ra,32(sp)
 1800d6c:	ddc00717 	ldw	r23,28(sp)
 1800d70:	dd800617 	ldw	r22,24(sp)
 1800d74:	dd400517 	ldw	r21,20(sp)
 1800d78:	dd000417 	ldw	r20,16(sp)
 1800d7c:	dcc00317 	ldw	r19,12(sp)
 1800d80:	dc800217 	ldw	r18,8(sp)
 1800d84:	dc400117 	ldw	r17,4(sp)
 1800d88:	dc000017 	ldw	r16,0(sp)
 1800d8c:	dec00904 	addi	sp,sp,36
 1800d90:	f800283a 	ret
 1800d94:	002f883a 	mov	r23,zero
 1800d98:	003ff206 	br	1800d64 <__alt_data_end+0xff800d64>

01800d9c <_malloc_r>:
 1800d9c:	defff504 	addi	sp,sp,-44
 1800da0:	dc800315 	stw	r18,12(sp)
 1800da4:	dfc00a15 	stw	ra,40(sp)
 1800da8:	df000915 	stw	fp,36(sp)
 1800dac:	ddc00815 	stw	r23,32(sp)
 1800db0:	dd800715 	stw	r22,28(sp)
 1800db4:	dd400615 	stw	r21,24(sp)
 1800db8:	dd000515 	stw	r20,20(sp)
 1800dbc:	dcc00415 	stw	r19,16(sp)
 1800dc0:	dc400215 	stw	r17,8(sp)
 1800dc4:	dc000115 	stw	r16,4(sp)
 1800dc8:	288002c4 	addi	r2,r5,11
 1800dcc:	00c00584 	movi	r3,22
 1800dd0:	2025883a 	mov	r18,r4
 1800dd4:	18807f2e 	bgeu	r3,r2,1800fd4 <_malloc_r+0x238>
 1800dd8:	047ffe04 	movi	r17,-8
 1800ddc:	1462703a 	and	r17,r2,r17
 1800de0:	8800a316 	blt	r17,zero,1801070 <_malloc_r+0x2d4>
 1800de4:	8940a236 	bltu	r17,r5,1801070 <_malloc_r+0x2d4>
 1800de8:	18036280 	call	1803628 <__malloc_lock>
 1800dec:	00807dc4 	movi	r2,503
 1800df0:	1441e92e 	bgeu	r2,r17,1801598 <_malloc_r+0x7fc>
 1800df4:	8804d27a 	srli	r2,r17,9
 1800df8:	1000a126 	beq	r2,zero,1801080 <_malloc_r+0x2e4>
 1800dfc:	00c00104 	movi	r3,4
 1800e00:	18811e36 	bltu	r3,r2,180127c <_malloc_r+0x4e0>
 1800e04:	8804d1ba 	srli	r2,r17,6
 1800e08:	12000e44 	addi	r8,r2,57
 1800e0c:	11c00e04 	addi	r7,r2,56
 1800e10:	4209883a 	add	r4,r8,r8
 1800e14:	04c06034 	movhi	r19,384
 1800e18:	2109883a 	add	r4,r4,r4
 1800e1c:	9cd76104 	addi	r19,r19,23940
 1800e20:	2109883a 	add	r4,r4,r4
 1800e24:	9909883a 	add	r4,r19,r4
 1800e28:	24000117 	ldw	r16,4(r4)
 1800e2c:	213ffe04 	addi	r4,r4,-8
 1800e30:	24009726 	beq	r4,r16,1801090 <_malloc_r+0x2f4>
 1800e34:	80800117 	ldw	r2,4(r16)
 1800e38:	01bfff04 	movi	r6,-4
 1800e3c:	014003c4 	movi	r5,15
 1800e40:	1184703a 	and	r2,r2,r6
 1800e44:	1447c83a 	sub	r3,r2,r17
 1800e48:	28c00716 	blt	r5,r3,1800e68 <_malloc_r+0xcc>
 1800e4c:	1800920e 	bge	r3,zero,1801098 <_malloc_r+0x2fc>
 1800e50:	84000317 	ldw	r16,12(r16)
 1800e54:	24008e26 	beq	r4,r16,1801090 <_malloc_r+0x2f4>
 1800e58:	80800117 	ldw	r2,4(r16)
 1800e5c:	1184703a 	and	r2,r2,r6
 1800e60:	1447c83a 	sub	r3,r2,r17
 1800e64:	28fff90e 	bge	r5,r3,1800e4c <__alt_data_end+0xff800e4c>
 1800e68:	3809883a 	mov	r4,r7
 1800e6c:	01806034 	movhi	r6,384
 1800e70:	9c000417 	ldw	r16,16(r19)
 1800e74:	31976104 	addi	r6,r6,23940
 1800e78:	32000204 	addi	r8,r6,8
 1800e7c:	82013426 	beq	r16,r8,1801350 <_malloc_r+0x5b4>
 1800e80:	80c00117 	ldw	r3,4(r16)
 1800e84:	00bfff04 	movi	r2,-4
 1800e88:	188e703a 	and	r7,r3,r2
 1800e8c:	3c45c83a 	sub	r2,r7,r17
 1800e90:	00c003c4 	movi	r3,15
 1800e94:	18811f16 	blt	r3,r2,1801314 <_malloc_r+0x578>
 1800e98:	32000515 	stw	r8,20(r6)
 1800e9c:	32000415 	stw	r8,16(r6)
 1800ea0:	10007f0e 	bge	r2,zero,18010a0 <_malloc_r+0x304>
 1800ea4:	00807fc4 	movi	r2,511
 1800ea8:	11c0fd36 	bltu	r2,r7,18012a0 <_malloc_r+0x504>
 1800eac:	3806d0fa 	srli	r3,r7,3
 1800eb0:	01c00044 	movi	r7,1
 1800eb4:	30800117 	ldw	r2,4(r6)
 1800eb8:	19400044 	addi	r5,r3,1
 1800ebc:	294b883a 	add	r5,r5,r5
 1800ec0:	1807d0ba 	srai	r3,r3,2
 1800ec4:	294b883a 	add	r5,r5,r5
 1800ec8:	294b883a 	add	r5,r5,r5
 1800ecc:	298b883a 	add	r5,r5,r6
 1800ed0:	38c6983a 	sll	r3,r7,r3
 1800ed4:	29c00017 	ldw	r7,0(r5)
 1800ed8:	2a7ffe04 	addi	r9,r5,-8
 1800edc:	1886b03a 	or	r3,r3,r2
 1800ee0:	82400315 	stw	r9,12(r16)
 1800ee4:	81c00215 	stw	r7,8(r16)
 1800ee8:	30c00115 	stw	r3,4(r6)
 1800eec:	2c000015 	stw	r16,0(r5)
 1800ef0:	3c000315 	stw	r16,12(r7)
 1800ef4:	2005d0ba 	srai	r2,r4,2
 1800ef8:	01400044 	movi	r5,1
 1800efc:	288a983a 	sll	r5,r5,r2
 1800f00:	19406f36 	bltu	r3,r5,18010c0 <_malloc_r+0x324>
 1800f04:	28c4703a 	and	r2,r5,r3
 1800f08:	10000a1e 	bne	r2,zero,1800f34 <_malloc_r+0x198>
 1800f0c:	00bfff04 	movi	r2,-4
 1800f10:	294b883a 	add	r5,r5,r5
 1800f14:	2088703a 	and	r4,r4,r2
 1800f18:	28c4703a 	and	r2,r5,r3
 1800f1c:	21000104 	addi	r4,r4,4
 1800f20:	1000041e 	bne	r2,zero,1800f34 <_malloc_r+0x198>
 1800f24:	294b883a 	add	r5,r5,r5
 1800f28:	28c4703a 	and	r2,r5,r3
 1800f2c:	21000104 	addi	r4,r4,4
 1800f30:	103ffc26 	beq	r2,zero,1800f24 <__alt_data_end+0xff800f24>
 1800f34:	02bfff04 	movi	r10,-4
 1800f38:	024003c4 	movi	r9,15
 1800f3c:	21800044 	addi	r6,r4,1
 1800f40:	318d883a 	add	r6,r6,r6
 1800f44:	318d883a 	add	r6,r6,r6
 1800f48:	318d883a 	add	r6,r6,r6
 1800f4c:	998d883a 	add	r6,r19,r6
 1800f50:	333ffe04 	addi	r12,r6,-8
 1800f54:	2017883a 	mov	r11,r4
 1800f58:	31800104 	addi	r6,r6,4
 1800f5c:	34000017 	ldw	r16,0(r6)
 1800f60:	31fffd04 	addi	r7,r6,-12
 1800f64:	81c0041e 	bne	r16,r7,1800f78 <_malloc_r+0x1dc>
 1800f68:	0000fb06 	br	1801358 <_malloc_r+0x5bc>
 1800f6c:	1801030e 	bge	r3,zero,180137c <_malloc_r+0x5e0>
 1800f70:	84000317 	ldw	r16,12(r16)
 1800f74:	81c0f826 	beq	r16,r7,1801358 <_malloc_r+0x5bc>
 1800f78:	80800117 	ldw	r2,4(r16)
 1800f7c:	1284703a 	and	r2,r2,r10
 1800f80:	1447c83a 	sub	r3,r2,r17
 1800f84:	48fff90e 	bge	r9,r3,1800f6c <__alt_data_end+0xff800f6c>
 1800f88:	80800317 	ldw	r2,12(r16)
 1800f8c:	81000217 	ldw	r4,8(r16)
 1800f90:	89400054 	ori	r5,r17,1
 1800f94:	81400115 	stw	r5,4(r16)
 1800f98:	20800315 	stw	r2,12(r4)
 1800f9c:	11000215 	stw	r4,8(r2)
 1800fa0:	8463883a 	add	r17,r16,r17
 1800fa4:	9c400515 	stw	r17,20(r19)
 1800fa8:	9c400415 	stw	r17,16(r19)
 1800fac:	18800054 	ori	r2,r3,1
 1800fb0:	88800115 	stw	r2,4(r17)
 1800fb4:	8a000315 	stw	r8,12(r17)
 1800fb8:	8a000215 	stw	r8,8(r17)
 1800fbc:	88e3883a 	add	r17,r17,r3
 1800fc0:	88c00015 	stw	r3,0(r17)
 1800fc4:	9009883a 	mov	r4,r18
 1800fc8:	180364c0 	call	180364c <__malloc_unlock>
 1800fcc:	80800204 	addi	r2,r16,8
 1800fd0:	00001b06 	br	1801040 <_malloc_r+0x2a4>
 1800fd4:	04400404 	movi	r17,16
 1800fd8:	89402536 	bltu	r17,r5,1801070 <_malloc_r+0x2d4>
 1800fdc:	18036280 	call	1803628 <__malloc_lock>
 1800fe0:	00800184 	movi	r2,6
 1800fe4:	01000084 	movi	r4,2
 1800fe8:	04c06034 	movhi	r19,384
 1800fec:	1085883a 	add	r2,r2,r2
 1800ff0:	9cd76104 	addi	r19,r19,23940
 1800ff4:	1085883a 	add	r2,r2,r2
 1800ff8:	9885883a 	add	r2,r19,r2
 1800ffc:	14000117 	ldw	r16,4(r2)
 1801000:	10fffe04 	addi	r3,r2,-8
 1801004:	80c0d926 	beq	r16,r3,180136c <_malloc_r+0x5d0>
 1801008:	80c00117 	ldw	r3,4(r16)
 180100c:	81000317 	ldw	r4,12(r16)
 1801010:	00bfff04 	movi	r2,-4
 1801014:	1884703a 	and	r2,r3,r2
 1801018:	81400217 	ldw	r5,8(r16)
 180101c:	8085883a 	add	r2,r16,r2
 1801020:	10c00117 	ldw	r3,4(r2)
 1801024:	29000315 	stw	r4,12(r5)
 1801028:	21400215 	stw	r5,8(r4)
 180102c:	18c00054 	ori	r3,r3,1
 1801030:	10c00115 	stw	r3,4(r2)
 1801034:	9009883a 	mov	r4,r18
 1801038:	180364c0 	call	180364c <__malloc_unlock>
 180103c:	80800204 	addi	r2,r16,8
 1801040:	dfc00a17 	ldw	ra,40(sp)
 1801044:	df000917 	ldw	fp,36(sp)
 1801048:	ddc00817 	ldw	r23,32(sp)
 180104c:	dd800717 	ldw	r22,28(sp)
 1801050:	dd400617 	ldw	r21,24(sp)
 1801054:	dd000517 	ldw	r20,20(sp)
 1801058:	dcc00417 	ldw	r19,16(sp)
 180105c:	dc800317 	ldw	r18,12(sp)
 1801060:	dc400217 	ldw	r17,8(sp)
 1801064:	dc000117 	ldw	r16,4(sp)
 1801068:	dec00b04 	addi	sp,sp,44
 180106c:	f800283a 	ret
 1801070:	00800304 	movi	r2,12
 1801074:	90800015 	stw	r2,0(r18)
 1801078:	0005883a 	mov	r2,zero
 180107c:	003ff006 	br	1801040 <__alt_data_end+0xff801040>
 1801080:	01002004 	movi	r4,128
 1801084:	02001004 	movi	r8,64
 1801088:	01c00fc4 	movi	r7,63
 180108c:	003f6106 	br	1800e14 <__alt_data_end+0xff800e14>
 1801090:	4009883a 	mov	r4,r8
 1801094:	003f7506 	br	1800e6c <__alt_data_end+0xff800e6c>
 1801098:	81000317 	ldw	r4,12(r16)
 180109c:	003fde06 	br	1801018 <__alt_data_end+0xff801018>
 18010a0:	81c5883a 	add	r2,r16,r7
 18010a4:	11400117 	ldw	r5,4(r2)
 18010a8:	9009883a 	mov	r4,r18
 18010ac:	29400054 	ori	r5,r5,1
 18010b0:	11400115 	stw	r5,4(r2)
 18010b4:	180364c0 	call	180364c <__malloc_unlock>
 18010b8:	80800204 	addi	r2,r16,8
 18010bc:	003fe006 	br	1801040 <__alt_data_end+0xff801040>
 18010c0:	9c000217 	ldw	r16,8(r19)
 18010c4:	00bfff04 	movi	r2,-4
 18010c8:	85800117 	ldw	r22,4(r16)
 18010cc:	b0ac703a 	and	r22,r22,r2
 18010d0:	b4400336 	bltu	r22,r17,18010e0 <_malloc_r+0x344>
 18010d4:	b445c83a 	sub	r2,r22,r17
 18010d8:	00c003c4 	movi	r3,15
 18010dc:	18805d16 	blt	r3,r2,1801254 <_malloc_r+0x4b8>
 18010e0:	05c06034 	movhi	r23,384
 18010e4:	00806074 	movhi	r2,385
 18010e8:	10a39004 	addi	r2,r2,-29120
 18010ec:	bddce704 	addi	r23,r23,29596
 18010f0:	15400017 	ldw	r21,0(r2)
 18010f4:	b8c00017 	ldw	r3,0(r23)
 18010f8:	00bfffc4 	movi	r2,-1
 18010fc:	858d883a 	add	r6,r16,r22
 1801100:	8d6b883a 	add	r21,r17,r21
 1801104:	1880ea26 	beq	r3,r2,18014b0 <_malloc_r+0x714>
 1801108:	ad4403c4 	addi	r21,r21,4111
 180110c:	00bc0004 	movi	r2,-4096
 1801110:	a8aa703a 	and	r21,r21,r2
 1801114:	a80b883a 	mov	r5,r21
 1801118:	9009883a 	mov	r4,r18
 180111c:	d9800015 	stw	r6,0(sp)
 1801120:	1801fbc0 	call	1801fbc <_sbrk_r>
 1801124:	1029883a 	mov	r20,r2
 1801128:	00bfffc4 	movi	r2,-1
 180112c:	d9800017 	ldw	r6,0(sp)
 1801130:	a080e826 	beq	r20,r2,18014d4 <_malloc_r+0x738>
 1801134:	a180a636 	bltu	r20,r6,18013d0 <_malloc_r+0x634>
 1801138:	07006074 	movhi	fp,385
 180113c:	e7239804 	addi	fp,fp,-29088
 1801140:	e0800017 	ldw	r2,0(fp)
 1801144:	a887883a 	add	r3,r21,r2
 1801148:	e0c00015 	stw	r3,0(fp)
 180114c:	3500e626 	beq	r6,r20,18014e8 <_malloc_r+0x74c>
 1801150:	b9000017 	ldw	r4,0(r23)
 1801154:	00bfffc4 	movi	r2,-1
 1801158:	2080ee26 	beq	r4,r2,1801514 <_malloc_r+0x778>
 180115c:	a185c83a 	sub	r2,r20,r6
 1801160:	10c5883a 	add	r2,r2,r3
 1801164:	e0800015 	stw	r2,0(fp)
 1801168:	a0c001cc 	andi	r3,r20,7
 180116c:	1800bc26 	beq	r3,zero,1801460 <_malloc_r+0x6c4>
 1801170:	a0e9c83a 	sub	r20,r20,r3
 1801174:	00840204 	movi	r2,4104
 1801178:	a5000204 	addi	r20,r20,8
 180117c:	10c7c83a 	sub	r3,r2,r3
 1801180:	a545883a 	add	r2,r20,r21
 1801184:	1083ffcc 	andi	r2,r2,4095
 1801188:	18abc83a 	sub	r21,r3,r2
 180118c:	a80b883a 	mov	r5,r21
 1801190:	9009883a 	mov	r4,r18
 1801194:	1801fbc0 	call	1801fbc <_sbrk_r>
 1801198:	00ffffc4 	movi	r3,-1
 180119c:	10c0e126 	beq	r2,r3,1801524 <_malloc_r+0x788>
 18011a0:	1505c83a 	sub	r2,r2,r20
 18011a4:	1545883a 	add	r2,r2,r21
 18011a8:	10800054 	ori	r2,r2,1
 18011ac:	e0c00017 	ldw	r3,0(fp)
 18011b0:	9d000215 	stw	r20,8(r19)
 18011b4:	a0800115 	stw	r2,4(r20)
 18011b8:	a8c7883a 	add	r3,r21,r3
 18011bc:	e0c00015 	stw	r3,0(fp)
 18011c0:	84c00e26 	beq	r16,r19,18011fc <_malloc_r+0x460>
 18011c4:	018003c4 	movi	r6,15
 18011c8:	3580a72e 	bgeu	r6,r22,1801468 <_malloc_r+0x6cc>
 18011cc:	81400117 	ldw	r5,4(r16)
 18011d0:	013ffe04 	movi	r4,-8
 18011d4:	b0bffd04 	addi	r2,r22,-12
 18011d8:	1104703a 	and	r2,r2,r4
 18011dc:	2900004c 	andi	r4,r5,1
 18011e0:	2088b03a 	or	r4,r4,r2
 18011e4:	81000115 	stw	r4,4(r16)
 18011e8:	01400144 	movi	r5,5
 18011ec:	8089883a 	add	r4,r16,r2
 18011f0:	21400115 	stw	r5,4(r4)
 18011f4:	21400215 	stw	r5,8(r4)
 18011f8:	3080cd36 	bltu	r6,r2,1801530 <_malloc_r+0x794>
 18011fc:	00806074 	movhi	r2,385
 1801200:	10a38f04 	addi	r2,r2,-29124
 1801204:	11000017 	ldw	r4,0(r2)
 1801208:	20c0012e 	bgeu	r4,r3,1801210 <_malloc_r+0x474>
 180120c:	10c00015 	stw	r3,0(r2)
 1801210:	00806074 	movhi	r2,385
 1801214:	10a38e04 	addi	r2,r2,-29128
 1801218:	11000017 	ldw	r4,0(r2)
 180121c:	9c000217 	ldw	r16,8(r19)
 1801220:	20c0012e 	bgeu	r4,r3,1801228 <_malloc_r+0x48c>
 1801224:	10c00015 	stw	r3,0(r2)
 1801228:	80c00117 	ldw	r3,4(r16)
 180122c:	00bfff04 	movi	r2,-4
 1801230:	1886703a 	and	r3,r3,r2
 1801234:	1c45c83a 	sub	r2,r3,r17
 1801238:	1c400236 	bltu	r3,r17,1801244 <_malloc_r+0x4a8>
 180123c:	00c003c4 	movi	r3,15
 1801240:	18800416 	blt	r3,r2,1801254 <_malloc_r+0x4b8>
 1801244:	9009883a 	mov	r4,r18
 1801248:	180364c0 	call	180364c <__malloc_unlock>
 180124c:	0005883a 	mov	r2,zero
 1801250:	003f7b06 	br	1801040 <__alt_data_end+0xff801040>
 1801254:	88c00054 	ori	r3,r17,1
 1801258:	80c00115 	stw	r3,4(r16)
 180125c:	8463883a 	add	r17,r16,r17
 1801260:	10800054 	ori	r2,r2,1
 1801264:	9c400215 	stw	r17,8(r19)
 1801268:	88800115 	stw	r2,4(r17)
 180126c:	9009883a 	mov	r4,r18
 1801270:	180364c0 	call	180364c <__malloc_unlock>
 1801274:	80800204 	addi	r2,r16,8
 1801278:	003f7106 	br	1801040 <__alt_data_end+0xff801040>
 180127c:	00c00504 	movi	r3,20
 1801280:	18804a2e 	bgeu	r3,r2,18013ac <_malloc_r+0x610>
 1801284:	00c01504 	movi	r3,84
 1801288:	18806e36 	bltu	r3,r2,1801444 <_malloc_r+0x6a8>
 180128c:	8804d33a 	srli	r2,r17,12
 1801290:	12001bc4 	addi	r8,r2,111
 1801294:	11c01b84 	addi	r7,r2,110
 1801298:	4209883a 	add	r4,r8,r8
 180129c:	003edd06 	br	1800e14 <__alt_data_end+0xff800e14>
 18012a0:	3804d27a 	srli	r2,r7,9
 18012a4:	00c00104 	movi	r3,4
 18012a8:	1880442e 	bgeu	r3,r2,18013bc <_malloc_r+0x620>
 18012ac:	00c00504 	movi	r3,20
 18012b0:	18808136 	bltu	r3,r2,18014b8 <_malloc_r+0x71c>
 18012b4:	11401704 	addi	r5,r2,92
 18012b8:	10c016c4 	addi	r3,r2,91
 18012bc:	294b883a 	add	r5,r5,r5
 18012c0:	294b883a 	add	r5,r5,r5
 18012c4:	294b883a 	add	r5,r5,r5
 18012c8:	994b883a 	add	r5,r19,r5
 18012cc:	28800017 	ldw	r2,0(r5)
 18012d0:	01806034 	movhi	r6,384
 18012d4:	297ffe04 	addi	r5,r5,-8
 18012d8:	31976104 	addi	r6,r6,23940
 18012dc:	28806526 	beq	r5,r2,1801474 <_malloc_r+0x6d8>
 18012e0:	01bfff04 	movi	r6,-4
 18012e4:	10c00117 	ldw	r3,4(r2)
 18012e8:	1986703a 	and	r3,r3,r6
 18012ec:	38c0022e 	bgeu	r7,r3,18012f8 <_malloc_r+0x55c>
 18012f0:	10800217 	ldw	r2,8(r2)
 18012f4:	28bffb1e 	bne	r5,r2,18012e4 <__alt_data_end+0xff8012e4>
 18012f8:	11400317 	ldw	r5,12(r2)
 18012fc:	98c00117 	ldw	r3,4(r19)
 1801300:	81400315 	stw	r5,12(r16)
 1801304:	80800215 	stw	r2,8(r16)
 1801308:	2c000215 	stw	r16,8(r5)
 180130c:	14000315 	stw	r16,12(r2)
 1801310:	003ef806 	br	1800ef4 <__alt_data_end+0xff800ef4>
 1801314:	88c00054 	ori	r3,r17,1
 1801318:	80c00115 	stw	r3,4(r16)
 180131c:	8463883a 	add	r17,r16,r17
 1801320:	34400515 	stw	r17,20(r6)
 1801324:	34400415 	stw	r17,16(r6)
 1801328:	10c00054 	ori	r3,r2,1
 180132c:	8a000315 	stw	r8,12(r17)
 1801330:	8a000215 	stw	r8,8(r17)
 1801334:	88c00115 	stw	r3,4(r17)
 1801338:	88a3883a 	add	r17,r17,r2
 180133c:	88800015 	stw	r2,0(r17)
 1801340:	9009883a 	mov	r4,r18
 1801344:	180364c0 	call	180364c <__malloc_unlock>
 1801348:	80800204 	addi	r2,r16,8
 180134c:	003f3c06 	br	1801040 <__alt_data_end+0xff801040>
 1801350:	30c00117 	ldw	r3,4(r6)
 1801354:	003ee706 	br	1800ef4 <__alt_data_end+0xff800ef4>
 1801358:	5ac00044 	addi	r11,r11,1
 180135c:	588000cc 	andi	r2,r11,3
 1801360:	31800204 	addi	r6,r6,8
 1801364:	103efd1e 	bne	r2,zero,1800f5c <__alt_data_end+0xff800f5c>
 1801368:	00002406 	br	18013fc <_malloc_r+0x660>
 180136c:	14000317 	ldw	r16,12(r2)
 1801370:	143f251e 	bne	r2,r16,1801008 <__alt_data_end+0xff801008>
 1801374:	21000084 	addi	r4,r4,2
 1801378:	003ebc06 	br	1800e6c <__alt_data_end+0xff800e6c>
 180137c:	8085883a 	add	r2,r16,r2
 1801380:	10c00117 	ldw	r3,4(r2)
 1801384:	81000317 	ldw	r4,12(r16)
 1801388:	81400217 	ldw	r5,8(r16)
 180138c:	18c00054 	ori	r3,r3,1
 1801390:	10c00115 	stw	r3,4(r2)
 1801394:	29000315 	stw	r4,12(r5)
 1801398:	21400215 	stw	r5,8(r4)
 180139c:	9009883a 	mov	r4,r18
 18013a0:	180364c0 	call	180364c <__malloc_unlock>
 18013a4:	80800204 	addi	r2,r16,8
 18013a8:	003f2506 	br	1801040 <__alt_data_end+0xff801040>
 18013ac:	12001704 	addi	r8,r2,92
 18013b0:	11c016c4 	addi	r7,r2,91
 18013b4:	4209883a 	add	r4,r8,r8
 18013b8:	003e9606 	br	1800e14 <__alt_data_end+0xff800e14>
 18013bc:	3804d1ba 	srli	r2,r7,6
 18013c0:	11400e44 	addi	r5,r2,57
 18013c4:	10c00e04 	addi	r3,r2,56
 18013c8:	294b883a 	add	r5,r5,r5
 18013cc:	003fbc06 	br	18012c0 <__alt_data_end+0xff8012c0>
 18013d0:	84ff5926 	beq	r16,r19,1801138 <__alt_data_end+0xff801138>
 18013d4:	00806034 	movhi	r2,384
 18013d8:	10976104 	addi	r2,r2,23940
 18013dc:	14000217 	ldw	r16,8(r2)
 18013e0:	00bfff04 	movi	r2,-4
 18013e4:	80c00117 	ldw	r3,4(r16)
 18013e8:	1886703a 	and	r3,r3,r2
 18013ec:	003f9106 	br	1801234 <__alt_data_end+0xff801234>
 18013f0:	60800217 	ldw	r2,8(r12)
 18013f4:	213fffc4 	addi	r4,r4,-1
 18013f8:	1300651e 	bne	r2,r12,1801590 <_malloc_r+0x7f4>
 18013fc:	208000cc 	andi	r2,r4,3
 1801400:	633ffe04 	addi	r12,r12,-8
 1801404:	103ffa1e 	bne	r2,zero,18013f0 <__alt_data_end+0xff8013f0>
 1801408:	98800117 	ldw	r2,4(r19)
 180140c:	0146303a 	nor	r3,zero,r5
 1801410:	1884703a 	and	r2,r3,r2
 1801414:	98800115 	stw	r2,4(r19)
 1801418:	294b883a 	add	r5,r5,r5
 180141c:	117f2836 	bltu	r2,r5,18010c0 <__alt_data_end+0xff8010c0>
 1801420:	283f2726 	beq	r5,zero,18010c0 <__alt_data_end+0xff8010c0>
 1801424:	2886703a 	and	r3,r5,r2
 1801428:	5809883a 	mov	r4,r11
 180142c:	183ec31e 	bne	r3,zero,1800f3c <__alt_data_end+0xff800f3c>
 1801430:	294b883a 	add	r5,r5,r5
 1801434:	2886703a 	and	r3,r5,r2
 1801438:	21000104 	addi	r4,r4,4
 180143c:	183ffc26 	beq	r3,zero,1801430 <__alt_data_end+0xff801430>
 1801440:	003ebe06 	br	1800f3c <__alt_data_end+0xff800f3c>
 1801444:	00c05504 	movi	r3,340
 1801448:	18801236 	bltu	r3,r2,1801494 <_malloc_r+0x6f8>
 180144c:	8804d3fa 	srli	r2,r17,15
 1801450:	12001e04 	addi	r8,r2,120
 1801454:	11c01dc4 	addi	r7,r2,119
 1801458:	4209883a 	add	r4,r8,r8
 180145c:	003e6d06 	br	1800e14 <__alt_data_end+0xff800e14>
 1801460:	00c40004 	movi	r3,4096
 1801464:	003f4606 	br	1801180 <__alt_data_end+0xff801180>
 1801468:	00800044 	movi	r2,1
 180146c:	a0800115 	stw	r2,4(r20)
 1801470:	003f7406 	br	1801244 <__alt_data_end+0xff801244>
 1801474:	1805d0ba 	srai	r2,r3,2
 1801478:	01c00044 	movi	r7,1
 180147c:	30c00117 	ldw	r3,4(r6)
 1801480:	388e983a 	sll	r7,r7,r2
 1801484:	2805883a 	mov	r2,r5
 1801488:	38c6b03a 	or	r3,r7,r3
 180148c:	30c00115 	stw	r3,4(r6)
 1801490:	003f9b06 	br	1801300 <__alt_data_end+0xff801300>
 1801494:	00c15504 	movi	r3,1364
 1801498:	18801a36 	bltu	r3,r2,1801504 <_malloc_r+0x768>
 180149c:	8804d4ba 	srli	r2,r17,18
 18014a0:	12001f44 	addi	r8,r2,125
 18014a4:	11c01f04 	addi	r7,r2,124
 18014a8:	4209883a 	add	r4,r8,r8
 18014ac:	003e5906 	br	1800e14 <__alt_data_end+0xff800e14>
 18014b0:	ad400404 	addi	r21,r21,16
 18014b4:	003f1706 	br	1801114 <__alt_data_end+0xff801114>
 18014b8:	00c01504 	movi	r3,84
 18014bc:	18802336 	bltu	r3,r2,180154c <_malloc_r+0x7b0>
 18014c0:	3804d33a 	srli	r2,r7,12
 18014c4:	11401bc4 	addi	r5,r2,111
 18014c8:	10c01b84 	addi	r3,r2,110
 18014cc:	294b883a 	add	r5,r5,r5
 18014d0:	003f7b06 	br	18012c0 <__alt_data_end+0xff8012c0>
 18014d4:	9c000217 	ldw	r16,8(r19)
 18014d8:	00bfff04 	movi	r2,-4
 18014dc:	80c00117 	ldw	r3,4(r16)
 18014e0:	1886703a 	and	r3,r3,r2
 18014e4:	003f5306 	br	1801234 <__alt_data_end+0xff801234>
 18014e8:	3083ffcc 	andi	r2,r6,4095
 18014ec:	103f181e 	bne	r2,zero,1801150 <__alt_data_end+0xff801150>
 18014f0:	99000217 	ldw	r4,8(r19)
 18014f4:	b545883a 	add	r2,r22,r21
 18014f8:	10800054 	ori	r2,r2,1
 18014fc:	20800115 	stw	r2,4(r4)
 1801500:	003f3e06 	br	18011fc <__alt_data_end+0xff8011fc>
 1801504:	01003f84 	movi	r4,254
 1801508:	02001fc4 	movi	r8,127
 180150c:	01c01f84 	movi	r7,126
 1801510:	003e4006 	br	1800e14 <__alt_data_end+0xff800e14>
 1801514:	00806034 	movhi	r2,384
 1801518:	109ce704 	addi	r2,r2,29596
 180151c:	15000015 	stw	r20,0(r2)
 1801520:	003f1106 	br	1801168 <__alt_data_end+0xff801168>
 1801524:	00800044 	movi	r2,1
 1801528:	002b883a 	mov	r21,zero
 180152c:	003f1f06 	br	18011ac <__alt_data_end+0xff8011ac>
 1801530:	81400204 	addi	r5,r16,8
 1801534:	9009883a 	mov	r4,r18
 1801538:	18028240 	call	1802824 <_free_r>
 180153c:	00806074 	movhi	r2,385
 1801540:	10a39804 	addi	r2,r2,-29088
 1801544:	10c00017 	ldw	r3,0(r2)
 1801548:	003f2c06 	br	18011fc <__alt_data_end+0xff8011fc>
 180154c:	00c05504 	movi	r3,340
 1801550:	18800536 	bltu	r3,r2,1801568 <_malloc_r+0x7cc>
 1801554:	3804d3fa 	srli	r2,r7,15
 1801558:	11401e04 	addi	r5,r2,120
 180155c:	10c01dc4 	addi	r3,r2,119
 1801560:	294b883a 	add	r5,r5,r5
 1801564:	003f5606 	br	18012c0 <__alt_data_end+0xff8012c0>
 1801568:	00c15504 	movi	r3,1364
 180156c:	18800536 	bltu	r3,r2,1801584 <_malloc_r+0x7e8>
 1801570:	3804d4ba 	srli	r2,r7,18
 1801574:	11401f44 	addi	r5,r2,125
 1801578:	10c01f04 	addi	r3,r2,124
 180157c:	294b883a 	add	r5,r5,r5
 1801580:	003f4f06 	br	18012c0 <__alt_data_end+0xff8012c0>
 1801584:	01403f84 	movi	r5,254
 1801588:	00c01f84 	movi	r3,126
 180158c:	003f4c06 	br	18012c0 <__alt_data_end+0xff8012c0>
 1801590:	98800117 	ldw	r2,4(r19)
 1801594:	003fa006 	br	1801418 <__alt_data_end+0xff801418>
 1801598:	8808d0fa 	srli	r4,r17,3
 180159c:	20800044 	addi	r2,r4,1
 18015a0:	1085883a 	add	r2,r2,r2
 18015a4:	003e9006 	br	1800fe8 <__alt_data_end+0xff800fe8>

018015a8 <memchr>:
 18015a8:	208000cc 	andi	r2,r4,3
 18015ac:	280f883a 	mov	r7,r5
 18015b0:	10003426 	beq	r2,zero,1801684 <memchr+0xdc>
 18015b4:	30bfffc4 	addi	r2,r6,-1
 18015b8:	30001a26 	beq	r6,zero,1801624 <memchr+0x7c>
 18015bc:	20c00003 	ldbu	r3,0(r4)
 18015c0:	29803fcc 	andi	r6,r5,255
 18015c4:	30c0051e 	bne	r6,r3,18015dc <memchr+0x34>
 18015c8:	00001806 	br	180162c <memchr+0x84>
 18015cc:	10001526 	beq	r2,zero,1801624 <memchr+0x7c>
 18015d0:	20c00003 	ldbu	r3,0(r4)
 18015d4:	10bfffc4 	addi	r2,r2,-1
 18015d8:	30c01426 	beq	r6,r3,180162c <memchr+0x84>
 18015dc:	21000044 	addi	r4,r4,1
 18015e0:	20c000cc 	andi	r3,r4,3
 18015e4:	183ff91e 	bne	r3,zero,18015cc <__alt_data_end+0xff8015cc>
 18015e8:	020000c4 	movi	r8,3
 18015ec:	40801136 	bltu	r8,r2,1801634 <memchr+0x8c>
 18015f0:	10000c26 	beq	r2,zero,1801624 <memchr+0x7c>
 18015f4:	20c00003 	ldbu	r3,0(r4)
 18015f8:	29403fcc 	andi	r5,r5,255
 18015fc:	28c00b26 	beq	r5,r3,180162c <memchr+0x84>
 1801600:	20c00044 	addi	r3,r4,1
 1801604:	39803fcc 	andi	r6,r7,255
 1801608:	2089883a 	add	r4,r4,r2
 180160c:	00000306 	br	180161c <memchr+0x74>
 1801610:	18c00044 	addi	r3,r3,1
 1801614:	197fffc3 	ldbu	r5,-1(r3)
 1801618:	31400526 	beq	r6,r5,1801630 <memchr+0x88>
 180161c:	1805883a 	mov	r2,r3
 1801620:	20fffb1e 	bne	r4,r3,1801610 <__alt_data_end+0xff801610>
 1801624:	0005883a 	mov	r2,zero
 1801628:	f800283a 	ret
 180162c:	2005883a 	mov	r2,r4
 1801630:	f800283a 	ret
 1801634:	28c03fcc 	andi	r3,r5,255
 1801638:	1812923a 	slli	r9,r3,8
 180163c:	02ffbff4 	movhi	r11,65279
 1801640:	02a02074 	movhi	r10,32897
 1801644:	48d2b03a 	or	r9,r9,r3
 1801648:	4806943a 	slli	r3,r9,16
 180164c:	5affbfc4 	addi	r11,r11,-257
 1801650:	52a02004 	addi	r10,r10,-32640
 1801654:	48d2b03a 	or	r9,r9,r3
 1801658:	20c00017 	ldw	r3,0(r4)
 180165c:	48c6f03a 	xor	r3,r9,r3
 1801660:	1acd883a 	add	r6,r3,r11
 1801664:	00c6303a 	nor	r3,zero,r3
 1801668:	30c6703a 	and	r3,r6,r3
 180166c:	1a86703a 	and	r3,r3,r10
 1801670:	183fe01e 	bne	r3,zero,18015f4 <__alt_data_end+0xff8015f4>
 1801674:	10bfff04 	addi	r2,r2,-4
 1801678:	21000104 	addi	r4,r4,4
 180167c:	40bff636 	bltu	r8,r2,1801658 <__alt_data_end+0xff801658>
 1801680:	003fdb06 	br	18015f0 <__alt_data_end+0xff8015f0>
 1801684:	3005883a 	mov	r2,r6
 1801688:	003fd706 	br	18015e8 <__alt_data_end+0xff8015e8>

0180168c <memcpy>:
 180168c:	defffd04 	addi	sp,sp,-12
 1801690:	dfc00215 	stw	ra,8(sp)
 1801694:	dc400115 	stw	r17,4(sp)
 1801698:	dc000015 	stw	r16,0(sp)
 180169c:	00c003c4 	movi	r3,15
 18016a0:	2005883a 	mov	r2,r4
 18016a4:	1980452e 	bgeu	r3,r6,18017bc <memcpy+0x130>
 18016a8:	2906b03a 	or	r3,r5,r4
 18016ac:	18c000cc 	andi	r3,r3,3
 18016b0:	1800441e 	bne	r3,zero,18017c4 <memcpy+0x138>
 18016b4:	347ffc04 	addi	r17,r6,-16
 18016b8:	8822d13a 	srli	r17,r17,4
 18016bc:	28c00104 	addi	r3,r5,4
 18016c0:	23400104 	addi	r13,r4,4
 18016c4:	8820913a 	slli	r16,r17,4
 18016c8:	2b000204 	addi	r12,r5,8
 18016cc:	22c00204 	addi	r11,r4,8
 18016d0:	84000504 	addi	r16,r16,20
 18016d4:	2a800304 	addi	r10,r5,12
 18016d8:	22400304 	addi	r9,r4,12
 18016dc:	2c21883a 	add	r16,r5,r16
 18016e0:	2811883a 	mov	r8,r5
 18016e4:	200f883a 	mov	r7,r4
 18016e8:	41000017 	ldw	r4,0(r8)
 18016ec:	1fc00017 	ldw	ra,0(r3)
 18016f0:	63c00017 	ldw	r15,0(r12)
 18016f4:	39000015 	stw	r4,0(r7)
 18016f8:	53800017 	ldw	r14,0(r10)
 18016fc:	6fc00015 	stw	ra,0(r13)
 1801700:	5bc00015 	stw	r15,0(r11)
 1801704:	4b800015 	stw	r14,0(r9)
 1801708:	18c00404 	addi	r3,r3,16
 180170c:	39c00404 	addi	r7,r7,16
 1801710:	42000404 	addi	r8,r8,16
 1801714:	6b400404 	addi	r13,r13,16
 1801718:	63000404 	addi	r12,r12,16
 180171c:	5ac00404 	addi	r11,r11,16
 1801720:	52800404 	addi	r10,r10,16
 1801724:	4a400404 	addi	r9,r9,16
 1801728:	1c3fef1e 	bne	r3,r16,18016e8 <__alt_data_end+0xff8016e8>
 180172c:	89c00044 	addi	r7,r17,1
 1801730:	380e913a 	slli	r7,r7,4
 1801734:	310003cc 	andi	r4,r6,15
 1801738:	02c000c4 	movi	r11,3
 180173c:	11c7883a 	add	r3,r2,r7
 1801740:	29cb883a 	add	r5,r5,r7
 1801744:	5900212e 	bgeu	r11,r4,18017cc <memcpy+0x140>
 1801748:	1813883a 	mov	r9,r3
 180174c:	2811883a 	mov	r8,r5
 1801750:	200f883a 	mov	r7,r4
 1801754:	42800017 	ldw	r10,0(r8)
 1801758:	4a400104 	addi	r9,r9,4
 180175c:	39ffff04 	addi	r7,r7,-4
 1801760:	4abfff15 	stw	r10,-4(r9)
 1801764:	42000104 	addi	r8,r8,4
 1801768:	59fffa36 	bltu	r11,r7,1801754 <__alt_data_end+0xff801754>
 180176c:	213fff04 	addi	r4,r4,-4
 1801770:	2008d0ba 	srli	r4,r4,2
 1801774:	318000cc 	andi	r6,r6,3
 1801778:	21000044 	addi	r4,r4,1
 180177c:	2109883a 	add	r4,r4,r4
 1801780:	2109883a 	add	r4,r4,r4
 1801784:	1907883a 	add	r3,r3,r4
 1801788:	290b883a 	add	r5,r5,r4
 180178c:	30000626 	beq	r6,zero,18017a8 <memcpy+0x11c>
 1801790:	198d883a 	add	r6,r3,r6
 1801794:	29c00003 	ldbu	r7,0(r5)
 1801798:	18c00044 	addi	r3,r3,1
 180179c:	29400044 	addi	r5,r5,1
 18017a0:	19ffffc5 	stb	r7,-1(r3)
 18017a4:	19bffb1e 	bne	r3,r6,1801794 <__alt_data_end+0xff801794>
 18017a8:	dfc00217 	ldw	ra,8(sp)
 18017ac:	dc400117 	ldw	r17,4(sp)
 18017b0:	dc000017 	ldw	r16,0(sp)
 18017b4:	dec00304 	addi	sp,sp,12
 18017b8:	f800283a 	ret
 18017bc:	2007883a 	mov	r3,r4
 18017c0:	003ff206 	br	180178c <__alt_data_end+0xff80178c>
 18017c4:	2007883a 	mov	r3,r4
 18017c8:	003ff106 	br	1801790 <__alt_data_end+0xff801790>
 18017cc:	200d883a 	mov	r6,r4
 18017d0:	003fee06 	br	180178c <__alt_data_end+0xff80178c>

018017d4 <memmove>:
 18017d4:	2005883a 	mov	r2,r4
 18017d8:	29000b2e 	bgeu	r5,r4,1801808 <memmove+0x34>
 18017dc:	298f883a 	add	r7,r5,r6
 18017e0:	21c0092e 	bgeu	r4,r7,1801808 <memmove+0x34>
 18017e4:	2187883a 	add	r3,r4,r6
 18017e8:	198bc83a 	sub	r5,r3,r6
 18017ec:	30004826 	beq	r6,zero,1801910 <memmove+0x13c>
 18017f0:	39ffffc4 	addi	r7,r7,-1
 18017f4:	39000003 	ldbu	r4,0(r7)
 18017f8:	18ffffc4 	addi	r3,r3,-1
 18017fc:	19000005 	stb	r4,0(r3)
 1801800:	28fffb1e 	bne	r5,r3,18017f0 <__alt_data_end+0xff8017f0>
 1801804:	f800283a 	ret
 1801808:	00c003c4 	movi	r3,15
 180180c:	1980412e 	bgeu	r3,r6,1801914 <memmove+0x140>
 1801810:	2886b03a 	or	r3,r5,r2
 1801814:	18c000cc 	andi	r3,r3,3
 1801818:	1800401e 	bne	r3,zero,180191c <memmove+0x148>
 180181c:	33fffc04 	addi	r15,r6,-16
 1801820:	781ed13a 	srli	r15,r15,4
 1801824:	28c00104 	addi	r3,r5,4
 1801828:	13400104 	addi	r13,r2,4
 180182c:	781c913a 	slli	r14,r15,4
 1801830:	2b000204 	addi	r12,r5,8
 1801834:	12c00204 	addi	r11,r2,8
 1801838:	73800504 	addi	r14,r14,20
 180183c:	2a800304 	addi	r10,r5,12
 1801840:	12400304 	addi	r9,r2,12
 1801844:	2b9d883a 	add	r14,r5,r14
 1801848:	2811883a 	mov	r8,r5
 180184c:	100f883a 	mov	r7,r2
 1801850:	41000017 	ldw	r4,0(r8)
 1801854:	39c00404 	addi	r7,r7,16
 1801858:	18c00404 	addi	r3,r3,16
 180185c:	393ffc15 	stw	r4,-16(r7)
 1801860:	193ffc17 	ldw	r4,-16(r3)
 1801864:	6b400404 	addi	r13,r13,16
 1801868:	5ac00404 	addi	r11,r11,16
 180186c:	693ffc15 	stw	r4,-16(r13)
 1801870:	61000017 	ldw	r4,0(r12)
 1801874:	4a400404 	addi	r9,r9,16
 1801878:	42000404 	addi	r8,r8,16
 180187c:	593ffc15 	stw	r4,-16(r11)
 1801880:	51000017 	ldw	r4,0(r10)
 1801884:	63000404 	addi	r12,r12,16
 1801888:	52800404 	addi	r10,r10,16
 180188c:	493ffc15 	stw	r4,-16(r9)
 1801890:	1bbfef1e 	bne	r3,r14,1801850 <__alt_data_end+0xff801850>
 1801894:	79000044 	addi	r4,r15,1
 1801898:	2008913a 	slli	r4,r4,4
 180189c:	328003cc 	andi	r10,r6,15
 18018a0:	02c000c4 	movi	r11,3
 18018a4:	1107883a 	add	r3,r2,r4
 18018a8:	290b883a 	add	r5,r5,r4
 18018ac:	5a801e2e 	bgeu	r11,r10,1801928 <memmove+0x154>
 18018b0:	1813883a 	mov	r9,r3
 18018b4:	2811883a 	mov	r8,r5
 18018b8:	500f883a 	mov	r7,r10
 18018bc:	41000017 	ldw	r4,0(r8)
 18018c0:	4a400104 	addi	r9,r9,4
 18018c4:	39ffff04 	addi	r7,r7,-4
 18018c8:	493fff15 	stw	r4,-4(r9)
 18018cc:	42000104 	addi	r8,r8,4
 18018d0:	59fffa36 	bltu	r11,r7,18018bc <__alt_data_end+0xff8018bc>
 18018d4:	513fff04 	addi	r4,r10,-4
 18018d8:	2008d0ba 	srli	r4,r4,2
 18018dc:	318000cc 	andi	r6,r6,3
 18018e0:	21000044 	addi	r4,r4,1
 18018e4:	2109883a 	add	r4,r4,r4
 18018e8:	2109883a 	add	r4,r4,r4
 18018ec:	1907883a 	add	r3,r3,r4
 18018f0:	290b883a 	add	r5,r5,r4
 18018f4:	30000b26 	beq	r6,zero,1801924 <memmove+0x150>
 18018f8:	198d883a 	add	r6,r3,r6
 18018fc:	29c00003 	ldbu	r7,0(r5)
 1801900:	18c00044 	addi	r3,r3,1
 1801904:	29400044 	addi	r5,r5,1
 1801908:	19ffffc5 	stb	r7,-1(r3)
 180190c:	19bffb1e 	bne	r3,r6,18018fc <__alt_data_end+0xff8018fc>
 1801910:	f800283a 	ret
 1801914:	1007883a 	mov	r3,r2
 1801918:	003ff606 	br	18018f4 <__alt_data_end+0xff8018f4>
 180191c:	1007883a 	mov	r3,r2
 1801920:	003ff506 	br	18018f8 <__alt_data_end+0xff8018f8>
 1801924:	f800283a 	ret
 1801928:	500d883a 	mov	r6,r10
 180192c:	003ff106 	br	18018f4 <__alt_data_end+0xff8018f4>

01801930 <memset>:
 1801930:	20c000cc 	andi	r3,r4,3
 1801934:	2005883a 	mov	r2,r4
 1801938:	18004426 	beq	r3,zero,1801a4c <memset+0x11c>
 180193c:	31ffffc4 	addi	r7,r6,-1
 1801940:	30004026 	beq	r6,zero,1801a44 <memset+0x114>
 1801944:	2813883a 	mov	r9,r5
 1801948:	200d883a 	mov	r6,r4
 180194c:	2007883a 	mov	r3,r4
 1801950:	00000406 	br	1801964 <memset+0x34>
 1801954:	3a3fffc4 	addi	r8,r7,-1
 1801958:	31800044 	addi	r6,r6,1
 180195c:	38003926 	beq	r7,zero,1801a44 <memset+0x114>
 1801960:	400f883a 	mov	r7,r8
 1801964:	18c00044 	addi	r3,r3,1
 1801968:	32400005 	stb	r9,0(r6)
 180196c:	1a0000cc 	andi	r8,r3,3
 1801970:	403ff81e 	bne	r8,zero,1801954 <__alt_data_end+0xff801954>
 1801974:	010000c4 	movi	r4,3
 1801978:	21c02d2e 	bgeu	r4,r7,1801a30 <memset+0x100>
 180197c:	29003fcc 	andi	r4,r5,255
 1801980:	200c923a 	slli	r6,r4,8
 1801984:	3108b03a 	or	r4,r6,r4
 1801988:	200c943a 	slli	r6,r4,16
 180198c:	218cb03a 	or	r6,r4,r6
 1801990:	010003c4 	movi	r4,15
 1801994:	21c0182e 	bgeu	r4,r7,18019f8 <memset+0xc8>
 1801998:	3b3ffc04 	addi	r12,r7,-16
 180199c:	6018d13a 	srli	r12,r12,4
 18019a0:	1a000104 	addi	r8,r3,4
 18019a4:	1ac00204 	addi	r11,r3,8
 18019a8:	6008913a 	slli	r4,r12,4
 18019ac:	1a800304 	addi	r10,r3,12
 18019b0:	1813883a 	mov	r9,r3
 18019b4:	21000504 	addi	r4,r4,20
 18019b8:	1909883a 	add	r4,r3,r4
 18019bc:	49800015 	stw	r6,0(r9)
 18019c0:	41800015 	stw	r6,0(r8)
 18019c4:	59800015 	stw	r6,0(r11)
 18019c8:	51800015 	stw	r6,0(r10)
 18019cc:	42000404 	addi	r8,r8,16
 18019d0:	4a400404 	addi	r9,r9,16
 18019d4:	5ac00404 	addi	r11,r11,16
 18019d8:	52800404 	addi	r10,r10,16
 18019dc:	413ff71e 	bne	r8,r4,18019bc <__alt_data_end+0xff8019bc>
 18019e0:	63000044 	addi	r12,r12,1
 18019e4:	6018913a 	slli	r12,r12,4
 18019e8:	39c003cc 	andi	r7,r7,15
 18019ec:	010000c4 	movi	r4,3
 18019f0:	1b07883a 	add	r3,r3,r12
 18019f4:	21c00e2e 	bgeu	r4,r7,1801a30 <memset+0x100>
 18019f8:	1813883a 	mov	r9,r3
 18019fc:	3811883a 	mov	r8,r7
 1801a00:	010000c4 	movi	r4,3
 1801a04:	49800015 	stw	r6,0(r9)
 1801a08:	423fff04 	addi	r8,r8,-4
 1801a0c:	4a400104 	addi	r9,r9,4
 1801a10:	223ffc36 	bltu	r4,r8,1801a04 <__alt_data_end+0xff801a04>
 1801a14:	393fff04 	addi	r4,r7,-4
 1801a18:	2008d0ba 	srli	r4,r4,2
 1801a1c:	39c000cc 	andi	r7,r7,3
 1801a20:	21000044 	addi	r4,r4,1
 1801a24:	2109883a 	add	r4,r4,r4
 1801a28:	2109883a 	add	r4,r4,r4
 1801a2c:	1907883a 	add	r3,r3,r4
 1801a30:	38000526 	beq	r7,zero,1801a48 <memset+0x118>
 1801a34:	19cf883a 	add	r7,r3,r7
 1801a38:	19400005 	stb	r5,0(r3)
 1801a3c:	18c00044 	addi	r3,r3,1
 1801a40:	38fffd1e 	bne	r7,r3,1801a38 <__alt_data_end+0xff801a38>
 1801a44:	f800283a 	ret
 1801a48:	f800283a 	ret
 1801a4c:	2007883a 	mov	r3,r4
 1801a50:	300f883a 	mov	r7,r6
 1801a54:	003fc706 	br	1801974 <__alt_data_end+0xff801974>

01801a58 <_realloc_r>:
 1801a58:	defff604 	addi	sp,sp,-40
 1801a5c:	dc400115 	stw	r17,4(sp)
 1801a60:	dfc00915 	stw	ra,36(sp)
 1801a64:	df000815 	stw	fp,32(sp)
 1801a68:	ddc00715 	stw	r23,28(sp)
 1801a6c:	dd800615 	stw	r22,24(sp)
 1801a70:	dd400515 	stw	r21,20(sp)
 1801a74:	dd000415 	stw	r20,16(sp)
 1801a78:	dcc00315 	stw	r19,12(sp)
 1801a7c:	dc800215 	stw	r18,8(sp)
 1801a80:	dc000015 	stw	r16,0(sp)
 1801a84:	3023883a 	mov	r17,r6
 1801a88:	2800b626 	beq	r5,zero,1801d64 <_realloc_r+0x30c>
 1801a8c:	2829883a 	mov	r20,r5
 1801a90:	2025883a 	mov	r18,r4
 1801a94:	18036280 	call	1803628 <__malloc_lock>
 1801a98:	a0ffff17 	ldw	r3,-4(r20)
 1801a9c:	043fff04 	movi	r16,-4
 1801aa0:	888002c4 	addi	r2,r17,11
 1801aa4:	01000584 	movi	r4,22
 1801aa8:	a57ffe04 	addi	r21,r20,-8
 1801aac:	1c20703a 	and	r16,r3,r16
 1801ab0:	2080332e 	bgeu	r4,r2,1801b80 <_realloc_r+0x128>
 1801ab4:	05bffe04 	movi	r22,-8
 1801ab8:	15ac703a 	and	r22,r2,r22
 1801abc:	b005883a 	mov	r2,r22
 1801ac0:	b0005716 	blt	r22,zero,1801c20 <_realloc_r+0x1c8>
 1801ac4:	b4405636 	bltu	r22,r17,1801c20 <_realloc_r+0x1c8>
 1801ac8:	8080300e 	bge	r16,r2,1801b8c <_realloc_r+0x134>
 1801acc:	07006034 	movhi	fp,384
 1801ad0:	e7176104 	addi	fp,fp,23940
 1801ad4:	e2000217 	ldw	r8,8(fp)
 1801ad8:	ac09883a 	add	r4,r21,r16
 1801adc:	22006126 	beq	r4,r8,1801c64 <_realloc_r+0x20c>
 1801ae0:	22400117 	ldw	r9,4(r4)
 1801ae4:	01ffff84 	movi	r7,-2
 1801ae8:	49ce703a 	and	r7,r9,r7
 1801aec:	21cf883a 	add	r7,r4,r7
 1801af0:	39800117 	ldw	r6,4(r7)
 1801af4:	3180004c 	andi	r6,r6,1
 1801af8:	30003e26 	beq	r6,zero,1801bf4 <_realloc_r+0x19c>
 1801afc:	18c0004c 	andi	r3,r3,1
 1801b00:	18008126 	beq	r3,zero,1801d08 <_realloc_r+0x2b0>
 1801b04:	880b883a 	mov	r5,r17
 1801b08:	9009883a 	mov	r4,r18
 1801b0c:	1800d9c0 	call	1800d9c <_malloc_r>
 1801b10:	1023883a 	mov	r17,r2
 1801b14:	10011e26 	beq	r2,zero,1801f90 <_realloc_r+0x538>
 1801b18:	a0ffff17 	ldw	r3,-4(r20)
 1801b1c:	113ffe04 	addi	r4,r2,-8
 1801b20:	00bfff84 	movi	r2,-2
 1801b24:	1884703a 	and	r2,r3,r2
 1801b28:	a885883a 	add	r2,r21,r2
 1801b2c:	2080ee26 	beq	r4,r2,1801ee8 <_realloc_r+0x490>
 1801b30:	81bfff04 	addi	r6,r16,-4
 1801b34:	00800904 	movi	r2,36
 1801b38:	1180b836 	bltu	r2,r6,1801e1c <_realloc_r+0x3c4>
 1801b3c:	00c004c4 	movi	r3,19
 1801b40:	19809536 	bltu	r3,r6,1801d98 <_realloc_r+0x340>
 1801b44:	8805883a 	mov	r2,r17
 1801b48:	a007883a 	mov	r3,r20
 1801b4c:	19000017 	ldw	r4,0(r3)
 1801b50:	11000015 	stw	r4,0(r2)
 1801b54:	19000117 	ldw	r4,4(r3)
 1801b58:	11000115 	stw	r4,4(r2)
 1801b5c:	18c00217 	ldw	r3,8(r3)
 1801b60:	10c00215 	stw	r3,8(r2)
 1801b64:	a00b883a 	mov	r5,r20
 1801b68:	9009883a 	mov	r4,r18
 1801b6c:	18028240 	call	1802824 <_free_r>
 1801b70:	9009883a 	mov	r4,r18
 1801b74:	180364c0 	call	180364c <__malloc_unlock>
 1801b78:	8805883a 	mov	r2,r17
 1801b7c:	00001106 	br	1801bc4 <_realloc_r+0x16c>
 1801b80:	00800404 	movi	r2,16
 1801b84:	102d883a 	mov	r22,r2
 1801b88:	003fce06 	br	1801ac4 <__alt_data_end+0xff801ac4>
 1801b8c:	a023883a 	mov	r17,r20
 1801b90:	858fc83a 	sub	r7,r16,r22
 1801b94:	008003c4 	movi	r2,15
 1801b98:	18c0004c 	andi	r3,r3,1
 1801b9c:	11c02436 	bltu	r2,r7,1801c30 <_realloc_r+0x1d8>
 1801ba0:	1c06b03a 	or	r3,r3,r16
 1801ba4:	a8c00115 	stw	r3,4(r21)
 1801ba8:	ac21883a 	add	r16,r21,r16
 1801bac:	80800117 	ldw	r2,4(r16)
 1801bb0:	10800054 	ori	r2,r2,1
 1801bb4:	80800115 	stw	r2,4(r16)
 1801bb8:	9009883a 	mov	r4,r18
 1801bbc:	180364c0 	call	180364c <__malloc_unlock>
 1801bc0:	8805883a 	mov	r2,r17
 1801bc4:	dfc00917 	ldw	ra,36(sp)
 1801bc8:	df000817 	ldw	fp,32(sp)
 1801bcc:	ddc00717 	ldw	r23,28(sp)
 1801bd0:	dd800617 	ldw	r22,24(sp)
 1801bd4:	dd400517 	ldw	r21,20(sp)
 1801bd8:	dd000417 	ldw	r20,16(sp)
 1801bdc:	dcc00317 	ldw	r19,12(sp)
 1801be0:	dc800217 	ldw	r18,8(sp)
 1801be4:	dc400117 	ldw	r17,4(sp)
 1801be8:	dc000017 	ldw	r16,0(sp)
 1801bec:	dec00a04 	addi	sp,sp,40
 1801bf0:	f800283a 	ret
 1801bf4:	017fff04 	movi	r5,-4
 1801bf8:	494a703a 	and	r5,r9,r5
 1801bfc:	814d883a 	add	r6,r16,r5
 1801c00:	30801e16 	blt	r6,r2,1801c7c <_realloc_r+0x224>
 1801c04:	20800317 	ldw	r2,12(r4)
 1801c08:	21000217 	ldw	r4,8(r4)
 1801c0c:	a023883a 	mov	r17,r20
 1801c10:	3021883a 	mov	r16,r6
 1801c14:	20800315 	stw	r2,12(r4)
 1801c18:	11000215 	stw	r4,8(r2)
 1801c1c:	003fdc06 	br	1801b90 <__alt_data_end+0xff801b90>
 1801c20:	00800304 	movi	r2,12
 1801c24:	90800015 	stw	r2,0(r18)
 1801c28:	0005883a 	mov	r2,zero
 1801c2c:	003fe506 	br	1801bc4 <__alt_data_end+0xff801bc4>
 1801c30:	1d86b03a 	or	r3,r3,r22
 1801c34:	a8c00115 	stw	r3,4(r21)
 1801c38:	ad8b883a 	add	r5,r21,r22
 1801c3c:	38c00054 	ori	r3,r7,1
 1801c40:	28c00115 	stw	r3,4(r5)
 1801c44:	29cf883a 	add	r7,r5,r7
 1801c48:	38c00117 	ldw	r3,4(r7)
 1801c4c:	29400204 	addi	r5,r5,8
 1801c50:	9009883a 	mov	r4,r18
 1801c54:	18800054 	ori	r2,r3,1
 1801c58:	38800115 	stw	r2,4(r7)
 1801c5c:	18028240 	call	1802824 <_free_r>
 1801c60:	003fd506 	br	1801bb8 <__alt_data_end+0xff801bb8>
 1801c64:	21c00117 	ldw	r7,4(r4)
 1801c68:	017fff04 	movi	r5,-4
 1801c6c:	b1800404 	addi	r6,r22,16
 1801c70:	394a703a 	and	r5,r7,r5
 1801c74:	814f883a 	add	r7,r16,r5
 1801c78:	39805b0e 	bge	r7,r6,1801de8 <_realloc_r+0x390>
 1801c7c:	18c0004c 	andi	r3,r3,1
 1801c80:	183fa01e 	bne	r3,zero,1801b04 <__alt_data_end+0xff801b04>
 1801c84:	a4fffe17 	ldw	r19,-8(r20)
 1801c88:	00ffff04 	movi	r3,-4
 1801c8c:	ace7c83a 	sub	r19,r21,r19
 1801c90:	99800117 	ldw	r6,4(r19)
 1801c94:	30c6703a 	and	r3,r6,r3
 1801c98:	20002026 	beq	r4,zero,1801d1c <_realloc_r+0x2c4>
 1801c9c:	80ef883a 	add	r23,r16,r3
 1801ca0:	b96f883a 	add	r23,r23,r5
 1801ca4:	22006126 	beq	r4,r8,1801e2c <_realloc_r+0x3d4>
 1801ca8:	b8801c16 	blt	r23,r2,1801d1c <_realloc_r+0x2c4>
 1801cac:	20800317 	ldw	r2,12(r4)
 1801cb0:	20c00217 	ldw	r3,8(r4)
 1801cb4:	81bfff04 	addi	r6,r16,-4
 1801cb8:	01000904 	movi	r4,36
 1801cbc:	18800315 	stw	r2,12(r3)
 1801cc0:	10c00215 	stw	r3,8(r2)
 1801cc4:	98c00217 	ldw	r3,8(r19)
 1801cc8:	98800317 	ldw	r2,12(r19)
 1801ccc:	9c400204 	addi	r17,r19,8
 1801cd0:	18800315 	stw	r2,12(r3)
 1801cd4:	10c00215 	stw	r3,8(r2)
 1801cd8:	21801b36 	bltu	r4,r6,1801d48 <_realloc_r+0x2f0>
 1801cdc:	008004c4 	movi	r2,19
 1801ce0:	1180362e 	bgeu	r2,r6,1801dbc <_realloc_r+0x364>
 1801ce4:	a0800017 	ldw	r2,0(r20)
 1801ce8:	98800215 	stw	r2,8(r19)
 1801cec:	a0800117 	ldw	r2,4(r20)
 1801cf0:	98800315 	stw	r2,12(r19)
 1801cf4:	008006c4 	movi	r2,27
 1801cf8:	11808136 	bltu	r2,r6,1801f00 <_realloc_r+0x4a8>
 1801cfc:	98800404 	addi	r2,r19,16
 1801d00:	a5000204 	addi	r20,r20,8
 1801d04:	00002e06 	br	1801dc0 <_realloc_r+0x368>
 1801d08:	a4fffe17 	ldw	r19,-8(r20)
 1801d0c:	00ffff04 	movi	r3,-4
 1801d10:	ace7c83a 	sub	r19,r21,r19
 1801d14:	99000117 	ldw	r4,4(r19)
 1801d18:	20c6703a 	and	r3,r4,r3
 1801d1c:	983f7926 	beq	r19,zero,1801b04 <__alt_data_end+0xff801b04>
 1801d20:	80ef883a 	add	r23,r16,r3
 1801d24:	b8bf7716 	blt	r23,r2,1801b04 <__alt_data_end+0xff801b04>
 1801d28:	98800317 	ldw	r2,12(r19)
 1801d2c:	98c00217 	ldw	r3,8(r19)
 1801d30:	81bfff04 	addi	r6,r16,-4
 1801d34:	01000904 	movi	r4,36
 1801d38:	18800315 	stw	r2,12(r3)
 1801d3c:	10c00215 	stw	r3,8(r2)
 1801d40:	9c400204 	addi	r17,r19,8
 1801d44:	21bfe52e 	bgeu	r4,r6,1801cdc <__alt_data_end+0xff801cdc>
 1801d48:	a00b883a 	mov	r5,r20
 1801d4c:	8809883a 	mov	r4,r17
 1801d50:	18017d40 	call	18017d4 <memmove>
 1801d54:	98c00117 	ldw	r3,4(r19)
 1801d58:	b821883a 	mov	r16,r23
 1801d5c:	982b883a 	mov	r21,r19
 1801d60:	003f8b06 	br	1801b90 <__alt_data_end+0xff801b90>
 1801d64:	300b883a 	mov	r5,r6
 1801d68:	dfc00917 	ldw	ra,36(sp)
 1801d6c:	df000817 	ldw	fp,32(sp)
 1801d70:	ddc00717 	ldw	r23,28(sp)
 1801d74:	dd800617 	ldw	r22,24(sp)
 1801d78:	dd400517 	ldw	r21,20(sp)
 1801d7c:	dd000417 	ldw	r20,16(sp)
 1801d80:	dcc00317 	ldw	r19,12(sp)
 1801d84:	dc800217 	ldw	r18,8(sp)
 1801d88:	dc400117 	ldw	r17,4(sp)
 1801d8c:	dc000017 	ldw	r16,0(sp)
 1801d90:	dec00a04 	addi	sp,sp,40
 1801d94:	1800d9c1 	jmpi	1800d9c <_malloc_r>
 1801d98:	a0c00017 	ldw	r3,0(r20)
 1801d9c:	88c00015 	stw	r3,0(r17)
 1801da0:	a0c00117 	ldw	r3,4(r20)
 1801da4:	88c00115 	stw	r3,4(r17)
 1801da8:	00c006c4 	movi	r3,27
 1801dac:	19804636 	bltu	r3,r6,1801ec8 <_realloc_r+0x470>
 1801db0:	88800204 	addi	r2,r17,8
 1801db4:	a0c00204 	addi	r3,r20,8
 1801db8:	003f6406 	br	1801b4c <__alt_data_end+0xff801b4c>
 1801dbc:	8805883a 	mov	r2,r17
 1801dc0:	a0c00017 	ldw	r3,0(r20)
 1801dc4:	b821883a 	mov	r16,r23
 1801dc8:	982b883a 	mov	r21,r19
 1801dcc:	10c00015 	stw	r3,0(r2)
 1801dd0:	a0c00117 	ldw	r3,4(r20)
 1801dd4:	10c00115 	stw	r3,4(r2)
 1801dd8:	a0c00217 	ldw	r3,8(r20)
 1801ddc:	10c00215 	stw	r3,8(r2)
 1801de0:	98c00117 	ldw	r3,4(r19)
 1801de4:	003f6a06 	br	1801b90 <__alt_data_end+0xff801b90>
 1801de8:	adab883a 	add	r21,r21,r22
 1801dec:	3d85c83a 	sub	r2,r7,r22
 1801df0:	e5400215 	stw	r21,8(fp)
 1801df4:	10800054 	ori	r2,r2,1
 1801df8:	a8800115 	stw	r2,4(r21)
 1801dfc:	a0bfff17 	ldw	r2,-4(r20)
 1801e00:	9009883a 	mov	r4,r18
 1801e04:	1080004c 	andi	r2,r2,1
 1801e08:	1584b03a 	or	r2,r2,r22
 1801e0c:	a0bfff15 	stw	r2,-4(r20)
 1801e10:	180364c0 	call	180364c <__malloc_unlock>
 1801e14:	a005883a 	mov	r2,r20
 1801e18:	003f6a06 	br	1801bc4 <__alt_data_end+0xff801bc4>
 1801e1c:	a00b883a 	mov	r5,r20
 1801e20:	8809883a 	mov	r4,r17
 1801e24:	18017d40 	call	18017d4 <memmove>
 1801e28:	003f4e06 	br	1801b64 <__alt_data_end+0xff801b64>
 1801e2c:	b1000404 	addi	r4,r22,16
 1801e30:	b93fba16 	blt	r23,r4,1801d1c <__alt_data_end+0xff801d1c>
 1801e34:	98800317 	ldw	r2,12(r19)
 1801e38:	98c00217 	ldw	r3,8(r19)
 1801e3c:	81bfff04 	addi	r6,r16,-4
 1801e40:	01000904 	movi	r4,36
 1801e44:	18800315 	stw	r2,12(r3)
 1801e48:	10c00215 	stw	r3,8(r2)
 1801e4c:	9c400204 	addi	r17,r19,8
 1801e50:	21804336 	bltu	r4,r6,1801f60 <_realloc_r+0x508>
 1801e54:	008004c4 	movi	r2,19
 1801e58:	11803f2e 	bgeu	r2,r6,1801f58 <_realloc_r+0x500>
 1801e5c:	a0800017 	ldw	r2,0(r20)
 1801e60:	98800215 	stw	r2,8(r19)
 1801e64:	a0800117 	ldw	r2,4(r20)
 1801e68:	98800315 	stw	r2,12(r19)
 1801e6c:	008006c4 	movi	r2,27
 1801e70:	11803f36 	bltu	r2,r6,1801f70 <_realloc_r+0x518>
 1801e74:	98800404 	addi	r2,r19,16
 1801e78:	a5000204 	addi	r20,r20,8
 1801e7c:	a0c00017 	ldw	r3,0(r20)
 1801e80:	10c00015 	stw	r3,0(r2)
 1801e84:	a0c00117 	ldw	r3,4(r20)
 1801e88:	10c00115 	stw	r3,4(r2)
 1801e8c:	a0c00217 	ldw	r3,8(r20)
 1801e90:	10c00215 	stw	r3,8(r2)
 1801e94:	9d87883a 	add	r3,r19,r22
 1801e98:	bd85c83a 	sub	r2,r23,r22
 1801e9c:	e0c00215 	stw	r3,8(fp)
 1801ea0:	10800054 	ori	r2,r2,1
 1801ea4:	18800115 	stw	r2,4(r3)
 1801ea8:	98800117 	ldw	r2,4(r19)
 1801eac:	9009883a 	mov	r4,r18
 1801eb0:	1080004c 	andi	r2,r2,1
 1801eb4:	1584b03a 	or	r2,r2,r22
 1801eb8:	98800115 	stw	r2,4(r19)
 1801ebc:	180364c0 	call	180364c <__malloc_unlock>
 1801ec0:	8805883a 	mov	r2,r17
 1801ec4:	003f3f06 	br	1801bc4 <__alt_data_end+0xff801bc4>
 1801ec8:	a0c00217 	ldw	r3,8(r20)
 1801ecc:	88c00215 	stw	r3,8(r17)
 1801ed0:	a0c00317 	ldw	r3,12(r20)
 1801ed4:	88c00315 	stw	r3,12(r17)
 1801ed8:	30801126 	beq	r6,r2,1801f20 <_realloc_r+0x4c8>
 1801edc:	88800404 	addi	r2,r17,16
 1801ee0:	a0c00404 	addi	r3,r20,16
 1801ee4:	003f1906 	br	1801b4c <__alt_data_end+0xff801b4c>
 1801ee8:	893fff17 	ldw	r4,-4(r17)
 1801eec:	00bfff04 	movi	r2,-4
 1801ef0:	a023883a 	mov	r17,r20
 1801ef4:	2084703a 	and	r2,r4,r2
 1801ef8:	80a1883a 	add	r16,r16,r2
 1801efc:	003f2406 	br	1801b90 <__alt_data_end+0xff801b90>
 1801f00:	a0800217 	ldw	r2,8(r20)
 1801f04:	98800415 	stw	r2,16(r19)
 1801f08:	a0800317 	ldw	r2,12(r20)
 1801f0c:	98800515 	stw	r2,20(r19)
 1801f10:	31000a26 	beq	r6,r4,1801f3c <_realloc_r+0x4e4>
 1801f14:	98800604 	addi	r2,r19,24
 1801f18:	a5000404 	addi	r20,r20,16
 1801f1c:	003fa806 	br	1801dc0 <__alt_data_end+0xff801dc0>
 1801f20:	a1000417 	ldw	r4,16(r20)
 1801f24:	88800604 	addi	r2,r17,24
 1801f28:	a0c00604 	addi	r3,r20,24
 1801f2c:	89000415 	stw	r4,16(r17)
 1801f30:	a1000517 	ldw	r4,20(r20)
 1801f34:	89000515 	stw	r4,20(r17)
 1801f38:	003f0406 	br	1801b4c <__alt_data_end+0xff801b4c>
 1801f3c:	a0c00417 	ldw	r3,16(r20)
 1801f40:	a5000604 	addi	r20,r20,24
 1801f44:	98800804 	addi	r2,r19,32
 1801f48:	98c00615 	stw	r3,24(r19)
 1801f4c:	a0ffff17 	ldw	r3,-4(r20)
 1801f50:	98c00715 	stw	r3,28(r19)
 1801f54:	003f9a06 	br	1801dc0 <__alt_data_end+0xff801dc0>
 1801f58:	8805883a 	mov	r2,r17
 1801f5c:	003fc706 	br	1801e7c <__alt_data_end+0xff801e7c>
 1801f60:	a00b883a 	mov	r5,r20
 1801f64:	8809883a 	mov	r4,r17
 1801f68:	18017d40 	call	18017d4 <memmove>
 1801f6c:	003fc906 	br	1801e94 <__alt_data_end+0xff801e94>
 1801f70:	a0800217 	ldw	r2,8(r20)
 1801f74:	98800415 	stw	r2,16(r19)
 1801f78:	a0800317 	ldw	r2,12(r20)
 1801f7c:	98800515 	stw	r2,20(r19)
 1801f80:	31000726 	beq	r6,r4,1801fa0 <_realloc_r+0x548>
 1801f84:	98800604 	addi	r2,r19,24
 1801f88:	a5000404 	addi	r20,r20,16
 1801f8c:	003fbb06 	br	1801e7c <__alt_data_end+0xff801e7c>
 1801f90:	9009883a 	mov	r4,r18
 1801f94:	180364c0 	call	180364c <__malloc_unlock>
 1801f98:	0005883a 	mov	r2,zero
 1801f9c:	003f0906 	br	1801bc4 <__alt_data_end+0xff801bc4>
 1801fa0:	a0c00417 	ldw	r3,16(r20)
 1801fa4:	a5000604 	addi	r20,r20,24
 1801fa8:	98800804 	addi	r2,r19,32
 1801fac:	98c00615 	stw	r3,24(r19)
 1801fb0:	a0ffff17 	ldw	r3,-4(r20)
 1801fb4:	98c00715 	stw	r3,28(r19)
 1801fb8:	003fb006 	br	1801e7c <__alt_data_end+0xff801e7c>

01801fbc <_sbrk_r>:
 1801fbc:	defffd04 	addi	sp,sp,-12
 1801fc0:	dc000015 	stw	r16,0(sp)
 1801fc4:	04006074 	movhi	r16,385
 1801fc8:	dc400115 	stw	r17,4(sp)
 1801fcc:	84239104 	addi	r16,r16,-29116
 1801fd0:	2023883a 	mov	r17,r4
 1801fd4:	2809883a 	mov	r4,r5
 1801fd8:	dfc00215 	stw	ra,8(sp)
 1801fdc:	80000015 	stw	zero,0(r16)
 1801fe0:	18038480 	call	1803848 <sbrk>
 1801fe4:	00ffffc4 	movi	r3,-1
 1801fe8:	10c00526 	beq	r2,r3,1802000 <_sbrk_r+0x44>
 1801fec:	dfc00217 	ldw	ra,8(sp)
 1801ff0:	dc400117 	ldw	r17,4(sp)
 1801ff4:	dc000017 	ldw	r16,0(sp)
 1801ff8:	dec00304 	addi	sp,sp,12
 1801ffc:	f800283a 	ret
 1802000:	80c00017 	ldw	r3,0(r16)
 1802004:	183ff926 	beq	r3,zero,1801fec <__alt_data_end+0xff801fec>
 1802008:	88c00015 	stw	r3,0(r17)
 180200c:	003ff706 	br	1801fec <__alt_data_end+0xff801fec>

01802010 <__sread>:
 1802010:	defffe04 	addi	sp,sp,-8
 1802014:	dc000015 	stw	r16,0(sp)
 1802018:	2821883a 	mov	r16,r5
 180201c:	2940038f 	ldh	r5,14(r5)
 1802020:	dfc00115 	stw	ra,4(sp)
 1802024:	1802d500 	call	1802d50 <_read_r>
 1802028:	10000716 	blt	r2,zero,1802048 <__sread+0x38>
 180202c:	80c01417 	ldw	r3,80(r16)
 1802030:	1887883a 	add	r3,r3,r2
 1802034:	80c01415 	stw	r3,80(r16)
 1802038:	dfc00117 	ldw	ra,4(sp)
 180203c:	dc000017 	ldw	r16,0(sp)
 1802040:	dec00204 	addi	sp,sp,8
 1802044:	f800283a 	ret
 1802048:	80c0030b 	ldhu	r3,12(r16)
 180204c:	18fbffcc 	andi	r3,r3,61439
 1802050:	80c0030d 	sth	r3,12(r16)
 1802054:	dfc00117 	ldw	ra,4(sp)
 1802058:	dc000017 	ldw	r16,0(sp)
 180205c:	dec00204 	addi	sp,sp,8
 1802060:	f800283a 	ret

01802064 <__seofread>:
 1802064:	0005883a 	mov	r2,zero
 1802068:	f800283a 	ret

0180206c <__swrite>:
 180206c:	2880030b 	ldhu	r2,12(r5)
 1802070:	defffb04 	addi	sp,sp,-20
 1802074:	dcc00315 	stw	r19,12(sp)
 1802078:	dc800215 	stw	r18,8(sp)
 180207c:	dc400115 	stw	r17,4(sp)
 1802080:	dc000015 	stw	r16,0(sp)
 1802084:	dfc00415 	stw	ra,16(sp)
 1802088:	10c0400c 	andi	r3,r2,256
 180208c:	2821883a 	mov	r16,r5
 1802090:	2023883a 	mov	r17,r4
 1802094:	3025883a 	mov	r18,r6
 1802098:	3827883a 	mov	r19,r7
 180209c:	18000526 	beq	r3,zero,18020b4 <__swrite+0x48>
 18020a0:	2940038f 	ldh	r5,14(r5)
 18020a4:	01c00084 	movi	r7,2
 18020a8:	000d883a 	mov	r6,zero
 18020ac:	1802b340 	call	1802b34 <_lseek_r>
 18020b0:	8080030b 	ldhu	r2,12(r16)
 18020b4:	8140038f 	ldh	r5,14(r16)
 18020b8:	10bbffcc 	andi	r2,r2,61439
 18020bc:	980f883a 	mov	r7,r19
 18020c0:	900d883a 	mov	r6,r18
 18020c4:	8809883a 	mov	r4,r17
 18020c8:	8080030d 	sth	r2,12(r16)
 18020cc:	dfc00417 	ldw	ra,16(sp)
 18020d0:	dcc00317 	ldw	r19,12(sp)
 18020d4:	dc800217 	ldw	r18,8(sp)
 18020d8:	dc400117 	ldw	r17,4(sp)
 18020dc:	dc000017 	ldw	r16,0(sp)
 18020e0:	dec00504 	addi	sp,sp,20
 18020e4:	180214c1 	jmpi	180214c <_write_r>

018020e8 <__sseek>:
 18020e8:	defffe04 	addi	sp,sp,-8
 18020ec:	dc000015 	stw	r16,0(sp)
 18020f0:	2821883a 	mov	r16,r5
 18020f4:	2940038f 	ldh	r5,14(r5)
 18020f8:	dfc00115 	stw	ra,4(sp)
 18020fc:	1802b340 	call	1802b34 <_lseek_r>
 1802100:	00ffffc4 	movi	r3,-1
 1802104:	10c00826 	beq	r2,r3,1802128 <__sseek+0x40>
 1802108:	80c0030b 	ldhu	r3,12(r16)
 180210c:	80801415 	stw	r2,80(r16)
 1802110:	18c40014 	ori	r3,r3,4096
 1802114:	80c0030d 	sth	r3,12(r16)
 1802118:	dfc00117 	ldw	ra,4(sp)
 180211c:	dc000017 	ldw	r16,0(sp)
 1802120:	dec00204 	addi	sp,sp,8
 1802124:	f800283a 	ret
 1802128:	80c0030b 	ldhu	r3,12(r16)
 180212c:	18fbffcc 	andi	r3,r3,61439
 1802130:	80c0030d 	sth	r3,12(r16)
 1802134:	dfc00117 	ldw	ra,4(sp)
 1802138:	dc000017 	ldw	r16,0(sp)
 180213c:	dec00204 	addi	sp,sp,8
 1802140:	f800283a 	ret

01802144 <__sclose>:
 1802144:	2940038f 	ldh	r5,14(r5)
 1802148:	18023001 	jmpi	1802300 <_close_r>

0180214c <_write_r>:
 180214c:	defffd04 	addi	sp,sp,-12
 1802150:	2805883a 	mov	r2,r5
 1802154:	dc000015 	stw	r16,0(sp)
 1802158:	04006074 	movhi	r16,385
 180215c:	dc400115 	stw	r17,4(sp)
 1802160:	300b883a 	mov	r5,r6
 1802164:	84239104 	addi	r16,r16,-29116
 1802168:	2023883a 	mov	r17,r4
 180216c:	380d883a 	mov	r6,r7
 1802170:	1009883a 	mov	r4,r2
 1802174:	dfc00215 	stw	ra,8(sp)
 1802178:	80000015 	stw	zero,0(r16)
 180217c:	18039480 	call	1803948 <write>
 1802180:	00ffffc4 	movi	r3,-1
 1802184:	10c00526 	beq	r2,r3,180219c <_write_r+0x50>
 1802188:	dfc00217 	ldw	ra,8(sp)
 180218c:	dc400117 	ldw	r17,4(sp)
 1802190:	dc000017 	ldw	r16,0(sp)
 1802194:	dec00304 	addi	sp,sp,12
 1802198:	f800283a 	ret
 180219c:	80c00017 	ldw	r3,0(r16)
 18021a0:	183ff926 	beq	r3,zero,1802188 <__alt_data_end+0xff802188>
 18021a4:	88c00015 	stw	r3,0(r17)
 18021a8:	003ff706 	br	1802188 <__alt_data_end+0xff802188>

018021ac <__swsetup_r>:
 18021ac:	00806034 	movhi	r2,384
 18021b0:	defffd04 	addi	sp,sp,-12
 18021b4:	109ce604 	addi	r2,r2,29592
 18021b8:	dc400115 	stw	r17,4(sp)
 18021bc:	2023883a 	mov	r17,r4
 18021c0:	11000017 	ldw	r4,0(r2)
 18021c4:	dc000015 	stw	r16,0(sp)
 18021c8:	dfc00215 	stw	ra,8(sp)
 18021cc:	2821883a 	mov	r16,r5
 18021d0:	20000226 	beq	r4,zero,18021dc <__swsetup_r+0x30>
 18021d4:	20800e17 	ldw	r2,56(r4)
 18021d8:	10003126 	beq	r2,zero,18022a0 <__swsetup_r+0xf4>
 18021dc:	8080030b 	ldhu	r2,12(r16)
 18021e0:	10c0020c 	andi	r3,r2,8
 18021e4:	1009883a 	mov	r4,r2
 18021e8:	18000f26 	beq	r3,zero,1802228 <__swsetup_r+0x7c>
 18021ec:	80c00417 	ldw	r3,16(r16)
 18021f0:	18001526 	beq	r3,zero,1802248 <__swsetup_r+0x9c>
 18021f4:	1100004c 	andi	r4,r2,1
 18021f8:	20001c1e 	bne	r4,zero,180226c <__swsetup_r+0xc0>
 18021fc:	1080008c 	andi	r2,r2,2
 1802200:	1000291e 	bne	r2,zero,18022a8 <__swsetup_r+0xfc>
 1802204:	80800517 	ldw	r2,20(r16)
 1802208:	80800215 	stw	r2,8(r16)
 180220c:	18001c26 	beq	r3,zero,1802280 <__swsetup_r+0xd4>
 1802210:	0005883a 	mov	r2,zero
 1802214:	dfc00217 	ldw	ra,8(sp)
 1802218:	dc400117 	ldw	r17,4(sp)
 180221c:	dc000017 	ldw	r16,0(sp)
 1802220:	dec00304 	addi	sp,sp,12
 1802224:	f800283a 	ret
 1802228:	2080040c 	andi	r2,r4,16
 180222c:	10002e26 	beq	r2,zero,18022e8 <__swsetup_r+0x13c>
 1802230:	2080010c 	andi	r2,r4,4
 1802234:	10001e1e 	bne	r2,zero,18022b0 <__swsetup_r+0x104>
 1802238:	80c00417 	ldw	r3,16(r16)
 180223c:	20800214 	ori	r2,r4,8
 1802240:	8080030d 	sth	r2,12(r16)
 1802244:	183feb1e 	bne	r3,zero,18021f4 <__alt_data_end+0xff8021f4>
 1802248:	1100a00c 	andi	r4,r2,640
 180224c:	01408004 	movi	r5,512
 1802250:	217fe826 	beq	r4,r5,18021f4 <__alt_data_end+0xff8021f4>
 1802254:	800b883a 	mov	r5,r16
 1802258:	8809883a 	mov	r4,r17
 180225c:	1802b940 	call	1802b94 <__smakebuf_r>
 1802260:	8080030b 	ldhu	r2,12(r16)
 1802264:	80c00417 	ldw	r3,16(r16)
 1802268:	003fe206 	br	18021f4 <__alt_data_end+0xff8021f4>
 180226c:	80800517 	ldw	r2,20(r16)
 1802270:	80000215 	stw	zero,8(r16)
 1802274:	0085c83a 	sub	r2,zero,r2
 1802278:	80800615 	stw	r2,24(r16)
 180227c:	183fe41e 	bne	r3,zero,1802210 <__alt_data_end+0xff802210>
 1802280:	80c0030b 	ldhu	r3,12(r16)
 1802284:	0005883a 	mov	r2,zero
 1802288:	1900200c 	andi	r4,r3,128
 180228c:	203fe126 	beq	r4,zero,1802214 <__alt_data_end+0xff802214>
 1802290:	18c01014 	ori	r3,r3,64
 1802294:	80c0030d 	sth	r3,12(r16)
 1802298:	00bfffc4 	movi	r2,-1
 180229c:	003fdd06 	br	1802214 <__alt_data_end+0xff802214>
 18022a0:	18006fc0 	call	18006fc <__sinit>
 18022a4:	003fcd06 	br	18021dc <__alt_data_end+0xff8021dc>
 18022a8:	0005883a 	mov	r2,zero
 18022ac:	003fd606 	br	1802208 <__alt_data_end+0xff802208>
 18022b0:	81400c17 	ldw	r5,48(r16)
 18022b4:	28000626 	beq	r5,zero,18022d0 <__swsetup_r+0x124>
 18022b8:	80801004 	addi	r2,r16,64
 18022bc:	28800326 	beq	r5,r2,18022cc <__swsetup_r+0x120>
 18022c0:	8809883a 	mov	r4,r17
 18022c4:	18028240 	call	1802824 <_free_r>
 18022c8:	8100030b 	ldhu	r4,12(r16)
 18022cc:	80000c15 	stw	zero,48(r16)
 18022d0:	80c00417 	ldw	r3,16(r16)
 18022d4:	00bff6c4 	movi	r2,-37
 18022d8:	1108703a 	and	r4,r2,r4
 18022dc:	80000115 	stw	zero,4(r16)
 18022e0:	80c00015 	stw	r3,0(r16)
 18022e4:	003fd506 	br	180223c <__alt_data_end+0xff80223c>
 18022e8:	00800244 	movi	r2,9
 18022ec:	88800015 	stw	r2,0(r17)
 18022f0:	20801014 	ori	r2,r4,64
 18022f4:	8080030d 	sth	r2,12(r16)
 18022f8:	00bfffc4 	movi	r2,-1
 18022fc:	003fc506 	br	1802214 <__alt_data_end+0xff802214>

01802300 <_close_r>:
 1802300:	defffd04 	addi	sp,sp,-12
 1802304:	dc000015 	stw	r16,0(sp)
 1802308:	04006074 	movhi	r16,385
 180230c:	dc400115 	stw	r17,4(sp)
 1802310:	84239104 	addi	r16,r16,-29116
 1802314:	2023883a 	mov	r17,r4
 1802318:	2809883a 	mov	r4,r5
 180231c:	dfc00215 	stw	ra,8(sp)
 1802320:	80000015 	stw	zero,0(r16)
 1802324:	180308c0 	call	180308c <close>
 1802328:	00ffffc4 	movi	r3,-1
 180232c:	10c00526 	beq	r2,r3,1802344 <_close_r+0x44>
 1802330:	dfc00217 	ldw	ra,8(sp)
 1802334:	dc400117 	ldw	r17,4(sp)
 1802338:	dc000017 	ldw	r16,0(sp)
 180233c:	dec00304 	addi	sp,sp,12
 1802340:	f800283a 	ret
 1802344:	80c00017 	ldw	r3,0(r16)
 1802348:	183ff926 	beq	r3,zero,1802330 <__alt_data_end+0xff802330>
 180234c:	88c00015 	stw	r3,0(r17)
 1802350:	003ff706 	br	1802330 <__alt_data_end+0xff802330>

01802354 <_fclose_r>:
 1802354:	28003926 	beq	r5,zero,180243c <_fclose_r+0xe8>
 1802358:	defffc04 	addi	sp,sp,-16
 180235c:	dc400115 	stw	r17,4(sp)
 1802360:	dc000015 	stw	r16,0(sp)
 1802364:	dfc00315 	stw	ra,12(sp)
 1802368:	dc800215 	stw	r18,8(sp)
 180236c:	2023883a 	mov	r17,r4
 1802370:	2821883a 	mov	r16,r5
 1802374:	20000226 	beq	r4,zero,1802380 <_fclose_r+0x2c>
 1802378:	20800e17 	ldw	r2,56(r4)
 180237c:	10002726 	beq	r2,zero,180241c <_fclose_r+0xc8>
 1802380:	8080030f 	ldh	r2,12(r16)
 1802384:	1000071e 	bne	r2,zero,18023a4 <_fclose_r+0x50>
 1802388:	0005883a 	mov	r2,zero
 180238c:	dfc00317 	ldw	ra,12(sp)
 1802390:	dc800217 	ldw	r18,8(sp)
 1802394:	dc400117 	ldw	r17,4(sp)
 1802398:	dc000017 	ldw	r16,0(sp)
 180239c:	dec00404 	addi	sp,sp,16
 18023a0:	f800283a 	ret
 18023a4:	800b883a 	mov	r5,r16
 18023a8:	8809883a 	mov	r4,r17
 18023ac:	18024580 	call	1802458 <__sflush_r>
 18023b0:	1025883a 	mov	r18,r2
 18023b4:	80800b17 	ldw	r2,44(r16)
 18023b8:	10000426 	beq	r2,zero,18023cc <_fclose_r+0x78>
 18023bc:	81400717 	ldw	r5,28(r16)
 18023c0:	8809883a 	mov	r4,r17
 18023c4:	103ee83a 	callr	r2
 18023c8:	10001616 	blt	r2,zero,1802424 <_fclose_r+0xd0>
 18023cc:	8080030b 	ldhu	r2,12(r16)
 18023d0:	1080200c 	andi	r2,r2,128
 18023d4:	1000151e 	bne	r2,zero,180242c <_fclose_r+0xd8>
 18023d8:	81400c17 	ldw	r5,48(r16)
 18023dc:	28000526 	beq	r5,zero,18023f4 <_fclose_r+0xa0>
 18023e0:	80801004 	addi	r2,r16,64
 18023e4:	28800226 	beq	r5,r2,18023f0 <_fclose_r+0x9c>
 18023e8:	8809883a 	mov	r4,r17
 18023ec:	18028240 	call	1802824 <_free_r>
 18023f0:	80000c15 	stw	zero,48(r16)
 18023f4:	81401117 	ldw	r5,68(r16)
 18023f8:	28000326 	beq	r5,zero,1802408 <_fclose_r+0xb4>
 18023fc:	8809883a 	mov	r4,r17
 1802400:	18028240 	call	1802824 <_free_r>
 1802404:	80001115 	stw	zero,68(r16)
 1802408:	180070c0 	call	180070c <__sfp_lock_acquire>
 180240c:	8000030d 	sth	zero,12(r16)
 1802410:	18007100 	call	1800710 <__sfp_lock_release>
 1802414:	9005883a 	mov	r2,r18
 1802418:	003fdc06 	br	180238c <__alt_data_end+0xff80238c>
 180241c:	18006fc0 	call	18006fc <__sinit>
 1802420:	003fd706 	br	1802380 <__alt_data_end+0xff802380>
 1802424:	04bfffc4 	movi	r18,-1
 1802428:	003fe806 	br	18023cc <__alt_data_end+0xff8023cc>
 180242c:	81400417 	ldw	r5,16(r16)
 1802430:	8809883a 	mov	r4,r17
 1802434:	18028240 	call	1802824 <_free_r>
 1802438:	003fe706 	br	18023d8 <__alt_data_end+0xff8023d8>
 180243c:	0005883a 	mov	r2,zero
 1802440:	f800283a 	ret

01802444 <fclose>:
 1802444:	00806034 	movhi	r2,384
 1802448:	109ce604 	addi	r2,r2,29592
 180244c:	200b883a 	mov	r5,r4
 1802450:	11000017 	ldw	r4,0(r2)
 1802454:	18023541 	jmpi	1802354 <_fclose_r>

01802458 <__sflush_r>:
 1802458:	2880030b 	ldhu	r2,12(r5)
 180245c:	defffb04 	addi	sp,sp,-20
 1802460:	dcc00315 	stw	r19,12(sp)
 1802464:	dc400115 	stw	r17,4(sp)
 1802468:	dfc00415 	stw	ra,16(sp)
 180246c:	dc800215 	stw	r18,8(sp)
 1802470:	dc000015 	stw	r16,0(sp)
 1802474:	10c0020c 	andi	r3,r2,8
 1802478:	2823883a 	mov	r17,r5
 180247c:	2027883a 	mov	r19,r4
 1802480:	1800311e 	bne	r3,zero,1802548 <__sflush_r+0xf0>
 1802484:	28c00117 	ldw	r3,4(r5)
 1802488:	10820014 	ori	r2,r2,2048
 180248c:	2880030d 	sth	r2,12(r5)
 1802490:	00c04b0e 	bge	zero,r3,18025c0 <__sflush_r+0x168>
 1802494:	8a000a17 	ldw	r8,40(r17)
 1802498:	40002326 	beq	r8,zero,1802528 <__sflush_r+0xd0>
 180249c:	9c000017 	ldw	r16,0(r19)
 18024a0:	10c4000c 	andi	r3,r2,4096
 18024a4:	98000015 	stw	zero,0(r19)
 18024a8:	18004826 	beq	r3,zero,18025cc <__sflush_r+0x174>
 18024ac:	89801417 	ldw	r6,80(r17)
 18024b0:	10c0010c 	andi	r3,r2,4
 18024b4:	18000626 	beq	r3,zero,18024d0 <__sflush_r+0x78>
 18024b8:	88c00117 	ldw	r3,4(r17)
 18024bc:	88800c17 	ldw	r2,48(r17)
 18024c0:	30cdc83a 	sub	r6,r6,r3
 18024c4:	10000226 	beq	r2,zero,18024d0 <__sflush_r+0x78>
 18024c8:	88800f17 	ldw	r2,60(r17)
 18024cc:	308dc83a 	sub	r6,r6,r2
 18024d0:	89400717 	ldw	r5,28(r17)
 18024d4:	000f883a 	mov	r7,zero
 18024d8:	9809883a 	mov	r4,r19
 18024dc:	403ee83a 	callr	r8
 18024e0:	00ffffc4 	movi	r3,-1
 18024e4:	10c04426 	beq	r2,r3,18025f8 <__sflush_r+0x1a0>
 18024e8:	88c0030b 	ldhu	r3,12(r17)
 18024ec:	89000417 	ldw	r4,16(r17)
 18024f0:	88000115 	stw	zero,4(r17)
 18024f4:	197dffcc 	andi	r5,r3,63487
 18024f8:	8940030d 	sth	r5,12(r17)
 18024fc:	89000015 	stw	r4,0(r17)
 1802500:	18c4000c 	andi	r3,r3,4096
 1802504:	18002c1e 	bne	r3,zero,18025b8 <__sflush_r+0x160>
 1802508:	89400c17 	ldw	r5,48(r17)
 180250c:	9c000015 	stw	r16,0(r19)
 1802510:	28000526 	beq	r5,zero,1802528 <__sflush_r+0xd0>
 1802514:	88801004 	addi	r2,r17,64
 1802518:	28800226 	beq	r5,r2,1802524 <__sflush_r+0xcc>
 180251c:	9809883a 	mov	r4,r19
 1802520:	18028240 	call	1802824 <_free_r>
 1802524:	88000c15 	stw	zero,48(r17)
 1802528:	0005883a 	mov	r2,zero
 180252c:	dfc00417 	ldw	ra,16(sp)
 1802530:	dcc00317 	ldw	r19,12(sp)
 1802534:	dc800217 	ldw	r18,8(sp)
 1802538:	dc400117 	ldw	r17,4(sp)
 180253c:	dc000017 	ldw	r16,0(sp)
 1802540:	dec00504 	addi	sp,sp,20
 1802544:	f800283a 	ret
 1802548:	2c800417 	ldw	r18,16(r5)
 180254c:	903ff626 	beq	r18,zero,1802528 <__alt_data_end+0xff802528>
 1802550:	2c000017 	ldw	r16,0(r5)
 1802554:	108000cc 	andi	r2,r2,3
 1802558:	2c800015 	stw	r18,0(r5)
 180255c:	84a1c83a 	sub	r16,r16,r18
 1802560:	1000131e 	bne	r2,zero,18025b0 <__sflush_r+0x158>
 1802564:	28800517 	ldw	r2,20(r5)
 1802568:	88800215 	stw	r2,8(r17)
 180256c:	04000316 	blt	zero,r16,180257c <__sflush_r+0x124>
 1802570:	003fed06 	br	1802528 <__alt_data_end+0xff802528>
 1802574:	90a5883a 	add	r18,r18,r2
 1802578:	043feb0e 	bge	zero,r16,1802528 <__alt_data_end+0xff802528>
 180257c:	88800917 	ldw	r2,36(r17)
 1802580:	89400717 	ldw	r5,28(r17)
 1802584:	800f883a 	mov	r7,r16
 1802588:	900d883a 	mov	r6,r18
 180258c:	9809883a 	mov	r4,r19
 1802590:	103ee83a 	callr	r2
 1802594:	80a1c83a 	sub	r16,r16,r2
 1802598:	00bff616 	blt	zero,r2,1802574 <__alt_data_end+0xff802574>
 180259c:	88c0030b 	ldhu	r3,12(r17)
 18025a0:	00bfffc4 	movi	r2,-1
 18025a4:	18c01014 	ori	r3,r3,64
 18025a8:	88c0030d 	sth	r3,12(r17)
 18025ac:	003fdf06 	br	180252c <__alt_data_end+0xff80252c>
 18025b0:	0005883a 	mov	r2,zero
 18025b4:	003fec06 	br	1802568 <__alt_data_end+0xff802568>
 18025b8:	88801415 	stw	r2,80(r17)
 18025bc:	003fd206 	br	1802508 <__alt_data_end+0xff802508>
 18025c0:	28c00f17 	ldw	r3,60(r5)
 18025c4:	00ffb316 	blt	zero,r3,1802494 <__alt_data_end+0xff802494>
 18025c8:	003fd706 	br	1802528 <__alt_data_end+0xff802528>
 18025cc:	89400717 	ldw	r5,28(r17)
 18025d0:	000d883a 	mov	r6,zero
 18025d4:	01c00044 	movi	r7,1
 18025d8:	9809883a 	mov	r4,r19
 18025dc:	403ee83a 	callr	r8
 18025e0:	100d883a 	mov	r6,r2
 18025e4:	00bfffc4 	movi	r2,-1
 18025e8:	30801426 	beq	r6,r2,180263c <__sflush_r+0x1e4>
 18025ec:	8880030b 	ldhu	r2,12(r17)
 18025f0:	8a000a17 	ldw	r8,40(r17)
 18025f4:	003fae06 	br	18024b0 <__alt_data_end+0xff8024b0>
 18025f8:	98c00017 	ldw	r3,0(r19)
 18025fc:	183fba26 	beq	r3,zero,18024e8 <__alt_data_end+0xff8024e8>
 1802600:	01000744 	movi	r4,29
 1802604:	19000626 	beq	r3,r4,1802620 <__sflush_r+0x1c8>
 1802608:	01000584 	movi	r4,22
 180260c:	19000426 	beq	r3,r4,1802620 <__sflush_r+0x1c8>
 1802610:	88c0030b 	ldhu	r3,12(r17)
 1802614:	18c01014 	ori	r3,r3,64
 1802618:	88c0030d 	sth	r3,12(r17)
 180261c:	003fc306 	br	180252c <__alt_data_end+0xff80252c>
 1802620:	8880030b 	ldhu	r2,12(r17)
 1802624:	88c00417 	ldw	r3,16(r17)
 1802628:	88000115 	stw	zero,4(r17)
 180262c:	10bdffcc 	andi	r2,r2,63487
 1802630:	8880030d 	sth	r2,12(r17)
 1802634:	88c00015 	stw	r3,0(r17)
 1802638:	003fb306 	br	1802508 <__alt_data_end+0xff802508>
 180263c:	98800017 	ldw	r2,0(r19)
 1802640:	103fea26 	beq	r2,zero,18025ec <__alt_data_end+0xff8025ec>
 1802644:	00c00744 	movi	r3,29
 1802648:	10c00226 	beq	r2,r3,1802654 <__sflush_r+0x1fc>
 180264c:	00c00584 	movi	r3,22
 1802650:	10c0031e 	bne	r2,r3,1802660 <__sflush_r+0x208>
 1802654:	9c000015 	stw	r16,0(r19)
 1802658:	0005883a 	mov	r2,zero
 180265c:	003fb306 	br	180252c <__alt_data_end+0xff80252c>
 1802660:	88c0030b 	ldhu	r3,12(r17)
 1802664:	3005883a 	mov	r2,r6
 1802668:	18c01014 	ori	r3,r3,64
 180266c:	88c0030d 	sth	r3,12(r17)
 1802670:	003fae06 	br	180252c <__alt_data_end+0xff80252c>

01802674 <_fflush_r>:
 1802674:	defffd04 	addi	sp,sp,-12
 1802678:	dc000115 	stw	r16,4(sp)
 180267c:	dfc00215 	stw	ra,8(sp)
 1802680:	2021883a 	mov	r16,r4
 1802684:	20000226 	beq	r4,zero,1802690 <_fflush_r+0x1c>
 1802688:	20800e17 	ldw	r2,56(r4)
 180268c:	10000c26 	beq	r2,zero,18026c0 <_fflush_r+0x4c>
 1802690:	2880030f 	ldh	r2,12(r5)
 1802694:	1000051e 	bne	r2,zero,18026ac <_fflush_r+0x38>
 1802698:	0005883a 	mov	r2,zero
 180269c:	dfc00217 	ldw	ra,8(sp)
 18026a0:	dc000117 	ldw	r16,4(sp)
 18026a4:	dec00304 	addi	sp,sp,12
 18026a8:	f800283a 	ret
 18026ac:	8009883a 	mov	r4,r16
 18026b0:	dfc00217 	ldw	ra,8(sp)
 18026b4:	dc000117 	ldw	r16,4(sp)
 18026b8:	dec00304 	addi	sp,sp,12
 18026bc:	18024581 	jmpi	1802458 <__sflush_r>
 18026c0:	d9400015 	stw	r5,0(sp)
 18026c4:	18006fc0 	call	18006fc <__sinit>
 18026c8:	d9400017 	ldw	r5,0(sp)
 18026cc:	003ff006 	br	1802690 <__alt_data_end+0xff802690>

018026d0 <fflush>:
 18026d0:	20000526 	beq	r4,zero,18026e8 <fflush+0x18>
 18026d4:	00806034 	movhi	r2,384
 18026d8:	109ce604 	addi	r2,r2,29592
 18026dc:	200b883a 	mov	r5,r4
 18026e0:	11000017 	ldw	r4,0(r2)
 18026e4:	18026741 	jmpi	1802674 <_fflush_r>
 18026e8:	00806034 	movhi	r2,384
 18026ec:	109ce504 	addi	r2,r2,29588
 18026f0:	11000017 	ldw	r4,0(r2)
 18026f4:	01406034 	movhi	r5,384
 18026f8:	29499d04 	addi	r5,r5,9844
 18026fc:	1800cd81 	jmpi	1800cd8 <_fwalk_reent>

01802700 <_malloc_trim_r>:
 1802700:	defffb04 	addi	sp,sp,-20
 1802704:	dcc00315 	stw	r19,12(sp)
 1802708:	04c06034 	movhi	r19,384
 180270c:	dc800215 	stw	r18,8(sp)
 1802710:	dc400115 	stw	r17,4(sp)
 1802714:	dc000015 	stw	r16,0(sp)
 1802718:	dfc00415 	stw	ra,16(sp)
 180271c:	2821883a 	mov	r16,r5
 1802720:	9cd76104 	addi	r19,r19,23940
 1802724:	2025883a 	mov	r18,r4
 1802728:	18036280 	call	1803628 <__malloc_lock>
 180272c:	98800217 	ldw	r2,8(r19)
 1802730:	14400117 	ldw	r17,4(r2)
 1802734:	00bfff04 	movi	r2,-4
 1802738:	88a2703a 	and	r17,r17,r2
 180273c:	8c21c83a 	sub	r16,r17,r16
 1802740:	8403fbc4 	addi	r16,r16,4079
 1802744:	8020d33a 	srli	r16,r16,12
 1802748:	0083ffc4 	movi	r2,4095
 180274c:	843fffc4 	addi	r16,r16,-1
 1802750:	8020933a 	slli	r16,r16,12
 1802754:	1400060e 	bge	r2,r16,1802770 <_malloc_trim_r+0x70>
 1802758:	000b883a 	mov	r5,zero
 180275c:	9009883a 	mov	r4,r18
 1802760:	1801fbc0 	call	1801fbc <_sbrk_r>
 1802764:	98c00217 	ldw	r3,8(r19)
 1802768:	1c47883a 	add	r3,r3,r17
 180276c:	10c00a26 	beq	r2,r3,1802798 <_malloc_trim_r+0x98>
 1802770:	9009883a 	mov	r4,r18
 1802774:	180364c0 	call	180364c <__malloc_unlock>
 1802778:	0005883a 	mov	r2,zero
 180277c:	dfc00417 	ldw	ra,16(sp)
 1802780:	dcc00317 	ldw	r19,12(sp)
 1802784:	dc800217 	ldw	r18,8(sp)
 1802788:	dc400117 	ldw	r17,4(sp)
 180278c:	dc000017 	ldw	r16,0(sp)
 1802790:	dec00504 	addi	sp,sp,20
 1802794:	f800283a 	ret
 1802798:	040bc83a 	sub	r5,zero,r16
 180279c:	9009883a 	mov	r4,r18
 18027a0:	1801fbc0 	call	1801fbc <_sbrk_r>
 18027a4:	00ffffc4 	movi	r3,-1
 18027a8:	10c00d26 	beq	r2,r3,18027e0 <_malloc_trim_r+0xe0>
 18027ac:	00c06074 	movhi	r3,385
 18027b0:	18e39804 	addi	r3,r3,-29088
 18027b4:	18800017 	ldw	r2,0(r3)
 18027b8:	99000217 	ldw	r4,8(r19)
 18027bc:	8c23c83a 	sub	r17,r17,r16
 18027c0:	8c400054 	ori	r17,r17,1
 18027c4:	1421c83a 	sub	r16,r2,r16
 18027c8:	24400115 	stw	r17,4(r4)
 18027cc:	9009883a 	mov	r4,r18
 18027d0:	1c000015 	stw	r16,0(r3)
 18027d4:	180364c0 	call	180364c <__malloc_unlock>
 18027d8:	00800044 	movi	r2,1
 18027dc:	003fe706 	br	180277c <__alt_data_end+0xff80277c>
 18027e0:	000b883a 	mov	r5,zero
 18027e4:	9009883a 	mov	r4,r18
 18027e8:	1801fbc0 	call	1801fbc <_sbrk_r>
 18027ec:	99000217 	ldw	r4,8(r19)
 18027f0:	014003c4 	movi	r5,15
 18027f4:	1107c83a 	sub	r3,r2,r4
 18027f8:	28ffdd0e 	bge	r5,r3,1802770 <__alt_data_end+0xff802770>
 18027fc:	01406034 	movhi	r5,384
 1802800:	295ce704 	addi	r5,r5,29596
 1802804:	29400017 	ldw	r5,0(r5)
 1802808:	18c00054 	ori	r3,r3,1
 180280c:	20c00115 	stw	r3,4(r4)
 1802810:	00c06074 	movhi	r3,385
 1802814:	1145c83a 	sub	r2,r2,r5
 1802818:	18e39804 	addi	r3,r3,-29088
 180281c:	18800015 	stw	r2,0(r3)
 1802820:	003fd306 	br	1802770 <__alt_data_end+0xff802770>

01802824 <_free_r>:
 1802824:	28004126 	beq	r5,zero,180292c <_free_r+0x108>
 1802828:	defffd04 	addi	sp,sp,-12
 180282c:	dc400115 	stw	r17,4(sp)
 1802830:	dc000015 	stw	r16,0(sp)
 1802834:	2023883a 	mov	r17,r4
 1802838:	2821883a 	mov	r16,r5
 180283c:	dfc00215 	stw	ra,8(sp)
 1802840:	18036280 	call	1803628 <__malloc_lock>
 1802844:	81ffff17 	ldw	r7,-4(r16)
 1802848:	00bfff84 	movi	r2,-2
 180284c:	01006034 	movhi	r4,384
 1802850:	81bffe04 	addi	r6,r16,-8
 1802854:	3884703a 	and	r2,r7,r2
 1802858:	21176104 	addi	r4,r4,23940
 180285c:	308b883a 	add	r5,r6,r2
 1802860:	2a400117 	ldw	r9,4(r5)
 1802864:	22000217 	ldw	r8,8(r4)
 1802868:	00ffff04 	movi	r3,-4
 180286c:	48c6703a 	and	r3,r9,r3
 1802870:	2a005726 	beq	r5,r8,18029d0 <_free_r+0x1ac>
 1802874:	28c00115 	stw	r3,4(r5)
 1802878:	39c0004c 	andi	r7,r7,1
 180287c:	3800091e 	bne	r7,zero,18028a4 <_free_r+0x80>
 1802880:	823ffe17 	ldw	r8,-8(r16)
 1802884:	22400204 	addi	r9,r4,8
 1802888:	320dc83a 	sub	r6,r6,r8
 180288c:	31c00217 	ldw	r7,8(r6)
 1802890:	1205883a 	add	r2,r2,r8
 1802894:	3a406526 	beq	r7,r9,1802a2c <_free_r+0x208>
 1802898:	32000317 	ldw	r8,12(r6)
 180289c:	3a000315 	stw	r8,12(r7)
 18028a0:	41c00215 	stw	r7,8(r8)
 18028a4:	28cf883a 	add	r7,r5,r3
 18028a8:	39c00117 	ldw	r7,4(r7)
 18028ac:	39c0004c 	andi	r7,r7,1
 18028b0:	38003a26 	beq	r7,zero,180299c <_free_r+0x178>
 18028b4:	10c00054 	ori	r3,r2,1
 18028b8:	30c00115 	stw	r3,4(r6)
 18028bc:	3087883a 	add	r3,r6,r2
 18028c0:	18800015 	stw	r2,0(r3)
 18028c4:	00c07fc4 	movi	r3,511
 18028c8:	18801936 	bltu	r3,r2,1802930 <_free_r+0x10c>
 18028cc:	1004d0fa 	srli	r2,r2,3
 18028d0:	01c00044 	movi	r7,1
 18028d4:	21400117 	ldw	r5,4(r4)
 18028d8:	10c00044 	addi	r3,r2,1
 18028dc:	18c7883a 	add	r3,r3,r3
 18028e0:	1005d0ba 	srai	r2,r2,2
 18028e4:	18c7883a 	add	r3,r3,r3
 18028e8:	18c7883a 	add	r3,r3,r3
 18028ec:	1907883a 	add	r3,r3,r4
 18028f0:	3884983a 	sll	r2,r7,r2
 18028f4:	19c00017 	ldw	r7,0(r3)
 18028f8:	1a3ffe04 	addi	r8,r3,-8
 18028fc:	1144b03a 	or	r2,r2,r5
 1802900:	32000315 	stw	r8,12(r6)
 1802904:	31c00215 	stw	r7,8(r6)
 1802908:	20800115 	stw	r2,4(r4)
 180290c:	19800015 	stw	r6,0(r3)
 1802910:	39800315 	stw	r6,12(r7)
 1802914:	8809883a 	mov	r4,r17
 1802918:	dfc00217 	ldw	ra,8(sp)
 180291c:	dc400117 	ldw	r17,4(sp)
 1802920:	dc000017 	ldw	r16,0(sp)
 1802924:	dec00304 	addi	sp,sp,12
 1802928:	180364c1 	jmpi	180364c <__malloc_unlock>
 180292c:	f800283a 	ret
 1802930:	100ad27a 	srli	r5,r2,9
 1802934:	00c00104 	movi	r3,4
 1802938:	19404a36 	bltu	r3,r5,1802a64 <_free_r+0x240>
 180293c:	100ad1ba 	srli	r5,r2,6
 1802940:	28c00e44 	addi	r3,r5,57
 1802944:	18c7883a 	add	r3,r3,r3
 1802948:	29400e04 	addi	r5,r5,56
 180294c:	18c7883a 	add	r3,r3,r3
 1802950:	18c7883a 	add	r3,r3,r3
 1802954:	1909883a 	add	r4,r3,r4
 1802958:	20c00017 	ldw	r3,0(r4)
 180295c:	01c06034 	movhi	r7,384
 1802960:	213ffe04 	addi	r4,r4,-8
 1802964:	39d76104 	addi	r7,r7,23940
 1802968:	20c04426 	beq	r4,r3,1802a7c <_free_r+0x258>
 180296c:	01ffff04 	movi	r7,-4
 1802970:	19400117 	ldw	r5,4(r3)
 1802974:	29ca703a 	and	r5,r5,r7
 1802978:	1140022e 	bgeu	r2,r5,1802984 <_free_r+0x160>
 180297c:	18c00217 	ldw	r3,8(r3)
 1802980:	20fffb1e 	bne	r4,r3,1802970 <__alt_data_end+0xff802970>
 1802984:	19000317 	ldw	r4,12(r3)
 1802988:	31000315 	stw	r4,12(r6)
 180298c:	30c00215 	stw	r3,8(r6)
 1802990:	21800215 	stw	r6,8(r4)
 1802994:	19800315 	stw	r6,12(r3)
 1802998:	003fde06 	br	1802914 <__alt_data_end+0xff802914>
 180299c:	29c00217 	ldw	r7,8(r5)
 18029a0:	10c5883a 	add	r2,r2,r3
 18029a4:	00c06034 	movhi	r3,384
 18029a8:	18d76304 	addi	r3,r3,23948
 18029ac:	38c03b26 	beq	r7,r3,1802a9c <_free_r+0x278>
 18029b0:	2a000317 	ldw	r8,12(r5)
 18029b4:	11400054 	ori	r5,r2,1
 18029b8:	3087883a 	add	r3,r6,r2
 18029bc:	3a000315 	stw	r8,12(r7)
 18029c0:	41c00215 	stw	r7,8(r8)
 18029c4:	31400115 	stw	r5,4(r6)
 18029c8:	18800015 	stw	r2,0(r3)
 18029cc:	003fbd06 	br	18028c4 <__alt_data_end+0xff8028c4>
 18029d0:	39c0004c 	andi	r7,r7,1
 18029d4:	10c5883a 	add	r2,r2,r3
 18029d8:	3800071e 	bne	r7,zero,18029f8 <_free_r+0x1d4>
 18029dc:	81fffe17 	ldw	r7,-8(r16)
 18029e0:	31cdc83a 	sub	r6,r6,r7
 18029e4:	30c00317 	ldw	r3,12(r6)
 18029e8:	31400217 	ldw	r5,8(r6)
 18029ec:	11c5883a 	add	r2,r2,r7
 18029f0:	28c00315 	stw	r3,12(r5)
 18029f4:	19400215 	stw	r5,8(r3)
 18029f8:	10c00054 	ori	r3,r2,1
 18029fc:	30c00115 	stw	r3,4(r6)
 1802a00:	00c06034 	movhi	r3,384
 1802a04:	18dce804 	addi	r3,r3,29600
 1802a08:	18c00017 	ldw	r3,0(r3)
 1802a0c:	21800215 	stw	r6,8(r4)
 1802a10:	10ffc036 	bltu	r2,r3,1802914 <__alt_data_end+0xff802914>
 1802a14:	00806074 	movhi	r2,385
 1802a18:	10a39004 	addi	r2,r2,-29120
 1802a1c:	11400017 	ldw	r5,0(r2)
 1802a20:	8809883a 	mov	r4,r17
 1802a24:	18027000 	call	1802700 <_malloc_trim_r>
 1802a28:	003fba06 	br	1802914 <__alt_data_end+0xff802914>
 1802a2c:	28c9883a 	add	r4,r5,r3
 1802a30:	21000117 	ldw	r4,4(r4)
 1802a34:	2100004c 	andi	r4,r4,1
 1802a38:	2000391e 	bne	r4,zero,1802b20 <_free_r+0x2fc>
 1802a3c:	29c00217 	ldw	r7,8(r5)
 1802a40:	29000317 	ldw	r4,12(r5)
 1802a44:	1885883a 	add	r2,r3,r2
 1802a48:	10c00054 	ori	r3,r2,1
 1802a4c:	39000315 	stw	r4,12(r7)
 1802a50:	21c00215 	stw	r7,8(r4)
 1802a54:	30c00115 	stw	r3,4(r6)
 1802a58:	308d883a 	add	r6,r6,r2
 1802a5c:	30800015 	stw	r2,0(r6)
 1802a60:	003fac06 	br	1802914 <__alt_data_end+0xff802914>
 1802a64:	00c00504 	movi	r3,20
 1802a68:	19401536 	bltu	r3,r5,1802ac0 <_free_r+0x29c>
 1802a6c:	28c01704 	addi	r3,r5,92
 1802a70:	18c7883a 	add	r3,r3,r3
 1802a74:	294016c4 	addi	r5,r5,91
 1802a78:	003fb406 	br	180294c <__alt_data_end+0xff80294c>
 1802a7c:	280bd0ba 	srai	r5,r5,2
 1802a80:	00c00044 	movi	r3,1
 1802a84:	38800117 	ldw	r2,4(r7)
 1802a88:	194a983a 	sll	r5,r3,r5
 1802a8c:	2007883a 	mov	r3,r4
 1802a90:	2884b03a 	or	r2,r5,r2
 1802a94:	38800115 	stw	r2,4(r7)
 1802a98:	003fbb06 	br	1802988 <__alt_data_end+0xff802988>
 1802a9c:	21800515 	stw	r6,20(r4)
 1802aa0:	21800415 	stw	r6,16(r4)
 1802aa4:	10c00054 	ori	r3,r2,1
 1802aa8:	31c00315 	stw	r7,12(r6)
 1802aac:	31c00215 	stw	r7,8(r6)
 1802ab0:	30c00115 	stw	r3,4(r6)
 1802ab4:	308d883a 	add	r6,r6,r2
 1802ab8:	30800015 	stw	r2,0(r6)
 1802abc:	003f9506 	br	1802914 <__alt_data_end+0xff802914>
 1802ac0:	00c01504 	movi	r3,84
 1802ac4:	19400536 	bltu	r3,r5,1802adc <_free_r+0x2b8>
 1802ac8:	100ad33a 	srli	r5,r2,12
 1802acc:	28c01bc4 	addi	r3,r5,111
 1802ad0:	18c7883a 	add	r3,r3,r3
 1802ad4:	29401b84 	addi	r5,r5,110
 1802ad8:	003f9c06 	br	180294c <__alt_data_end+0xff80294c>
 1802adc:	00c05504 	movi	r3,340
 1802ae0:	19400536 	bltu	r3,r5,1802af8 <_free_r+0x2d4>
 1802ae4:	100ad3fa 	srli	r5,r2,15
 1802ae8:	28c01e04 	addi	r3,r5,120
 1802aec:	18c7883a 	add	r3,r3,r3
 1802af0:	29401dc4 	addi	r5,r5,119
 1802af4:	003f9506 	br	180294c <__alt_data_end+0xff80294c>
 1802af8:	00c15504 	movi	r3,1364
 1802afc:	19400536 	bltu	r3,r5,1802b14 <_free_r+0x2f0>
 1802b00:	100ad4ba 	srli	r5,r2,18
 1802b04:	28c01f44 	addi	r3,r5,125
 1802b08:	18c7883a 	add	r3,r3,r3
 1802b0c:	29401f04 	addi	r5,r5,124
 1802b10:	003f8e06 	br	180294c <__alt_data_end+0xff80294c>
 1802b14:	00c03f84 	movi	r3,254
 1802b18:	01401f84 	movi	r5,126
 1802b1c:	003f8b06 	br	180294c <__alt_data_end+0xff80294c>
 1802b20:	10c00054 	ori	r3,r2,1
 1802b24:	30c00115 	stw	r3,4(r6)
 1802b28:	308d883a 	add	r6,r6,r2
 1802b2c:	30800015 	stw	r2,0(r6)
 1802b30:	003f7806 	br	1802914 <__alt_data_end+0xff802914>

01802b34 <_lseek_r>:
 1802b34:	defffd04 	addi	sp,sp,-12
 1802b38:	2805883a 	mov	r2,r5
 1802b3c:	dc000015 	stw	r16,0(sp)
 1802b40:	04006074 	movhi	r16,385
 1802b44:	dc400115 	stw	r17,4(sp)
 1802b48:	300b883a 	mov	r5,r6
 1802b4c:	84239104 	addi	r16,r16,-29116
 1802b50:	2023883a 	mov	r17,r4
 1802b54:	380d883a 	mov	r6,r7
 1802b58:	1009883a 	mov	r4,r2
 1802b5c:	dfc00215 	stw	ra,8(sp)
 1802b60:	80000015 	stw	zero,0(r16)
 1802b64:	18034d00 	call	18034d0 <lseek>
 1802b68:	00ffffc4 	movi	r3,-1
 1802b6c:	10c00526 	beq	r2,r3,1802b84 <_lseek_r+0x50>
 1802b70:	dfc00217 	ldw	ra,8(sp)
 1802b74:	dc400117 	ldw	r17,4(sp)
 1802b78:	dc000017 	ldw	r16,0(sp)
 1802b7c:	dec00304 	addi	sp,sp,12
 1802b80:	f800283a 	ret
 1802b84:	80c00017 	ldw	r3,0(r16)
 1802b88:	183ff926 	beq	r3,zero,1802b70 <__alt_data_end+0xff802b70>
 1802b8c:	88c00015 	stw	r3,0(r17)
 1802b90:	003ff706 	br	1802b70 <__alt_data_end+0xff802b70>

01802b94 <__smakebuf_r>:
 1802b94:	2880030b 	ldhu	r2,12(r5)
 1802b98:	10c0008c 	andi	r3,r2,2
 1802b9c:	1800411e 	bne	r3,zero,1802ca4 <__smakebuf_r+0x110>
 1802ba0:	deffec04 	addi	sp,sp,-80
 1802ba4:	dc000f15 	stw	r16,60(sp)
 1802ba8:	2821883a 	mov	r16,r5
 1802bac:	2940038f 	ldh	r5,14(r5)
 1802bb0:	dc401015 	stw	r17,64(sp)
 1802bb4:	dfc01315 	stw	ra,76(sp)
 1802bb8:	dcc01215 	stw	r19,72(sp)
 1802bbc:	dc801115 	stw	r18,68(sp)
 1802bc0:	2023883a 	mov	r17,r4
 1802bc4:	28001c16 	blt	r5,zero,1802c38 <__smakebuf_r+0xa4>
 1802bc8:	d80d883a 	mov	r6,sp
 1802bcc:	1802db00 	call	1802db0 <_fstat_r>
 1802bd0:	10001816 	blt	r2,zero,1802c34 <__smakebuf_r+0xa0>
 1802bd4:	d8800117 	ldw	r2,4(sp)
 1802bd8:	00e00014 	movui	r3,32768
 1802bdc:	10bc000c 	andi	r2,r2,61440
 1802be0:	14c80020 	cmpeqi	r19,r2,8192
 1802be4:	10c03726 	beq	r2,r3,1802cc4 <__smakebuf_r+0x130>
 1802be8:	80c0030b 	ldhu	r3,12(r16)
 1802bec:	18c20014 	ori	r3,r3,2048
 1802bf0:	80c0030d 	sth	r3,12(r16)
 1802bf4:	00c80004 	movi	r3,8192
 1802bf8:	10c0521e 	bne	r2,r3,1802d44 <__smakebuf_r+0x1b0>
 1802bfc:	8140038f 	ldh	r5,14(r16)
 1802c00:	8809883a 	mov	r4,r17
 1802c04:	1802e0c0 	call	1802e0c <_isatty_r>
 1802c08:	10004c26 	beq	r2,zero,1802d3c <__smakebuf_r+0x1a8>
 1802c0c:	8080030b 	ldhu	r2,12(r16)
 1802c10:	80c010c4 	addi	r3,r16,67
 1802c14:	80c00015 	stw	r3,0(r16)
 1802c18:	10800054 	ori	r2,r2,1
 1802c1c:	8080030d 	sth	r2,12(r16)
 1802c20:	00800044 	movi	r2,1
 1802c24:	80c00415 	stw	r3,16(r16)
 1802c28:	80800515 	stw	r2,20(r16)
 1802c2c:	04810004 	movi	r18,1024
 1802c30:	00000706 	br	1802c50 <__smakebuf_r+0xbc>
 1802c34:	8080030b 	ldhu	r2,12(r16)
 1802c38:	10c0200c 	andi	r3,r2,128
 1802c3c:	18001f1e 	bne	r3,zero,1802cbc <__smakebuf_r+0x128>
 1802c40:	04810004 	movi	r18,1024
 1802c44:	10820014 	ori	r2,r2,2048
 1802c48:	8080030d 	sth	r2,12(r16)
 1802c4c:	0027883a 	mov	r19,zero
 1802c50:	900b883a 	mov	r5,r18
 1802c54:	8809883a 	mov	r4,r17
 1802c58:	1800d9c0 	call	1800d9c <_malloc_r>
 1802c5c:	10002c26 	beq	r2,zero,1802d10 <__smakebuf_r+0x17c>
 1802c60:	80c0030b 	ldhu	r3,12(r16)
 1802c64:	01006034 	movhi	r4,384
 1802c68:	2100e904 	addi	r4,r4,932
 1802c6c:	89000f15 	stw	r4,60(r17)
 1802c70:	18c02014 	ori	r3,r3,128
 1802c74:	80c0030d 	sth	r3,12(r16)
 1802c78:	80800015 	stw	r2,0(r16)
 1802c7c:	80800415 	stw	r2,16(r16)
 1802c80:	84800515 	stw	r18,20(r16)
 1802c84:	98001a1e 	bne	r19,zero,1802cf0 <__smakebuf_r+0x15c>
 1802c88:	dfc01317 	ldw	ra,76(sp)
 1802c8c:	dcc01217 	ldw	r19,72(sp)
 1802c90:	dc801117 	ldw	r18,68(sp)
 1802c94:	dc401017 	ldw	r17,64(sp)
 1802c98:	dc000f17 	ldw	r16,60(sp)
 1802c9c:	dec01404 	addi	sp,sp,80
 1802ca0:	f800283a 	ret
 1802ca4:	288010c4 	addi	r2,r5,67
 1802ca8:	28800015 	stw	r2,0(r5)
 1802cac:	28800415 	stw	r2,16(r5)
 1802cb0:	00800044 	movi	r2,1
 1802cb4:	28800515 	stw	r2,20(r5)
 1802cb8:	f800283a 	ret
 1802cbc:	04801004 	movi	r18,64
 1802cc0:	003fe006 	br	1802c44 <__alt_data_end+0xff802c44>
 1802cc4:	81000a17 	ldw	r4,40(r16)
 1802cc8:	00c06034 	movhi	r3,384
 1802ccc:	18c83a04 	addi	r3,r3,8424
 1802cd0:	20ffc51e 	bne	r4,r3,1802be8 <__alt_data_end+0xff802be8>
 1802cd4:	8080030b 	ldhu	r2,12(r16)
 1802cd8:	04810004 	movi	r18,1024
 1802cdc:	84801315 	stw	r18,76(r16)
 1802ce0:	1484b03a 	or	r2,r2,r18
 1802ce4:	8080030d 	sth	r2,12(r16)
 1802ce8:	0027883a 	mov	r19,zero
 1802cec:	003fd806 	br	1802c50 <__alt_data_end+0xff802c50>
 1802cf0:	8140038f 	ldh	r5,14(r16)
 1802cf4:	8809883a 	mov	r4,r17
 1802cf8:	1802e0c0 	call	1802e0c <_isatty_r>
 1802cfc:	103fe226 	beq	r2,zero,1802c88 <__alt_data_end+0xff802c88>
 1802d00:	8080030b 	ldhu	r2,12(r16)
 1802d04:	10800054 	ori	r2,r2,1
 1802d08:	8080030d 	sth	r2,12(r16)
 1802d0c:	003fde06 	br	1802c88 <__alt_data_end+0xff802c88>
 1802d10:	8080030b 	ldhu	r2,12(r16)
 1802d14:	10c0800c 	andi	r3,r2,512
 1802d18:	183fdb1e 	bne	r3,zero,1802c88 <__alt_data_end+0xff802c88>
 1802d1c:	10800094 	ori	r2,r2,2
 1802d20:	80c010c4 	addi	r3,r16,67
 1802d24:	8080030d 	sth	r2,12(r16)
 1802d28:	00800044 	movi	r2,1
 1802d2c:	80c00015 	stw	r3,0(r16)
 1802d30:	80c00415 	stw	r3,16(r16)
 1802d34:	80800515 	stw	r2,20(r16)
 1802d38:	003fd306 	br	1802c88 <__alt_data_end+0xff802c88>
 1802d3c:	04810004 	movi	r18,1024
 1802d40:	003fc306 	br	1802c50 <__alt_data_end+0xff802c50>
 1802d44:	0027883a 	mov	r19,zero
 1802d48:	04810004 	movi	r18,1024
 1802d4c:	003fc006 	br	1802c50 <__alt_data_end+0xff802c50>

01802d50 <_read_r>:
 1802d50:	defffd04 	addi	sp,sp,-12
 1802d54:	2805883a 	mov	r2,r5
 1802d58:	dc000015 	stw	r16,0(sp)
 1802d5c:	04006074 	movhi	r16,385
 1802d60:	dc400115 	stw	r17,4(sp)
 1802d64:	300b883a 	mov	r5,r6
 1802d68:	84239104 	addi	r16,r16,-29116
 1802d6c:	2023883a 	mov	r17,r4
 1802d70:	380d883a 	mov	r6,r7
 1802d74:	1009883a 	mov	r4,r2
 1802d78:	dfc00215 	stw	ra,8(sp)
 1802d7c:	80000015 	stw	zero,0(r16)
 1802d80:	18036c00 	call	18036c0 <read>
 1802d84:	00ffffc4 	movi	r3,-1
 1802d88:	10c00526 	beq	r2,r3,1802da0 <_read_r+0x50>
 1802d8c:	dfc00217 	ldw	ra,8(sp)
 1802d90:	dc400117 	ldw	r17,4(sp)
 1802d94:	dc000017 	ldw	r16,0(sp)
 1802d98:	dec00304 	addi	sp,sp,12
 1802d9c:	f800283a 	ret
 1802da0:	80c00017 	ldw	r3,0(r16)
 1802da4:	183ff926 	beq	r3,zero,1802d8c <__alt_data_end+0xff802d8c>
 1802da8:	88c00015 	stw	r3,0(r17)
 1802dac:	003ff706 	br	1802d8c <__alt_data_end+0xff802d8c>

01802db0 <_fstat_r>:
 1802db0:	defffd04 	addi	sp,sp,-12
 1802db4:	2805883a 	mov	r2,r5
 1802db8:	dc000015 	stw	r16,0(sp)
 1802dbc:	04006074 	movhi	r16,385
 1802dc0:	dc400115 	stw	r17,4(sp)
 1802dc4:	84239104 	addi	r16,r16,-29116
 1802dc8:	2023883a 	mov	r17,r4
 1802dcc:	300b883a 	mov	r5,r6
 1802dd0:	1009883a 	mov	r4,r2
 1802dd4:	dfc00215 	stw	ra,8(sp)
 1802dd8:	80000015 	stw	zero,0(r16)
 1802ddc:	18031e00 	call	18031e0 <fstat>
 1802de0:	00ffffc4 	movi	r3,-1
 1802de4:	10c00526 	beq	r2,r3,1802dfc <_fstat_r+0x4c>
 1802de8:	dfc00217 	ldw	ra,8(sp)
 1802dec:	dc400117 	ldw	r17,4(sp)
 1802df0:	dc000017 	ldw	r16,0(sp)
 1802df4:	dec00304 	addi	sp,sp,12
 1802df8:	f800283a 	ret
 1802dfc:	80c00017 	ldw	r3,0(r16)
 1802e00:	183ff926 	beq	r3,zero,1802de8 <__alt_data_end+0xff802de8>
 1802e04:	88c00015 	stw	r3,0(r17)
 1802e08:	003ff706 	br	1802de8 <__alt_data_end+0xff802de8>

01802e0c <_isatty_r>:
 1802e0c:	defffd04 	addi	sp,sp,-12
 1802e10:	dc000015 	stw	r16,0(sp)
 1802e14:	04006074 	movhi	r16,385
 1802e18:	dc400115 	stw	r17,4(sp)
 1802e1c:	84239104 	addi	r16,r16,-29116
 1802e20:	2023883a 	mov	r17,r4
 1802e24:	2809883a 	mov	r4,r5
 1802e28:	dfc00215 	stw	ra,8(sp)
 1802e2c:	80000015 	stw	zero,0(r16)
 1802e30:	18032e80 	call	18032e8 <isatty>
 1802e34:	00ffffc4 	movi	r3,-1
 1802e38:	10c00526 	beq	r2,r3,1802e50 <_isatty_r+0x44>
 1802e3c:	dfc00217 	ldw	ra,8(sp)
 1802e40:	dc400117 	ldw	r17,4(sp)
 1802e44:	dc000017 	ldw	r16,0(sp)
 1802e48:	dec00304 	addi	sp,sp,12
 1802e4c:	f800283a 	ret
 1802e50:	80c00017 	ldw	r3,0(r16)
 1802e54:	183ff926 	beq	r3,zero,1802e3c <__alt_data_end+0xff802e3c>
 1802e58:	88c00015 	stw	r3,0(r17)
 1802e5c:	003ff706 	br	1802e3c <__alt_data_end+0xff802e3c>

01802e60 <__divsi3>:
 1802e60:	20001b16 	blt	r4,zero,1802ed0 <__divsi3+0x70>
 1802e64:	000f883a 	mov	r7,zero
 1802e68:	28001616 	blt	r5,zero,1802ec4 <__divsi3+0x64>
 1802e6c:	200d883a 	mov	r6,r4
 1802e70:	29001a2e 	bgeu	r5,r4,1802edc <__divsi3+0x7c>
 1802e74:	00800804 	movi	r2,32
 1802e78:	00c00044 	movi	r3,1
 1802e7c:	00000106 	br	1802e84 <__divsi3+0x24>
 1802e80:	10000d26 	beq	r2,zero,1802eb8 <__divsi3+0x58>
 1802e84:	294b883a 	add	r5,r5,r5
 1802e88:	10bfffc4 	addi	r2,r2,-1
 1802e8c:	18c7883a 	add	r3,r3,r3
 1802e90:	293ffb36 	bltu	r5,r4,1802e80 <__alt_data_end+0xff802e80>
 1802e94:	0005883a 	mov	r2,zero
 1802e98:	18000726 	beq	r3,zero,1802eb8 <__divsi3+0x58>
 1802e9c:	0005883a 	mov	r2,zero
 1802ea0:	31400236 	bltu	r6,r5,1802eac <__divsi3+0x4c>
 1802ea4:	314dc83a 	sub	r6,r6,r5
 1802ea8:	10c4b03a 	or	r2,r2,r3
 1802eac:	1806d07a 	srli	r3,r3,1
 1802eb0:	280ad07a 	srli	r5,r5,1
 1802eb4:	183ffa1e 	bne	r3,zero,1802ea0 <__alt_data_end+0xff802ea0>
 1802eb8:	38000126 	beq	r7,zero,1802ec0 <__divsi3+0x60>
 1802ebc:	0085c83a 	sub	r2,zero,r2
 1802ec0:	f800283a 	ret
 1802ec4:	014bc83a 	sub	r5,zero,r5
 1802ec8:	39c0005c 	xori	r7,r7,1
 1802ecc:	003fe706 	br	1802e6c <__alt_data_end+0xff802e6c>
 1802ed0:	0109c83a 	sub	r4,zero,r4
 1802ed4:	01c00044 	movi	r7,1
 1802ed8:	003fe306 	br	1802e68 <__alt_data_end+0xff802e68>
 1802edc:	00c00044 	movi	r3,1
 1802ee0:	003fee06 	br	1802e9c <__alt_data_end+0xff802e9c>

01802ee4 <__modsi3>:
 1802ee4:	20001716 	blt	r4,zero,1802f44 <__modsi3+0x60>
 1802ee8:	000f883a 	mov	r7,zero
 1802eec:	2005883a 	mov	r2,r4
 1802ef0:	28001216 	blt	r5,zero,1802f3c <__modsi3+0x58>
 1802ef4:	2900162e 	bgeu	r5,r4,1802f50 <__modsi3+0x6c>
 1802ef8:	01800804 	movi	r6,32
 1802efc:	00c00044 	movi	r3,1
 1802f00:	00000106 	br	1802f08 <__modsi3+0x24>
 1802f04:	30000a26 	beq	r6,zero,1802f30 <__modsi3+0x4c>
 1802f08:	294b883a 	add	r5,r5,r5
 1802f0c:	31bfffc4 	addi	r6,r6,-1
 1802f10:	18c7883a 	add	r3,r3,r3
 1802f14:	293ffb36 	bltu	r5,r4,1802f04 <__alt_data_end+0xff802f04>
 1802f18:	18000526 	beq	r3,zero,1802f30 <__modsi3+0x4c>
 1802f1c:	1806d07a 	srli	r3,r3,1
 1802f20:	11400136 	bltu	r2,r5,1802f28 <__modsi3+0x44>
 1802f24:	1145c83a 	sub	r2,r2,r5
 1802f28:	280ad07a 	srli	r5,r5,1
 1802f2c:	183ffb1e 	bne	r3,zero,1802f1c <__alt_data_end+0xff802f1c>
 1802f30:	38000126 	beq	r7,zero,1802f38 <__modsi3+0x54>
 1802f34:	0085c83a 	sub	r2,zero,r2
 1802f38:	f800283a 	ret
 1802f3c:	014bc83a 	sub	r5,zero,r5
 1802f40:	003fec06 	br	1802ef4 <__alt_data_end+0xff802ef4>
 1802f44:	0109c83a 	sub	r4,zero,r4
 1802f48:	01c00044 	movi	r7,1
 1802f4c:	003fe706 	br	1802eec <__alt_data_end+0xff802eec>
 1802f50:	00c00044 	movi	r3,1
 1802f54:	003ff106 	br	1802f1c <__alt_data_end+0xff802f1c>

01802f58 <__udivsi3>:
 1802f58:	200d883a 	mov	r6,r4
 1802f5c:	2900152e 	bgeu	r5,r4,1802fb4 <__udivsi3+0x5c>
 1802f60:	28001416 	blt	r5,zero,1802fb4 <__udivsi3+0x5c>
 1802f64:	00800804 	movi	r2,32
 1802f68:	00c00044 	movi	r3,1
 1802f6c:	00000206 	br	1802f78 <__udivsi3+0x20>
 1802f70:	10000e26 	beq	r2,zero,1802fac <__udivsi3+0x54>
 1802f74:	28000516 	blt	r5,zero,1802f8c <__udivsi3+0x34>
 1802f78:	294b883a 	add	r5,r5,r5
 1802f7c:	10bfffc4 	addi	r2,r2,-1
 1802f80:	18c7883a 	add	r3,r3,r3
 1802f84:	293ffa36 	bltu	r5,r4,1802f70 <__alt_data_end+0xff802f70>
 1802f88:	18000826 	beq	r3,zero,1802fac <__udivsi3+0x54>
 1802f8c:	0005883a 	mov	r2,zero
 1802f90:	31400236 	bltu	r6,r5,1802f9c <__udivsi3+0x44>
 1802f94:	314dc83a 	sub	r6,r6,r5
 1802f98:	10c4b03a 	or	r2,r2,r3
 1802f9c:	1806d07a 	srli	r3,r3,1
 1802fa0:	280ad07a 	srli	r5,r5,1
 1802fa4:	183ffa1e 	bne	r3,zero,1802f90 <__alt_data_end+0xff802f90>
 1802fa8:	f800283a 	ret
 1802fac:	0005883a 	mov	r2,zero
 1802fb0:	f800283a 	ret
 1802fb4:	00c00044 	movi	r3,1
 1802fb8:	003ff406 	br	1802f8c <__alt_data_end+0xff802f8c>

01802fbc <__umodsi3>:
 1802fbc:	2005883a 	mov	r2,r4
 1802fc0:	2900122e 	bgeu	r5,r4,180300c <__umodsi3+0x50>
 1802fc4:	28001116 	blt	r5,zero,180300c <__umodsi3+0x50>
 1802fc8:	01800804 	movi	r6,32
 1802fcc:	00c00044 	movi	r3,1
 1802fd0:	00000206 	br	1802fdc <__umodsi3+0x20>
 1802fd4:	30000c26 	beq	r6,zero,1803008 <__umodsi3+0x4c>
 1802fd8:	28000516 	blt	r5,zero,1802ff0 <__umodsi3+0x34>
 1802fdc:	294b883a 	add	r5,r5,r5
 1802fe0:	31bfffc4 	addi	r6,r6,-1
 1802fe4:	18c7883a 	add	r3,r3,r3
 1802fe8:	293ffa36 	bltu	r5,r4,1802fd4 <__alt_data_end+0xff802fd4>
 1802fec:	18000626 	beq	r3,zero,1803008 <__umodsi3+0x4c>
 1802ff0:	1806d07a 	srli	r3,r3,1
 1802ff4:	11400136 	bltu	r2,r5,1802ffc <__umodsi3+0x40>
 1802ff8:	1145c83a 	sub	r2,r2,r5
 1802ffc:	280ad07a 	srli	r5,r5,1
 1803000:	183ffb1e 	bne	r3,zero,1802ff0 <__alt_data_end+0xff802ff0>
 1803004:	f800283a 	ret
 1803008:	f800283a 	ret
 180300c:	00c00044 	movi	r3,1
 1803010:	003ff706 	br	1802ff0 <__alt_data_end+0xff802ff0>

01803014 <__mulsi3>:
 1803014:	0005883a 	mov	r2,zero
 1803018:	20000726 	beq	r4,zero,1803038 <__mulsi3+0x24>
 180301c:	20c0004c 	andi	r3,r4,1
 1803020:	2008d07a 	srli	r4,r4,1
 1803024:	18000126 	beq	r3,zero,180302c <__mulsi3+0x18>
 1803028:	1145883a 	add	r2,r2,r5
 180302c:	294b883a 	add	r5,r5,r5
 1803030:	203ffa1e 	bne	r4,zero,180301c <__alt_data_end+0xff80301c>
 1803034:	f800283a 	ret
 1803038:	f800283a 	ret

0180303c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180303c:	defffe04 	addi	sp,sp,-8
 1803040:	dfc00115 	stw	ra,4(sp)
 1803044:	df000015 	stw	fp,0(sp)
 1803048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 180304c:	00806034 	movhi	r2,384
 1803050:	109cee04 	addi	r2,r2,29624
 1803054:	10800017 	ldw	r2,0(r2)
 1803058:	10000526 	beq	r2,zero,1803070 <alt_get_errno+0x34>
 180305c:	00806034 	movhi	r2,384
 1803060:	109cee04 	addi	r2,r2,29624
 1803064:	10800017 	ldw	r2,0(r2)
 1803068:	103ee83a 	callr	r2
 180306c:	00000206 	br	1803078 <alt_get_errno+0x3c>
 1803070:	00806074 	movhi	r2,385
 1803074:	10a39104 	addi	r2,r2,-29116
}
 1803078:	e037883a 	mov	sp,fp
 180307c:	dfc00117 	ldw	ra,4(sp)
 1803080:	df000017 	ldw	fp,0(sp)
 1803084:	dec00204 	addi	sp,sp,8
 1803088:	f800283a 	ret

0180308c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 180308c:	defffb04 	addi	sp,sp,-20
 1803090:	dfc00415 	stw	ra,16(sp)
 1803094:	df000315 	stw	fp,12(sp)
 1803098:	df000304 	addi	fp,sp,12
 180309c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 18030a0:	e0bfff17 	ldw	r2,-4(fp)
 18030a4:	10000816 	blt	r2,zero,18030c8 <close+0x3c>
 18030a8:	01400304 	movi	r5,12
 18030ac:	e13fff17 	ldw	r4,-4(fp)
 18030b0:	18030140 	call	1803014 <__mulsi3>
 18030b4:	1007883a 	mov	r3,r2
 18030b8:	00806034 	movhi	r2,384
 18030bc:	10986d04 	addi	r2,r2,25012
 18030c0:	1885883a 	add	r2,r3,r2
 18030c4:	00000106 	br	18030cc <close+0x40>
 18030c8:	0005883a 	mov	r2,zero
 18030cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 18030d0:	e0bffd17 	ldw	r2,-12(fp)
 18030d4:	10001926 	beq	r2,zero,180313c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 18030d8:	e0bffd17 	ldw	r2,-12(fp)
 18030dc:	10800017 	ldw	r2,0(r2)
 18030e0:	10800417 	ldw	r2,16(r2)
 18030e4:	10000626 	beq	r2,zero,1803100 <close+0x74>
 18030e8:	e0bffd17 	ldw	r2,-12(fp)
 18030ec:	10800017 	ldw	r2,0(r2)
 18030f0:	10800417 	ldw	r2,16(r2)
 18030f4:	e13ffd17 	ldw	r4,-12(fp)
 18030f8:	103ee83a 	callr	r2
 18030fc:	00000106 	br	1803104 <close+0x78>
 1803100:	0005883a 	mov	r2,zero
 1803104:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1803108:	e13fff17 	ldw	r4,-4(fp)
 180310c:	18037c40 	call	18037c4 <alt_release_fd>
    if (rval < 0)
 1803110:	e0bffe17 	ldw	r2,-8(fp)
 1803114:	1000070e 	bge	r2,zero,1803134 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 1803118:	180303c0 	call	180303c <alt_get_errno>
 180311c:	1007883a 	mov	r3,r2
 1803120:	e0bffe17 	ldw	r2,-8(fp)
 1803124:	0085c83a 	sub	r2,zero,r2
 1803128:	18800015 	stw	r2,0(r3)
      return -1;
 180312c:	00bfffc4 	movi	r2,-1
 1803130:	00000706 	br	1803150 <close+0xc4>
    }
    return 0;
 1803134:	0005883a 	mov	r2,zero
 1803138:	00000506 	br	1803150 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 180313c:	180303c0 	call	180303c <alt_get_errno>
 1803140:	1007883a 	mov	r3,r2
 1803144:	00801444 	movi	r2,81
 1803148:	18800015 	stw	r2,0(r3)
    return -1;
 180314c:	00bfffc4 	movi	r2,-1
  }
}
 1803150:	e037883a 	mov	sp,fp
 1803154:	dfc00117 	ldw	ra,4(sp)
 1803158:	df000017 	ldw	fp,0(sp)
 180315c:	dec00204 	addi	sp,sp,8
 1803160:	f800283a 	ret

01803164 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1803164:	defffc04 	addi	sp,sp,-16
 1803168:	df000315 	stw	fp,12(sp)
 180316c:	df000304 	addi	fp,sp,12
 1803170:	e13ffd15 	stw	r4,-12(fp)
 1803174:	e17ffe15 	stw	r5,-8(fp)
 1803178:	e1bfff15 	stw	r6,-4(fp)
  return len;
 180317c:	e0bfff17 	ldw	r2,-4(fp)
}
 1803180:	e037883a 	mov	sp,fp
 1803184:	df000017 	ldw	fp,0(sp)
 1803188:	dec00104 	addi	sp,sp,4
 180318c:	f800283a 	ret

01803190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1803190:	defffe04 	addi	sp,sp,-8
 1803194:	dfc00115 	stw	ra,4(sp)
 1803198:	df000015 	stw	fp,0(sp)
 180319c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18031a0:	00806034 	movhi	r2,384
 18031a4:	109cee04 	addi	r2,r2,29624
 18031a8:	10800017 	ldw	r2,0(r2)
 18031ac:	10000526 	beq	r2,zero,18031c4 <alt_get_errno+0x34>
 18031b0:	00806034 	movhi	r2,384
 18031b4:	109cee04 	addi	r2,r2,29624
 18031b8:	10800017 	ldw	r2,0(r2)
 18031bc:	103ee83a 	callr	r2
 18031c0:	00000206 	br	18031cc <alt_get_errno+0x3c>
 18031c4:	00806074 	movhi	r2,385
 18031c8:	10a39104 	addi	r2,r2,-29116
}
 18031cc:	e037883a 	mov	sp,fp
 18031d0:	dfc00117 	ldw	ra,4(sp)
 18031d4:	df000017 	ldw	fp,0(sp)
 18031d8:	dec00204 	addi	sp,sp,8
 18031dc:	f800283a 	ret

018031e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 18031e0:	defffb04 	addi	sp,sp,-20
 18031e4:	dfc00415 	stw	ra,16(sp)
 18031e8:	df000315 	stw	fp,12(sp)
 18031ec:	df000304 	addi	fp,sp,12
 18031f0:	e13ffe15 	stw	r4,-8(fp)
 18031f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18031f8:	e0bffe17 	ldw	r2,-8(fp)
 18031fc:	10000816 	blt	r2,zero,1803220 <fstat+0x40>
 1803200:	01400304 	movi	r5,12
 1803204:	e13ffe17 	ldw	r4,-8(fp)
 1803208:	18030140 	call	1803014 <__mulsi3>
 180320c:	1007883a 	mov	r3,r2
 1803210:	00806034 	movhi	r2,384
 1803214:	10986d04 	addi	r2,r2,25012
 1803218:	1885883a 	add	r2,r3,r2
 180321c:	00000106 	br	1803224 <fstat+0x44>
 1803220:	0005883a 	mov	r2,zero
 1803224:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1803228:	e0bffd17 	ldw	r2,-12(fp)
 180322c:	10001026 	beq	r2,zero,1803270 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1803230:	e0bffd17 	ldw	r2,-12(fp)
 1803234:	10800017 	ldw	r2,0(r2)
 1803238:	10800817 	ldw	r2,32(r2)
 180323c:	10000726 	beq	r2,zero,180325c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 1803240:	e0bffd17 	ldw	r2,-12(fp)
 1803244:	10800017 	ldw	r2,0(r2)
 1803248:	10800817 	ldw	r2,32(r2)
 180324c:	e17fff17 	ldw	r5,-4(fp)
 1803250:	e13ffd17 	ldw	r4,-12(fp)
 1803254:	103ee83a 	callr	r2
 1803258:	00000a06 	br	1803284 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 180325c:	e0bfff17 	ldw	r2,-4(fp)
 1803260:	00c80004 	movi	r3,8192
 1803264:	10c00115 	stw	r3,4(r2)
      return 0;
 1803268:	0005883a 	mov	r2,zero
 180326c:	00000506 	br	1803284 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1803270:	18031900 	call	1803190 <alt_get_errno>
 1803274:	1007883a 	mov	r3,r2
 1803278:	00801444 	movi	r2,81
 180327c:	18800015 	stw	r2,0(r3)
    return -1;
 1803280:	00bfffc4 	movi	r2,-1
  }
}
 1803284:	e037883a 	mov	sp,fp
 1803288:	dfc00117 	ldw	ra,4(sp)
 180328c:	df000017 	ldw	fp,0(sp)
 1803290:	dec00204 	addi	sp,sp,8
 1803294:	f800283a 	ret

01803298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1803298:	defffe04 	addi	sp,sp,-8
 180329c:	dfc00115 	stw	ra,4(sp)
 18032a0:	df000015 	stw	fp,0(sp)
 18032a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18032a8:	00806034 	movhi	r2,384
 18032ac:	109cee04 	addi	r2,r2,29624
 18032b0:	10800017 	ldw	r2,0(r2)
 18032b4:	10000526 	beq	r2,zero,18032cc <alt_get_errno+0x34>
 18032b8:	00806034 	movhi	r2,384
 18032bc:	109cee04 	addi	r2,r2,29624
 18032c0:	10800017 	ldw	r2,0(r2)
 18032c4:	103ee83a 	callr	r2
 18032c8:	00000206 	br	18032d4 <alt_get_errno+0x3c>
 18032cc:	00806074 	movhi	r2,385
 18032d0:	10a39104 	addi	r2,r2,-29116
}
 18032d4:	e037883a 	mov	sp,fp
 18032d8:	dfc00117 	ldw	ra,4(sp)
 18032dc:	df000017 	ldw	fp,0(sp)
 18032e0:	dec00204 	addi	sp,sp,8
 18032e4:	f800283a 	ret

018032e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 18032e8:	deffed04 	addi	sp,sp,-76
 18032ec:	dfc01215 	stw	ra,72(sp)
 18032f0:	df001115 	stw	fp,68(sp)
 18032f4:	df001104 	addi	fp,sp,68
 18032f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18032fc:	e0bfff17 	ldw	r2,-4(fp)
 1803300:	10000816 	blt	r2,zero,1803324 <isatty+0x3c>
 1803304:	01400304 	movi	r5,12
 1803308:	e13fff17 	ldw	r4,-4(fp)
 180330c:	18030140 	call	1803014 <__mulsi3>
 1803310:	1007883a 	mov	r3,r2
 1803314:	00806034 	movhi	r2,384
 1803318:	10986d04 	addi	r2,r2,25012
 180331c:	1885883a 	add	r2,r3,r2
 1803320:	00000106 	br	1803328 <isatty+0x40>
 1803324:	0005883a 	mov	r2,zero
 1803328:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 180332c:	e0bfef17 	ldw	r2,-68(fp)
 1803330:	10000e26 	beq	r2,zero,180336c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1803334:	e0bfef17 	ldw	r2,-68(fp)
 1803338:	10800017 	ldw	r2,0(r2)
 180333c:	10800817 	ldw	r2,32(r2)
 1803340:	1000021e 	bne	r2,zero,180334c <isatty+0x64>
    {
      return 1;
 1803344:	00800044 	movi	r2,1
 1803348:	00000d06 	br	1803380 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 180334c:	e0bff004 	addi	r2,fp,-64
 1803350:	100b883a 	mov	r5,r2
 1803354:	e13fff17 	ldw	r4,-4(fp)
 1803358:	18031e00 	call	18031e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 180335c:	e0bff117 	ldw	r2,-60(fp)
 1803360:	10880020 	cmpeqi	r2,r2,8192
 1803364:	10803fcc 	andi	r2,r2,255
 1803368:	00000506 	br	1803380 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 180336c:	18032980 	call	1803298 <alt_get_errno>
 1803370:	1007883a 	mov	r3,r2
 1803374:	00801444 	movi	r2,81
 1803378:	18800015 	stw	r2,0(r3)
    return 0;
 180337c:	0005883a 	mov	r2,zero
  }
}
 1803380:	e037883a 	mov	sp,fp
 1803384:	dfc00117 	ldw	ra,4(sp)
 1803388:	df000017 	ldw	fp,0(sp)
 180338c:	dec00204 	addi	sp,sp,8
 1803390:	f800283a 	ret

01803394 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1803394:	defffc04 	addi	sp,sp,-16
 1803398:	df000315 	stw	fp,12(sp)
 180339c:	df000304 	addi	fp,sp,12
 18033a0:	e13ffd15 	stw	r4,-12(fp)
 18033a4:	e17ffe15 	stw	r5,-8(fp)
 18033a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 18033ac:	e0fffe17 	ldw	r3,-8(fp)
 18033b0:	e0bffd17 	ldw	r2,-12(fp)
 18033b4:	18800c26 	beq	r3,r2,18033e8 <alt_load_section+0x54>
  {
    while( to != end )
 18033b8:	00000806 	br	18033dc <alt_load_section+0x48>
    {
      *to++ = *from++;
 18033bc:	e0bffe17 	ldw	r2,-8(fp)
 18033c0:	10c00104 	addi	r3,r2,4
 18033c4:	e0fffe15 	stw	r3,-8(fp)
 18033c8:	e0fffd17 	ldw	r3,-12(fp)
 18033cc:	19000104 	addi	r4,r3,4
 18033d0:	e13ffd15 	stw	r4,-12(fp)
 18033d4:	18c00017 	ldw	r3,0(r3)
 18033d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 18033dc:	e0fffe17 	ldw	r3,-8(fp)
 18033e0:	e0bfff17 	ldw	r2,-4(fp)
 18033e4:	18bff51e 	bne	r3,r2,18033bc <__alt_data_end+0xff8033bc>
    {
      *to++ = *from++;
    }
  }
}
 18033e8:	0001883a 	nop
 18033ec:	e037883a 	mov	sp,fp
 18033f0:	df000017 	ldw	fp,0(sp)
 18033f4:	dec00104 	addi	sp,sp,4
 18033f8:	f800283a 	ret

018033fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 18033fc:	defffe04 	addi	sp,sp,-8
 1803400:	dfc00115 	stw	ra,4(sp)
 1803404:	df000015 	stw	fp,0(sp)
 1803408:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 180340c:	01806034 	movhi	r6,384
 1803410:	319cf304 	addi	r6,r6,29644
 1803414:	01406034 	movhi	r5,384
 1803418:	29565804 	addi	r5,r5,22880
 180341c:	01006034 	movhi	r4,384
 1803420:	211cf304 	addi	r4,r4,29644
 1803424:	18033940 	call	1803394 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1803428:	01806034 	movhi	r6,384
 180342c:	31807004 	addi	r6,r6,448
 1803430:	01406034 	movhi	r5,384
 1803434:	29400804 	addi	r5,r5,32
 1803438:	01006034 	movhi	r4,384
 180343c:	21000804 	addi	r4,r4,32
 1803440:	18033940 	call	1803394 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1803444:	01806034 	movhi	r6,384
 1803448:	31965804 	addi	r6,r6,22880
 180344c:	01406034 	movhi	r5,384
 1803450:	29564604 	addi	r5,r5,22808
 1803454:	01006034 	movhi	r4,384
 1803458:	21164604 	addi	r4,r4,22808
 180345c:	18033940 	call	1803394 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1803460:	18047d80 	call	18047d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1803464:	18049ac0 	call	18049ac <alt_icache_flush_all>
}
 1803468:	0001883a 	nop
 180346c:	e037883a 	mov	sp,fp
 1803470:	dfc00117 	ldw	ra,4(sp)
 1803474:	df000017 	ldw	fp,0(sp)
 1803478:	dec00204 	addi	sp,sp,8
 180347c:	f800283a 	ret

01803480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1803480:	defffe04 	addi	sp,sp,-8
 1803484:	dfc00115 	stw	ra,4(sp)
 1803488:	df000015 	stw	fp,0(sp)
 180348c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1803490:	00806034 	movhi	r2,384
 1803494:	109cee04 	addi	r2,r2,29624
 1803498:	10800017 	ldw	r2,0(r2)
 180349c:	10000526 	beq	r2,zero,18034b4 <alt_get_errno+0x34>
 18034a0:	00806034 	movhi	r2,384
 18034a4:	109cee04 	addi	r2,r2,29624
 18034a8:	10800017 	ldw	r2,0(r2)
 18034ac:	103ee83a 	callr	r2
 18034b0:	00000206 	br	18034bc <alt_get_errno+0x3c>
 18034b4:	00806074 	movhi	r2,385
 18034b8:	10a39104 	addi	r2,r2,-29116
}
 18034bc:	e037883a 	mov	sp,fp
 18034c0:	dfc00117 	ldw	ra,4(sp)
 18034c4:	df000017 	ldw	fp,0(sp)
 18034c8:	dec00204 	addi	sp,sp,8
 18034cc:	f800283a 	ret

018034d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 18034d0:	defff904 	addi	sp,sp,-28
 18034d4:	dfc00615 	stw	ra,24(sp)
 18034d8:	df000515 	stw	fp,20(sp)
 18034dc:	df000504 	addi	fp,sp,20
 18034e0:	e13ffd15 	stw	r4,-12(fp)
 18034e4:	e17ffe15 	stw	r5,-8(fp)
 18034e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 18034ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18034f0:	e0bffd17 	ldw	r2,-12(fp)
 18034f4:	10000816 	blt	r2,zero,1803518 <lseek+0x48>
 18034f8:	01400304 	movi	r5,12
 18034fc:	e13ffd17 	ldw	r4,-12(fp)
 1803500:	18030140 	call	1803014 <__mulsi3>
 1803504:	1007883a 	mov	r3,r2
 1803508:	00806034 	movhi	r2,384
 180350c:	10986d04 	addi	r2,r2,25012
 1803510:	1885883a 	add	r2,r3,r2
 1803514:	00000106 	br	180351c <lseek+0x4c>
 1803518:	0005883a 	mov	r2,zero
 180351c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1803520:	e0bffc17 	ldw	r2,-16(fp)
 1803524:	10001026 	beq	r2,zero,1803568 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1803528:	e0bffc17 	ldw	r2,-16(fp)
 180352c:	10800017 	ldw	r2,0(r2)
 1803530:	10800717 	ldw	r2,28(r2)
 1803534:	10000926 	beq	r2,zero,180355c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1803538:	e0bffc17 	ldw	r2,-16(fp)
 180353c:	10800017 	ldw	r2,0(r2)
 1803540:	10800717 	ldw	r2,28(r2)
 1803544:	e1bfff17 	ldw	r6,-4(fp)
 1803548:	e17ffe17 	ldw	r5,-8(fp)
 180354c:	e13ffc17 	ldw	r4,-16(fp)
 1803550:	103ee83a 	callr	r2
 1803554:	e0bffb15 	stw	r2,-20(fp)
 1803558:	00000506 	br	1803570 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 180355c:	00bfde84 	movi	r2,-134
 1803560:	e0bffb15 	stw	r2,-20(fp)
 1803564:	00000206 	br	1803570 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1803568:	00bfebc4 	movi	r2,-81
 180356c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1803570:	e0bffb17 	ldw	r2,-20(fp)
 1803574:	1000070e 	bge	r2,zero,1803594 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 1803578:	18034800 	call	1803480 <alt_get_errno>
 180357c:	1007883a 	mov	r3,r2
 1803580:	e0bffb17 	ldw	r2,-20(fp)
 1803584:	0085c83a 	sub	r2,zero,r2
 1803588:	18800015 	stw	r2,0(r3)
    rc = -1;
 180358c:	00bfffc4 	movi	r2,-1
 1803590:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1803594:	e0bffb17 	ldw	r2,-20(fp)
}
 1803598:	e037883a 	mov	sp,fp
 180359c:	dfc00117 	ldw	ra,4(sp)
 18035a0:	df000017 	ldw	fp,0(sp)
 18035a4:	dec00204 	addi	sp,sp,8
 18035a8:	f800283a 	ret

018035ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 18035ac:	defffd04 	addi	sp,sp,-12
 18035b0:	dfc00215 	stw	ra,8(sp)
 18035b4:	df000115 	stw	fp,4(sp)
 18035b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 18035bc:	0009883a 	mov	r4,zero
 18035c0:	1803a800 	call	1803a80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 18035c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 18035c8:	1803ab80 	call	1803ab8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 18035cc:	01806034 	movhi	r6,384
 18035d0:	31965004 	addi	r6,r6,22848
 18035d4:	01406034 	movhi	r5,384
 18035d8:	29565004 	addi	r5,r5,22848
 18035dc:	01006034 	movhi	r4,384
 18035e0:	21165004 	addi	r4,r4,22848
 18035e4:	1804d940 	call	1804d94 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 18035e8:	18048ec0 	call	18048ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 18035ec:	01006034 	movhi	r4,384
 18035f0:	21125304 	addi	r4,r4,18764
 18035f4:	18055840 	call	1805584 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 18035f8:	d0a6ad17 	ldw	r2,-25932(gp)
 18035fc:	d0e6ae17 	ldw	r3,-25928(gp)
 1803600:	d126af17 	ldw	r4,-25924(gp)
 1803604:	200d883a 	mov	r6,r4
 1803608:	180b883a 	mov	r5,r3
 180360c:	1009883a 	mov	r4,r2
 1803610:	18001fc0 	call	18001fc <main>
 1803614:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1803618:	01000044 	movi	r4,1
 180361c:	180308c0 	call	180308c <close>
  exit (result);
 1803620:	e13fff17 	ldw	r4,-4(fp)
 1803624:	18055980 	call	1805598 <exit>

01803628 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1803628:	defffe04 	addi	sp,sp,-8
 180362c:	df000115 	stw	fp,4(sp)
 1803630:	df000104 	addi	fp,sp,4
 1803634:	e13fff15 	stw	r4,-4(fp)
}
 1803638:	0001883a 	nop
 180363c:	e037883a 	mov	sp,fp
 1803640:	df000017 	ldw	fp,0(sp)
 1803644:	dec00104 	addi	sp,sp,4
 1803648:	f800283a 	ret

0180364c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 180364c:	defffe04 	addi	sp,sp,-8
 1803650:	df000115 	stw	fp,4(sp)
 1803654:	df000104 	addi	fp,sp,4
 1803658:	e13fff15 	stw	r4,-4(fp)
}
 180365c:	0001883a 	nop
 1803660:	e037883a 	mov	sp,fp
 1803664:	df000017 	ldw	fp,0(sp)
 1803668:	dec00104 	addi	sp,sp,4
 180366c:	f800283a 	ret

01803670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1803670:	defffe04 	addi	sp,sp,-8
 1803674:	dfc00115 	stw	ra,4(sp)
 1803678:	df000015 	stw	fp,0(sp)
 180367c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1803680:	00806034 	movhi	r2,384
 1803684:	109cee04 	addi	r2,r2,29624
 1803688:	10800017 	ldw	r2,0(r2)
 180368c:	10000526 	beq	r2,zero,18036a4 <alt_get_errno+0x34>
 1803690:	00806034 	movhi	r2,384
 1803694:	109cee04 	addi	r2,r2,29624
 1803698:	10800017 	ldw	r2,0(r2)
 180369c:	103ee83a 	callr	r2
 18036a0:	00000206 	br	18036ac <alt_get_errno+0x3c>
 18036a4:	00806074 	movhi	r2,385
 18036a8:	10a39104 	addi	r2,r2,-29116
}
 18036ac:	e037883a 	mov	sp,fp
 18036b0:	dfc00117 	ldw	ra,4(sp)
 18036b4:	df000017 	ldw	fp,0(sp)
 18036b8:	dec00204 	addi	sp,sp,8
 18036bc:	f800283a 	ret

018036c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 18036c0:	defff904 	addi	sp,sp,-28
 18036c4:	dfc00615 	stw	ra,24(sp)
 18036c8:	df000515 	stw	fp,20(sp)
 18036cc:	df000504 	addi	fp,sp,20
 18036d0:	e13ffd15 	stw	r4,-12(fp)
 18036d4:	e17ffe15 	stw	r5,-8(fp)
 18036d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18036dc:	e0bffd17 	ldw	r2,-12(fp)
 18036e0:	10000816 	blt	r2,zero,1803704 <read+0x44>
 18036e4:	01400304 	movi	r5,12
 18036e8:	e13ffd17 	ldw	r4,-12(fp)
 18036ec:	18030140 	call	1803014 <__mulsi3>
 18036f0:	1007883a 	mov	r3,r2
 18036f4:	00806034 	movhi	r2,384
 18036f8:	10986d04 	addi	r2,r2,25012
 18036fc:	1885883a 	add	r2,r3,r2
 1803700:	00000106 	br	1803708 <read+0x48>
 1803704:	0005883a 	mov	r2,zero
 1803708:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 180370c:	e0bffb17 	ldw	r2,-20(fp)
 1803710:	10002226 	beq	r2,zero,180379c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1803714:	e0bffb17 	ldw	r2,-20(fp)
 1803718:	10800217 	ldw	r2,8(r2)
 180371c:	108000cc 	andi	r2,r2,3
 1803720:	10800060 	cmpeqi	r2,r2,1
 1803724:	1000181e 	bne	r2,zero,1803788 <read+0xc8>
        (fd->dev->read))
 1803728:	e0bffb17 	ldw	r2,-20(fp)
 180372c:	10800017 	ldw	r2,0(r2)
 1803730:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1803734:	10001426 	beq	r2,zero,1803788 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1803738:	e0bffb17 	ldw	r2,-20(fp)
 180373c:	10800017 	ldw	r2,0(r2)
 1803740:	10800517 	ldw	r2,20(r2)
 1803744:	e0ffff17 	ldw	r3,-4(fp)
 1803748:	180d883a 	mov	r6,r3
 180374c:	e17ffe17 	ldw	r5,-8(fp)
 1803750:	e13ffb17 	ldw	r4,-20(fp)
 1803754:	103ee83a 	callr	r2
 1803758:	e0bffc15 	stw	r2,-16(fp)
 180375c:	e0bffc17 	ldw	r2,-16(fp)
 1803760:	1000070e 	bge	r2,zero,1803780 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 1803764:	18036700 	call	1803670 <alt_get_errno>
 1803768:	1007883a 	mov	r3,r2
 180376c:	e0bffc17 	ldw	r2,-16(fp)
 1803770:	0085c83a 	sub	r2,zero,r2
 1803774:	18800015 	stw	r2,0(r3)
          return -1;
 1803778:	00bfffc4 	movi	r2,-1
 180377c:	00000c06 	br	18037b0 <read+0xf0>
        }
        return rval;
 1803780:	e0bffc17 	ldw	r2,-16(fp)
 1803784:	00000a06 	br	18037b0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1803788:	18036700 	call	1803670 <alt_get_errno>
 180378c:	1007883a 	mov	r3,r2
 1803790:	00800344 	movi	r2,13
 1803794:	18800015 	stw	r2,0(r3)
 1803798:	00000406 	br	18037ac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 180379c:	18036700 	call	1803670 <alt_get_errno>
 18037a0:	1007883a 	mov	r3,r2
 18037a4:	00801444 	movi	r2,81
 18037a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 18037ac:	00bfffc4 	movi	r2,-1
}
 18037b0:	e037883a 	mov	sp,fp
 18037b4:	dfc00117 	ldw	ra,4(sp)
 18037b8:	df000017 	ldw	fp,0(sp)
 18037bc:	dec00204 	addi	sp,sp,8
 18037c0:	f800283a 	ret

018037c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 18037c4:	defffc04 	addi	sp,sp,-16
 18037c8:	dfc00315 	stw	ra,12(sp)
 18037cc:	df000215 	stw	fp,8(sp)
 18037d0:	dc000115 	stw	r16,4(sp)
 18037d4:	df000204 	addi	fp,sp,8
 18037d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 18037dc:	e0bffe17 	ldw	r2,-8(fp)
 18037e0:	108000d0 	cmplti	r2,r2,3
 18037e4:	1000111e 	bne	r2,zero,180382c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 18037e8:	04006034 	movhi	r16,384
 18037ec:	84186d04 	addi	r16,r16,25012
 18037f0:	e0bffe17 	ldw	r2,-8(fp)
 18037f4:	01400304 	movi	r5,12
 18037f8:	1009883a 	mov	r4,r2
 18037fc:	18030140 	call	1803014 <__mulsi3>
 1803800:	8085883a 	add	r2,r16,r2
 1803804:	10800204 	addi	r2,r2,8
 1803808:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 180380c:	04006034 	movhi	r16,384
 1803810:	84186d04 	addi	r16,r16,25012
 1803814:	e0bffe17 	ldw	r2,-8(fp)
 1803818:	01400304 	movi	r5,12
 180381c:	1009883a 	mov	r4,r2
 1803820:	18030140 	call	1803014 <__mulsi3>
 1803824:	8085883a 	add	r2,r16,r2
 1803828:	10000015 	stw	zero,0(r2)
  }
}
 180382c:	0001883a 	nop
 1803830:	e6ffff04 	addi	sp,fp,-4
 1803834:	dfc00217 	ldw	ra,8(sp)
 1803838:	df000117 	ldw	fp,4(sp)
 180383c:	dc000017 	ldw	r16,0(sp)
 1803840:	dec00304 	addi	sp,sp,12
 1803844:	f800283a 	ret

01803848 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1803848:	defff904 	addi	sp,sp,-28
 180384c:	df000615 	stw	fp,24(sp)
 1803850:	df000604 	addi	fp,sp,24
 1803854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1803858:	0005303a 	rdctl	r2,status
 180385c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1803860:	e0fffe17 	ldw	r3,-8(fp)
 1803864:	00bfff84 	movi	r2,-2
 1803868:	1884703a 	and	r2,r3,r2
 180386c:	1001703a 	wrctl	status,r2
  
  return context;
 1803870:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1803874:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1803878:	d0a00a17 	ldw	r2,-32728(gp)
 180387c:	10c000c4 	addi	r3,r2,3
 1803880:	00bfff04 	movi	r2,-4
 1803884:	1884703a 	and	r2,r3,r2
 1803888:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 180388c:	d0e00a17 	ldw	r3,-32728(gp)
 1803890:	e0bfff17 	ldw	r2,-4(fp)
 1803894:	1887883a 	add	r3,r3,r2
 1803898:	00808034 	movhi	r2,512
 180389c:	10800004 	addi	r2,r2,0
 18038a0:	10c0062e 	bgeu	r2,r3,18038bc <sbrk+0x74>
 18038a4:	e0bffb17 	ldw	r2,-20(fp)
 18038a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18038ac:	e0bffa17 	ldw	r2,-24(fp)
 18038b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 18038b4:	00bfffc4 	movi	r2,-1
 18038b8:	00000b06 	br	18038e8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 18038bc:	d0a00a17 	ldw	r2,-32728(gp)
 18038c0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 18038c4:	d0e00a17 	ldw	r3,-32728(gp)
 18038c8:	e0bfff17 	ldw	r2,-4(fp)
 18038cc:	1885883a 	add	r2,r3,r2
 18038d0:	d0a00a15 	stw	r2,-32728(gp)
 18038d4:	e0bffb17 	ldw	r2,-20(fp)
 18038d8:	e0bffc15 	stw	r2,-16(fp)
 18038dc:	e0bffc17 	ldw	r2,-16(fp)
 18038e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 18038e4:	e0bffd17 	ldw	r2,-12(fp)
} 
 18038e8:	e037883a 	mov	sp,fp
 18038ec:	df000017 	ldw	fp,0(sp)
 18038f0:	dec00104 	addi	sp,sp,4
 18038f4:	f800283a 	ret

018038f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18038f8:	defffe04 	addi	sp,sp,-8
 18038fc:	dfc00115 	stw	ra,4(sp)
 1803900:	df000015 	stw	fp,0(sp)
 1803904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1803908:	00806034 	movhi	r2,384
 180390c:	109cee04 	addi	r2,r2,29624
 1803910:	10800017 	ldw	r2,0(r2)
 1803914:	10000526 	beq	r2,zero,180392c <alt_get_errno+0x34>
 1803918:	00806034 	movhi	r2,384
 180391c:	109cee04 	addi	r2,r2,29624
 1803920:	10800017 	ldw	r2,0(r2)
 1803924:	103ee83a 	callr	r2
 1803928:	00000206 	br	1803934 <alt_get_errno+0x3c>
 180392c:	00806074 	movhi	r2,385
 1803930:	10a39104 	addi	r2,r2,-29116
}
 1803934:	e037883a 	mov	sp,fp
 1803938:	dfc00117 	ldw	ra,4(sp)
 180393c:	df000017 	ldw	fp,0(sp)
 1803940:	dec00204 	addi	sp,sp,8
 1803944:	f800283a 	ret

01803948 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1803948:	defff904 	addi	sp,sp,-28
 180394c:	dfc00615 	stw	ra,24(sp)
 1803950:	df000515 	stw	fp,20(sp)
 1803954:	df000504 	addi	fp,sp,20
 1803958:	e13ffd15 	stw	r4,-12(fp)
 180395c:	e17ffe15 	stw	r5,-8(fp)
 1803960:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1803964:	e0bffd17 	ldw	r2,-12(fp)
 1803968:	10000816 	blt	r2,zero,180398c <write+0x44>
 180396c:	01400304 	movi	r5,12
 1803970:	e13ffd17 	ldw	r4,-12(fp)
 1803974:	18030140 	call	1803014 <__mulsi3>
 1803978:	1007883a 	mov	r3,r2
 180397c:	00806034 	movhi	r2,384
 1803980:	10986d04 	addi	r2,r2,25012
 1803984:	1885883a 	add	r2,r3,r2
 1803988:	00000106 	br	1803990 <write+0x48>
 180398c:	0005883a 	mov	r2,zero
 1803990:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1803994:	e0bffb17 	ldw	r2,-20(fp)
 1803998:	10002126 	beq	r2,zero,1803a20 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 180399c:	e0bffb17 	ldw	r2,-20(fp)
 18039a0:	10800217 	ldw	r2,8(r2)
 18039a4:	108000cc 	andi	r2,r2,3
 18039a8:	10001826 	beq	r2,zero,1803a0c <write+0xc4>
 18039ac:	e0bffb17 	ldw	r2,-20(fp)
 18039b0:	10800017 	ldw	r2,0(r2)
 18039b4:	10800617 	ldw	r2,24(r2)
 18039b8:	10001426 	beq	r2,zero,1803a0c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 18039bc:	e0bffb17 	ldw	r2,-20(fp)
 18039c0:	10800017 	ldw	r2,0(r2)
 18039c4:	10800617 	ldw	r2,24(r2)
 18039c8:	e0ffff17 	ldw	r3,-4(fp)
 18039cc:	180d883a 	mov	r6,r3
 18039d0:	e17ffe17 	ldw	r5,-8(fp)
 18039d4:	e13ffb17 	ldw	r4,-20(fp)
 18039d8:	103ee83a 	callr	r2
 18039dc:	e0bffc15 	stw	r2,-16(fp)
 18039e0:	e0bffc17 	ldw	r2,-16(fp)
 18039e4:	1000070e 	bge	r2,zero,1803a04 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 18039e8:	18038f80 	call	18038f8 <alt_get_errno>
 18039ec:	1007883a 	mov	r3,r2
 18039f0:	e0bffc17 	ldw	r2,-16(fp)
 18039f4:	0085c83a 	sub	r2,zero,r2
 18039f8:	18800015 	stw	r2,0(r3)
        return -1;
 18039fc:	00bfffc4 	movi	r2,-1
 1803a00:	00000c06 	br	1803a34 <write+0xec>
      }
      return rval;
 1803a04:	e0bffc17 	ldw	r2,-16(fp)
 1803a08:	00000a06 	br	1803a34 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1803a0c:	18038f80 	call	18038f8 <alt_get_errno>
 1803a10:	1007883a 	mov	r3,r2
 1803a14:	00800344 	movi	r2,13
 1803a18:	18800015 	stw	r2,0(r3)
 1803a1c:	00000406 	br	1803a30 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1803a20:	18038f80 	call	18038f8 <alt_get_errno>
 1803a24:	1007883a 	mov	r3,r2
 1803a28:	00801444 	movi	r2,81
 1803a2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1803a30:	00bfffc4 	movi	r2,-1
}
 1803a34:	e037883a 	mov	sp,fp
 1803a38:	dfc00117 	ldw	ra,4(sp)
 1803a3c:	df000017 	ldw	fp,0(sp)
 1803a40:	dec00204 	addi	sp,sp,8
 1803a44:	f800283a 	ret

01803a48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1803a48:	defffd04 	addi	sp,sp,-12
 1803a4c:	dfc00215 	stw	ra,8(sp)
 1803a50:	df000115 	stw	fp,4(sp)
 1803a54:	df000104 	addi	fp,sp,4
 1803a58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1803a5c:	01406034 	movhi	r5,384
 1803a60:	295ceb04 	addi	r5,r5,29612
 1803a64:	e13fff17 	ldw	r4,-4(fp)
 1803a68:	18048480 	call	1804848 <alt_dev_llist_insert>
}
 1803a6c:	e037883a 	mov	sp,fp
 1803a70:	dfc00117 	ldw	ra,4(sp)
 1803a74:	df000017 	ldw	fp,0(sp)
 1803a78:	dec00204 	addi	sp,sp,8
 1803a7c:	f800283a 	ret

01803a80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1803a80:	defffd04 	addi	sp,sp,-12
 1803a84:	dfc00215 	stw	ra,8(sp)
 1803a88:	df000115 	stw	fp,4(sp)
 1803a8c:	df000104 	addi	fp,sp,4
 1803a90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 1803a94:	18052580 	call	1805258 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1803a98:	00800044 	movi	r2,1
 1803a9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1803aa0:	0001883a 	nop
 1803aa4:	e037883a 	mov	sp,fp
 1803aa8:	dfc00117 	ldw	ra,4(sp)
 1803aac:	df000017 	ldw	fp,0(sp)
 1803ab0:	dec00204 	addi	sp,sp,8
 1803ab4:	f800283a 	ret

01803ab8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1803ab8:	defffe04 	addi	sp,sp,-8
 1803abc:	dfc00115 	stw	ra,4(sp)
 1803ac0:	df000015 	stw	fp,0(sp)
 1803ac4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 1803ac8:	01c0fa04 	movi	r7,1000
 1803acc:	01800044 	movi	r6,1
 1803ad0:	000b883a 	mov	r5,zero
 1803ad4:	01008034 	movhi	r4,512
 1803ad8:	21040004 	addi	r4,r4,4096
 1803adc:	180460c0 	call	180460c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1803ae0:	01800404 	movi	r6,16
 1803ae4:	000b883a 	mov	r5,zero
 1803ae8:	01006034 	movhi	r4,384
 1803aec:	2118d704 	addi	r4,r4,25436
 1803af0:	1803c800 	call	1803c80 <altera_avalon_jtag_uart_init>
 1803af4:	01006034 	movhi	r4,384
 1803af8:	2118cd04 	addi	r4,r4,25396
 1803afc:	1803a480 	call	1803a48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 1803b00:	0001883a 	nop
}
 1803b04:	0001883a 	nop
 1803b08:	e037883a 	mov	sp,fp
 1803b0c:	dfc00117 	ldw	ra,4(sp)
 1803b10:	df000017 	ldw	fp,0(sp)
 1803b14:	dec00204 	addi	sp,sp,8
 1803b18:	f800283a 	ret

01803b1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1803b1c:	defffa04 	addi	sp,sp,-24
 1803b20:	dfc00515 	stw	ra,20(sp)
 1803b24:	df000415 	stw	fp,16(sp)
 1803b28:	df000404 	addi	fp,sp,16
 1803b2c:	e13ffd15 	stw	r4,-12(fp)
 1803b30:	e17ffe15 	stw	r5,-8(fp)
 1803b34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1803b38:	e0bffd17 	ldw	r2,-12(fp)
 1803b3c:	10800017 	ldw	r2,0(r2)
 1803b40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1803b44:	e0bffc17 	ldw	r2,-16(fp)
 1803b48:	10c00a04 	addi	r3,r2,40
 1803b4c:	e0bffd17 	ldw	r2,-12(fp)
 1803b50:	10800217 	ldw	r2,8(r2)
 1803b54:	100f883a 	mov	r7,r2
 1803b58:	e1bfff17 	ldw	r6,-4(fp)
 1803b5c:	e17ffe17 	ldw	r5,-8(fp)
 1803b60:	1809883a 	mov	r4,r3
 1803b64:	18041540 	call	1804154 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1803b68:	e037883a 	mov	sp,fp
 1803b6c:	dfc00117 	ldw	ra,4(sp)
 1803b70:	df000017 	ldw	fp,0(sp)
 1803b74:	dec00204 	addi	sp,sp,8
 1803b78:	f800283a 	ret

01803b7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1803b7c:	defffa04 	addi	sp,sp,-24
 1803b80:	dfc00515 	stw	ra,20(sp)
 1803b84:	df000415 	stw	fp,16(sp)
 1803b88:	df000404 	addi	fp,sp,16
 1803b8c:	e13ffd15 	stw	r4,-12(fp)
 1803b90:	e17ffe15 	stw	r5,-8(fp)
 1803b94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1803b98:	e0bffd17 	ldw	r2,-12(fp)
 1803b9c:	10800017 	ldw	r2,0(r2)
 1803ba0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1803ba4:	e0bffc17 	ldw	r2,-16(fp)
 1803ba8:	10c00a04 	addi	r3,r2,40
 1803bac:	e0bffd17 	ldw	r2,-12(fp)
 1803bb0:	10800217 	ldw	r2,8(r2)
 1803bb4:	100f883a 	mov	r7,r2
 1803bb8:	e1bfff17 	ldw	r6,-4(fp)
 1803bbc:	e17ffe17 	ldw	r5,-8(fp)
 1803bc0:	1809883a 	mov	r4,r3
 1803bc4:	18043700 	call	1804370 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1803bc8:	e037883a 	mov	sp,fp
 1803bcc:	dfc00117 	ldw	ra,4(sp)
 1803bd0:	df000017 	ldw	fp,0(sp)
 1803bd4:	dec00204 	addi	sp,sp,8
 1803bd8:	f800283a 	ret

01803bdc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1803bdc:	defffc04 	addi	sp,sp,-16
 1803be0:	dfc00315 	stw	ra,12(sp)
 1803be4:	df000215 	stw	fp,8(sp)
 1803be8:	df000204 	addi	fp,sp,8
 1803bec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1803bf0:	e0bfff17 	ldw	r2,-4(fp)
 1803bf4:	10800017 	ldw	r2,0(r2)
 1803bf8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1803bfc:	e0bffe17 	ldw	r2,-8(fp)
 1803c00:	10c00a04 	addi	r3,r2,40
 1803c04:	e0bfff17 	ldw	r2,-4(fp)
 1803c08:	10800217 	ldw	r2,8(r2)
 1803c0c:	100b883a 	mov	r5,r2
 1803c10:	1809883a 	mov	r4,r3
 1803c14:	1803ffc0 	call	1803ffc <altera_avalon_jtag_uart_close>
}
 1803c18:	e037883a 	mov	sp,fp
 1803c1c:	dfc00117 	ldw	ra,4(sp)
 1803c20:	df000017 	ldw	fp,0(sp)
 1803c24:	dec00204 	addi	sp,sp,8
 1803c28:	f800283a 	ret

01803c2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1803c2c:	defffa04 	addi	sp,sp,-24
 1803c30:	dfc00515 	stw	ra,20(sp)
 1803c34:	df000415 	stw	fp,16(sp)
 1803c38:	df000404 	addi	fp,sp,16
 1803c3c:	e13ffd15 	stw	r4,-12(fp)
 1803c40:	e17ffe15 	stw	r5,-8(fp)
 1803c44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1803c48:	e0bffd17 	ldw	r2,-12(fp)
 1803c4c:	10800017 	ldw	r2,0(r2)
 1803c50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1803c54:	e0bffc17 	ldw	r2,-16(fp)
 1803c58:	10800a04 	addi	r2,r2,40
 1803c5c:	e1bfff17 	ldw	r6,-4(fp)
 1803c60:	e17ffe17 	ldw	r5,-8(fp)
 1803c64:	1009883a 	mov	r4,r2
 1803c68:	18040640 	call	1804064 <altera_avalon_jtag_uart_ioctl>
}
 1803c6c:	e037883a 	mov	sp,fp
 1803c70:	dfc00117 	ldw	ra,4(sp)
 1803c74:	df000017 	ldw	fp,0(sp)
 1803c78:	dec00204 	addi	sp,sp,8
 1803c7c:	f800283a 	ret

01803c80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1803c80:	defffa04 	addi	sp,sp,-24
 1803c84:	dfc00515 	stw	ra,20(sp)
 1803c88:	df000415 	stw	fp,16(sp)
 1803c8c:	df000404 	addi	fp,sp,16
 1803c90:	e13ffd15 	stw	r4,-12(fp)
 1803c94:	e17ffe15 	stw	r5,-8(fp)
 1803c98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1803c9c:	e0bffd17 	ldw	r2,-12(fp)
 1803ca0:	00c00044 	movi	r3,1
 1803ca4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1803ca8:	e0bffd17 	ldw	r2,-12(fp)
 1803cac:	10800017 	ldw	r2,0(r2)
 1803cb0:	10800104 	addi	r2,r2,4
 1803cb4:	1007883a 	mov	r3,r2
 1803cb8:	e0bffd17 	ldw	r2,-12(fp)
 1803cbc:	10800817 	ldw	r2,32(r2)
 1803cc0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1803cc4:	e0bffe17 	ldw	r2,-8(fp)
 1803cc8:	e0ffff17 	ldw	r3,-4(fp)
 1803ccc:	d8000015 	stw	zero,0(sp)
 1803cd0:	e1fffd17 	ldw	r7,-12(fp)
 1803cd4:	01806034 	movhi	r6,384
 1803cd8:	318f5204 	addi	r6,r6,15688
 1803cdc:	180b883a 	mov	r5,r3
 1803ce0:	1009883a 	mov	r4,r2
 1803ce4:	18049e00 	call	18049e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1803ce8:	e0bffd17 	ldw	r2,-12(fp)
 1803cec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1803cf0:	e0bffd17 	ldw	r2,-12(fp)
 1803cf4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1803cf8:	00806074 	movhi	r2,385
 1803cfc:	10a39604 	addi	r2,r2,-29096
 1803d00:	10800017 	ldw	r2,0(r2)
 1803d04:	e1fffd17 	ldw	r7,-12(fp)
 1803d08:	01806034 	movhi	r6,384
 1803d0c:	318fd504 	addi	r6,r6,16212
 1803d10:	100b883a 	mov	r5,r2
 1803d14:	1809883a 	mov	r4,r3
 1803d18:	18046980 	call	1804698 <alt_alarm_start>
 1803d1c:	1000040e 	bge	r2,zero,1803d30 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1803d20:	e0fffd17 	ldw	r3,-12(fp)
 1803d24:	00a00034 	movhi	r2,32768
 1803d28:	10bfffc4 	addi	r2,r2,-1
 1803d2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1803d30:	0001883a 	nop
 1803d34:	e037883a 	mov	sp,fp
 1803d38:	dfc00117 	ldw	ra,4(sp)
 1803d3c:	df000017 	ldw	fp,0(sp)
 1803d40:	dec00204 	addi	sp,sp,8
 1803d44:	f800283a 	ret

01803d48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1803d48:	defff804 	addi	sp,sp,-32
 1803d4c:	df000715 	stw	fp,28(sp)
 1803d50:	df000704 	addi	fp,sp,28
 1803d54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1803d58:	e0bfff17 	ldw	r2,-4(fp)
 1803d5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1803d60:	e0bffb17 	ldw	r2,-20(fp)
 1803d64:	10800017 	ldw	r2,0(r2)
 1803d68:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1803d6c:	e0bffc17 	ldw	r2,-16(fp)
 1803d70:	10800104 	addi	r2,r2,4
 1803d74:	10800037 	ldwio	r2,0(r2)
 1803d78:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1803d7c:	e0bffd17 	ldw	r2,-12(fp)
 1803d80:	1080c00c 	andi	r2,r2,768
 1803d84:	10006d26 	beq	r2,zero,1803f3c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1803d88:	e0bffd17 	ldw	r2,-12(fp)
 1803d8c:	1080400c 	andi	r2,r2,256
 1803d90:	10003526 	beq	r2,zero,1803e68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1803d94:	00800074 	movhi	r2,1
 1803d98:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1803d9c:	e0bffb17 	ldw	r2,-20(fp)
 1803da0:	10800a17 	ldw	r2,40(r2)
 1803da4:	10800044 	addi	r2,r2,1
 1803da8:	1081ffcc 	andi	r2,r2,2047
 1803dac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1803db0:	e0bffb17 	ldw	r2,-20(fp)
 1803db4:	10c00b17 	ldw	r3,44(r2)
 1803db8:	e0bffe17 	ldw	r2,-8(fp)
 1803dbc:	18801526 	beq	r3,r2,1803e14 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1803dc0:	e0bffc17 	ldw	r2,-16(fp)
 1803dc4:	10800037 	ldwio	r2,0(r2)
 1803dc8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1803dcc:	e0bff917 	ldw	r2,-28(fp)
 1803dd0:	10a0000c 	andi	r2,r2,32768
 1803dd4:	10001126 	beq	r2,zero,1803e1c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1803dd8:	e0bffb17 	ldw	r2,-20(fp)
 1803ddc:	10800a17 	ldw	r2,40(r2)
 1803de0:	e0fff917 	ldw	r3,-28(fp)
 1803de4:	1809883a 	mov	r4,r3
 1803de8:	e0fffb17 	ldw	r3,-20(fp)
 1803dec:	1885883a 	add	r2,r3,r2
 1803df0:	10800e04 	addi	r2,r2,56
 1803df4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1803df8:	e0bffb17 	ldw	r2,-20(fp)
 1803dfc:	10800a17 	ldw	r2,40(r2)
 1803e00:	10800044 	addi	r2,r2,1
 1803e04:	10c1ffcc 	andi	r3,r2,2047
 1803e08:	e0bffb17 	ldw	r2,-20(fp)
 1803e0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1803e10:	003fe206 	br	1803d9c <__alt_data_end+0xff803d9c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 1803e14:	0001883a 	nop
 1803e18:	00000106 	br	1803e20 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1803e1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1803e20:	e0bff917 	ldw	r2,-28(fp)
 1803e24:	10bfffec 	andhi	r2,r2,65535
 1803e28:	10000f26 	beq	r2,zero,1803e68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1803e2c:	e0bffb17 	ldw	r2,-20(fp)
 1803e30:	10c00817 	ldw	r3,32(r2)
 1803e34:	00bfff84 	movi	r2,-2
 1803e38:	1886703a 	and	r3,r3,r2
 1803e3c:	e0bffb17 	ldw	r2,-20(fp)
 1803e40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1803e44:	e0bffc17 	ldw	r2,-16(fp)
 1803e48:	10800104 	addi	r2,r2,4
 1803e4c:	1007883a 	mov	r3,r2
 1803e50:	e0bffb17 	ldw	r2,-20(fp)
 1803e54:	10800817 	ldw	r2,32(r2)
 1803e58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1803e5c:	e0bffc17 	ldw	r2,-16(fp)
 1803e60:	10800104 	addi	r2,r2,4
 1803e64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1803e68:	e0bffd17 	ldw	r2,-12(fp)
 1803e6c:	1080800c 	andi	r2,r2,512
 1803e70:	103fbe26 	beq	r2,zero,1803d6c <__alt_data_end+0xff803d6c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1803e74:	e0bffd17 	ldw	r2,-12(fp)
 1803e78:	1004d43a 	srli	r2,r2,16
 1803e7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1803e80:	00001406 	br	1803ed4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1803e84:	e0bffc17 	ldw	r2,-16(fp)
 1803e88:	e0fffb17 	ldw	r3,-20(fp)
 1803e8c:	18c00d17 	ldw	r3,52(r3)
 1803e90:	e13ffb17 	ldw	r4,-20(fp)
 1803e94:	20c7883a 	add	r3,r4,r3
 1803e98:	18c20e04 	addi	r3,r3,2104
 1803e9c:	18c00003 	ldbu	r3,0(r3)
 1803ea0:	18c03fcc 	andi	r3,r3,255
 1803ea4:	18c0201c 	xori	r3,r3,128
 1803ea8:	18ffe004 	addi	r3,r3,-128
 1803eac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1803eb0:	e0bffb17 	ldw	r2,-20(fp)
 1803eb4:	10800d17 	ldw	r2,52(r2)
 1803eb8:	10800044 	addi	r2,r2,1
 1803ebc:	10c1ffcc 	andi	r3,r2,2047
 1803ec0:	e0bffb17 	ldw	r2,-20(fp)
 1803ec4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1803ec8:	e0bffa17 	ldw	r2,-24(fp)
 1803ecc:	10bfffc4 	addi	r2,r2,-1
 1803ed0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1803ed4:	e0bffa17 	ldw	r2,-24(fp)
 1803ed8:	10000526 	beq	r2,zero,1803ef0 <altera_avalon_jtag_uart_irq+0x1a8>
 1803edc:	e0bffb17 	ldw	r2,-20(fp)
 1803ee0:	10c00d17 	ldw	r3,52(r2)
 1803ee4:	e0bffb17 	ldw	r2,-20(fp)
 1803ee8:	10800c17 	ldw	r2,48(r2)
 1803eec:	18bfe51e 	bne	r3,r2,1803e84 <__alt_data_end+0xff803e84>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1803ef0:	e0bffa17 	ldw	r2,-24(fp)
 1803ef4:	103f9d26 	beq	r2,zero,1803d6c <__alt_data_end+0xff803d6c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1803ef8:	e0bffb17 	ldw	r2,-20(fp)
 1803efc:	10c00817 	ldw	r3,32(r2)
 1803f00:	00bfff44 	movi	r2,-3
 1803f04:	1886703a 	and	r3,r3,r2
 1803f08:	e0bffb17 	ldw	r2,-20(fp)
 1803f0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1803f10:	e0bffb17 	ldw	r2,-20(fp)
 1803f14:	10800017 	ldw	r2,0(r2)
 1803f18:	10800104 	addi	r2,r2,4
 1803f1c:	1007883a 	mov	r3,r2
 1803f20:	e0bffb17 	ldw	r2,-20(fp)
 1803f24:	10800817 	ldw	r2,32(r2)
 1803f28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1803f2c:	e0bffc17 	ldw	r2,-16(fp)
 1803f30:	10800104 	addi	r2,r2,4
 1803f34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1803f38:	003f8c06 	br	1803d6c <__alt_data_end+0xff803d6c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1803f3c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1803f40:	0001883a 	nop
 1803f44:	e037883a 	mov	sp,fp
 1803f48:	df000017 	ldw	fp,0(sp)
 1803f4c:	dec00104 	addi	sp,sp,4
 1803f50:	f800283a 	ret

01803f54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1803f54:	defff804 	addi	sp,sp,-32
 1803f58:	df000715 	stw	fp,28(sp)
 1803f5c:	df000704 	addi	fp,sp,28
 1803f60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1803f64:	e0bffb17 	ldw	r2,-20(fp)
 1803f68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1803f6c:	e0bff917 	ldw	r2,-28(fp)
 1803f70:	10800017 	ldw	r2,0(r2)
 1803f74:	10800104 	addi	r2,r2,4
 1803f78:	10800037 	ldwio	r2,0(r2)
 1803f7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1803f80:	e0bffa17 	ldw	r2,-24(fp)
 1803f84:	1081000c 	andi	r2,r2,1024
 1803f88:	10000b26 	beq	r2,zero,1803fb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1803f8c:	e0bff917 	ldw	r2,-28(fp)
 1803f90:	10800017 	ldw	r2,0(r2)
 1803f94:	10800104 	addi	r2,r2,4
 1803f98:	1007883a 	mov	r3,r2
 1803f9c:	e0bff917 	ldw	r2,-28(fp)
 1803fa0:	10800817 	ldw	r2,32(r2)
 1803fa4:	10810014 	ori	r2,r2,1024
 1803fa8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1803fac:	e0bff917 	ldw	r2,-28(fp)
 1803fb0:	10000915 	stw	zero,36(r2)
 1803fb4:	00000a06 	br	1803fe0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1803fb8:	e0bff917 	ldw	r2,-28(fp)
 1803fbc:	10c00917 	ldw	r3,36(r2)
 1803fc0:	00a00034 	movhi	r2,32768
 1803fc4:	10bfff04 	addi	r2,r2,-4
 1803fc8:	10c00536 	bltu	r2,r3,1803fe0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1803fcc:	e0bff917 	ldw	r2,-28(fp)
 1803fd0:	10800917 	ldw	r2,36(r2)
 1803fd4:	10c00044 	addi	r3,r2,1
 1803fd8:	e0bff917 	ldw	r2,-28(fp)
 1803fdc:	10c00915 	stw	r3,36(r2)
 1803fe0:	00806074 	movhi	r2,385
 1803fe4:	10a39604 	addi	r2,r2,-29096
 1803fe8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1803fec:	e037883a 	mov	sp,fp
 1803ff0:	df000017 	ldw	fp,0(sp)
 1803ff4:	dec00104 	addi	sp,sp,4
 1803ff8:	f800283a 	ret

01803ffc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1803ffc:	defffd04 	addi	sp,sp,-12
 1804000:	df000215 	stw	fp,8(sp)
 1804004:	df000204 	addi	fp,sp,8
 1804008:	e13ffe15 	stw	r4,-8(fp)
 180400c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1804010:	00000506 	br	1804028 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1804014:	e0bfff17 	ldw	r2,-4(fp)
 1804018:	1090000c 	andi	r2,r2,16384
 180401c:	10000226 	beq	r2,zero,1804028 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1804020:	00bffd44 	movi	r2,-11
 1804024:	00000b06 	br	1804054 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1804028:	e0bffe17 	ldw	r2,-8(fp)
 180402c:	10c00d17 	ldw	r3,52(r2)
 1804030:	e0bffe17 	ldw	r2,-8(fp)
 1804034:	10800c17 	ldw	r2,48(r2)
 1804038:	18800526 	beq	r3,r2,1804050 <altera_avalon_jtag_uart_close+0x54>
 180403c:	e0bffe17 	ldw	r2,-8(fp)
 1804040:	10c00917 	ldw	r3,36(r2)
 1804044:	e0bffe17 	ldw	r2,-8(fp)
 1804048:	10800117 	ldw	r2,4(r2)
 180404c:	18bff136 	bltu	r3,r2,1804014 <__alt_data_end+0xff804014>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1804050:	0005883a 	mov	r2,zero
}
 1804054:	e037883a 	mov	sp,fp
 1804058:	df000017 	ldw	fp,0(sp)
 180405c:	dec00104 	addi	sp,sp,4
 1804060:	f800283a 	ret

01804064 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1804064:	defffa04 	addi	sp,sp,-24
 1804068:	df000515 	stw	fp,20(sp)
 180406c:	df000504 	addi	fp,sp,20
 1804070:	e13ffd15 	stw	r4,-12(fp)
 1804074:	e17ffe15 	stw	r5,-8(fp)
 1804078:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 180407c:	00bff9c4 	movi	r2,-25
 1804080:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1804084:	e0bffe17 	ldw	r2,-8(fp)
 1804088:	10da8060 	cmpeqi	r3,r2,27137
 180408c:	1800031e 	bne	r3,zero,180409c <altera_avalon_jtag_uart_ioctl+0x38>
 1804090:	109a80a0 	cmpeqi	r2,r2,27138
 1804094:	1000181e 	bne	r2,zero,18040f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1804098:	00002906 	br	1804140 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 180409c:	e0bffd17 	ldw	r2,-12(fp)
 18040a0:	10c00117 	ldw	r3,4(r2)
 18040a4:	00a00034 	movhi	r2,32768
 18040a8:	10bfffc4 	addi	r2,r2,-1
 18040ac:	18802126 	beq	r3,r2,1804134 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 18040b0:	e0bfff17 	ldw	r2,-4(fp)
 18040b4:	10800017 	ldw	r2,0(r2)
 18040b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 18040bc:	e0bffc17 	ldw	r2,-16(fp)
 18040c0:	10800090 	cmplti	r2,r2,2
 18040c4:	1000061e 	bne	r2,zero,18040e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 18040c8:	e0fffc17 	ldw	r3,-16(fp)
 18040cc:	00a00034 	movhi	r2,32768
 18040d0:	10bfffc4 	addi	r2,r2,-1
 18040d4:	18800226 	beq	r3,r2,18040e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 18040d8:	e0bffc17 	ldw	r2,-16(fp)
 18040dc:	00000206 	br	18040e8 <altera_avalon_jtag_uart_ioctl+0x84>
 18040e0:	00a00034 	movhi	r2,32768
 18040e4:	10bfff84 	addi	r2,r2,-2
 18040e8:	e0fffd17 	ldw	r3,-12(fp)
 18040ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 18040f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 18040f4:	00000f06 	br	1804134 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 18040f8:	e0bffd17 	ldw	r2,-12(fp)
 18040fc:	10c00117 	ldw	r3,4(r2)
 1804100:	00a00034 	movhi	r2,32768
 1804104:	10bfffc4 	addi	r2,r2,-1
 1804108:	18800c26 	beq	r3,r2,180413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 180410c:	e0bffd17 	ldw	r2,-12(fp)
 1804110:	10c00917 	ldw	r3,36(r2)
 1804114:	e0bffd17 	ldw	r2,-12(fp)
 1804118:	10800117 	ldw	r2,4(r2)
 180411c:	1885803a 	cmpltu	r2,r3,r2
 1804120:	10c03fcc 	andi	r3,r2,255
 1804124:	e0bfff17 	ldw	r2,-4(fp)
 1804128:	10c00015 	stw	r3,0(r2)
      rc = 0;
 180412c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1804130:	00000206 	br	180413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1804134:	0001883a 	nop
 1804138:	00000106 	br	1804140 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 180413c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1804140:	e0bffb17 	ldw	r2,-20(fp)
}
 1804144:	e037883a 	mov	sp,fp
 1804148:	df000017 	ldw	fp,0(sp)
 180414c:	dec00104 	addi	sp,sp,4
 1804150:	f800283a 	ret

01804154 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1804154:	defff304 	addi	sp,sp,-52
 1804158:	dfc00c15 	stw	ra,48(sp)
 180415c:	df000b15 	stw	fp,44(sp)
 1804160:	df000b04 	addi	fp,sp,44
 1804164:	e13ffc15 	stw	r4,-16(fp)
 1804168:	e17ffd15 	stw	r5,-12(fp)
 180416c:	e1bffe15 	stw	r6,-8(fp)
 1804170:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1804174:	e0bffd17 	ldw	r2,-12(fp)
 1804178:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 180417c:	00004706 	br	180429c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1804180:	e0bffc17 	ldw	r2,-16(fp)
 1804184:	10800a17 	ldw	r2,40(r2)
 1804188:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 180418c:	e0bffc17 	ldw	r2,-16(fp)
 1804190:	10800b17 	ldw	r2,44(r2)
 1804194:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1804198:	e0fff717 	ldw	r3,-36(fp)
 180419c:	e0bff817 	ldw	r2,-32(fp)
 18041a0:	18800536 	bltu	r3,r2,18041b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 18041a4:	e0fff717 	ldw	r3,-36(fp)
 18041a8:	e0bff817 	ldw	r2,-32(fp)
 18041ac:	1885c83a 	sub	r2,r3,r2
 18041b0:	e0bff615 	stw	r2,-40(fp)
 18041b4:	00000406 	br	18041c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 18041b8:	00c20004 	movi	r3,2048
 18041bc:	e0bff817 	ldw	r2,-32(fp)
 18041c0:	1885c83a 	sub	r2,r3,r2
 18041c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 18041c8:	e0bff617 	ldw	r2,-40(fp)
 18041cc:	10001e26 	beq	r2,zero,1804248 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 18041d0:	e0fffe17 	ldw	r3,-8(fp)
 18041d4:	e0bff617 	ldw	r2,-40(fp)
 18041d8:	1880022e 	bgeu	r3,r2,18041e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 18041dc:	e0bffe17 	ldw	r2,-8(fp)
 18041e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 18041e4:	e0bffc17 	ldw	r2,-16(fp)
 18041e8:	10c00e04 	addi	r3,r2,56
 18041ec:	e0bff817 	ldw	r2,-32(fp)
 18041f0:	1885883a 	add	r2,r3,r2
 18041f4:	e1bff617 	ldw	r6,-40(fp)
 18041f8:	100b883a 	mov	r5,r2
 18041fc:	e13ff517 	ldw	r4,-44(fp)
 1804200:	180168c0 	call	180168c <memcpy>
      ptr   += n;
 1804204:	e0fff517 	ldw	r3,-44(fp)
 1804208:	e0bff617 	ldw	r2,-40(fp)
 180420c:	1885883a 	add	r2,r3,r2
 1804210:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1804214:	e0fffe17 	ldw	r3,-8(fp)
 1804218:	e0bff617 	ldw	r2,-40(fp)
 180421c:	1885c83a 	sub	r2,r3,r2
 1804220:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1804224:	e0fff817 	ldw	r3,-32(fp)
 1804228:	e0bff617 	ldw	r2,-40(fp)
 180422c:	1885883a 	add	r2,r3,r2
 1804230:	10c1ffcc 	andi	r3,r2,2047
 1804234:	e0bffc17 	ldw	r2,-16(fp)
 1804238:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 180423c:	e0bffe17 	ldw	r2,-8(fp)
 1804240:	00bfcf16 	blt	zero,r2,1804180 <__alt_data_end+0xff804180>
 1804244:	00000106 	br	180424c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1804248:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 180424c:	e0fff517 	ldw	r3,-44(fp)
 1804250:	e0bffd17 	ldw	r2,-12(fp)
 1804254:	1880141e 	bne	r3,r2,18042a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1804258:	e0bfff17 	ldw	r2,-4(fp)
 180425c:	1090000c 	andi	r2,r2,16384
 1804260:	1000131e 	bne	r2,zero,18042b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1804264:	0001883a 	nop
 1804268:	e0bffc17 	ldw	r2,-16(fp)
 180426c:	10c00a17 	ldw	r3,40(r2)
 1804270:	e0bff717 	ldw	r2,-36(fp)
 1804274:	1880051e 	bne	r3,r2,180428c <altera_avalon_jtag_uart_read+0x138>
 1804278:	e0bffc17 	ldw	r2,-16(fp)
 180427c:	10c00917 	ldw	r3,36(r2)
 1804280:	e0bffc17 	ldw	r2,-16(fp)
 1804284:	10800117 	ldw	r2,4(r2)
 1804288:	18bff736 	bltu	r3,r2,1804268 <__alt_data_end+0xff804268>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 180428c:	e0bffc17 	ldw	r2,-16(fp)
 1804290:	10c00a17 	ldw	r3,40(r2)
 1804294:	e0bff717 	ldw	r2,-36(fp)
 1804298:	18800726 	beq	r3,r2,18042b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 180429c:	e0bffe17 	ldw	r2,-8(fp)
 18042a0:	00bfb716 	blt	zero,r2,1804180 <__alt_data_end+0xff804180>
 18042a4:	00000506 	br	18042bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 18042a8:	0001883a 	nop
 18042ac:	00000306 	br	18042bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 18042b0:	0001883a 	nop
 18042b4:	00000106 	br	18042bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 18042b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 18042bc:	e0fff517 	ldw	r3,-44(fp)
 18042c0:	e0bffd17 	ldw	r2,-12(fp)
 18042c4:	18801826 	beq	r3,r2,1804328 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18042c8:	0005303a 	rdctl	r2,status
 18042cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18042d0:	e0fffb17 	ldw	r3,-20(fp)
 18042d4:	00bfff84 	movi	r2,-2
 18042d8:	1884703a 	and	r2,r3,r2
 18042dc:	1001703a 	wrctl	status,r2
  
  return context;
 18042e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 18042e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 18042e8:	e0bffc17 	ldw	r2,-16(fp)
 18042ec:	10800817 	ldw	r2,32(r2)
 18042f0:	10c00054 	ori	r3,r2,1
 18042f4:	e0bffc17 	ldw	r2,-16(fp)
 18042f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 18042fc:	e0bffc17 	ldw	r2,-16(fp)
 1804300:	10800017 	ldw	r2,0(r2)
 1804304:	10800104 	addi	r2,r2,4
 1804308:	1007883a 	mov	r3,r2
 180430c:	e0bffc17 	ldw	r2,-16(fp)
 1804310:	10800817 	ldw	r2,32(r2)
 1804314:	18800035 	stwio	r2,0(r3)
 1804318:	e0bffa17 	ldw	r2,-24(fp)
 180431c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1804320:	e0bff917 	ldw	r2,-28(fp)
 1804324:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1804328:	e0fff517 	ldw	r3,-44(fp)
 180432c:	e0bffd17 	ldw	r2,-12(fp)
 1804330:	18800426 	beq	r3,r2,1804344 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1804334:	e0fff517 	ldw	r3,-44(fp)
 1804338:	e0bffd17 	ldw	r2,-12(fp)
 180433c:	1885c83a 	sub	r2,r3,r2
 1804340:	00000606 	br	180435c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1804344:	e0bfff17 	ldw	r2,-4(fp)
 1804348:	1090000c 	andi	r2,r2,16384
 180434c:	10000226 	beq	r2,zero,1804358 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1804350:	00bffd44 	movi	r2,-11
 1804354:	00000106 	br	180435c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1804358:	00bffec4 	movi	r2,-5
}
 180435c:	e037883a 	mov	sp,fp
 1804360:	dfc00117 	ldw	ra,4(sp)
 1804364:	df000017 	ldw	fp,0(sp)
 1804368:	dec00204 	addi	sp,sp,8
 180436c:	f800283a 	ret

01804370 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1804370:	defff304 	addi	sp,sp,-52
 1804374:	dfc00c15 	stw	ra,48(sp)
 1804378:	df000b15 	stw	fp,44(sp)
 180437c:	df000b04 	addi	fp,sp,44
 1804380:	e13ffc15 	stw	r4,-16(fp)
 1804384:	e17ffd15 	stw	r5,-12(fp)
 1804388:	e1bffe15 	stw	r6,-8(fp)
 180438c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1804390:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1804394:	e0bffd17 	ldw	r2,-12(fp)
 1804398:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 180439c:	00003706 	br	180447c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 18043a0:	e0bffc17 	ldw	r2,-16(fp)
 18043a4:	10800c17 	ldw	r2,48(r2)
 18043a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 18043ac:	e0bffc17 	ldw	r2,-16(fp)
 18043b0:	10800d17 	ldw	r2,52(r2)
 18043b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 18043b8:	e0fff917 	ldw	r3,-28(fp)
 18043bc:	e0bff517 	ldw	r2,-44(fp)
 18043c0:	1880062e 	bgeu	r3,r2,18043dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 18043c4:	e0fff517 	ldw	r3,-44(fp)
 18043c8:	e0bff917 	ldw	r2,-28(fp)
 18043cc:	1885c83a 	sub	r2,r3,r2
 18043d0:	10bfffc4 	addi	r2,r2,-1
 18043d4:	e0bff615 	stw	r2,-40(fp)
 18043d8:	00000b06 	br	1804408 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 18043dc:	e0bff517 	ldw	r2,-44(fp)
 18043e0:	10000526 	beq	r2,zero,18043f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 18043e4:	00c20004 	movi	r3,2048
 18043e8:	e0bff917 	ldw	r2,-28(fp)
 18043ec:	1885c83a 	sub	r2,r3,r2
 18043f0:	e0bff615 	stw	r2,-40(fp)
 18043f4:	00000406 	br	1804408 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 18043f8:	00c1ffc4 	movi	r3,2047
 18043fc:	e0bff917 	ldw	r2,-28(fp)
 1804400:	1885c83a 	sub	r2,r3,r2
 1804404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1804408:	e0bff617 	ldw	r2,-40(fp)
 180440c:	10001e26 	beq	r2,zero,1804488 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1804410:	e0fffe17 	ldw	r3,-8(fp)
 1804414:	e0bff617 	ldw	r2,-40(fp)
 1804418:	1880022e 	bgeu	r3,r2,1804424 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 180441c:	e0bffe17 	ldw	r2,-8(fp)
 1804420:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1804424:	e0bffc17 	ldw	r2,-16(fp)
 1804428:	10c20e04 	addi	r3,r2,2104
 180442c:	e0bff917 	ldw	r2,-28(fp)
 1804430:	1885883a 	add	r2,r3,r2
 1804434:	e1bff617 	ldw	r6,-40(fp)
 1804438:	e17ffd17 	ldw	r5,-12(fp)
 180443c:	1009883a 	mov	r4,r2
 1804440:	180168c0 	call	180168c <memcpy>
      ptr   += n;
 1804444:	e0fffd17 	ldw	r3,-12(fp)
 1804448:	e0bff617 	ldw	r2,-40(fp)
 180444c:	1885883a 	add	r2,r3,r2
 1804450:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1804454:	e0fffe17 	ldw	r3,-8(fp)
 1804458:	e0bff617 	ldw	r2,-40(fp)
 180445c:	1885c83a 	sub	r2,r3,r2
 1804460:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1804464:	e0fff917 	ldw	r3,-28(fp)
 1804468:	e0bff617 	ldw	r2,-40(fp)
 180446c:	1885883a 	add	r2,r3,r2
 1804470:	10c1ffcc 	andi	r3,r2,2047
 1804474:	e0bffc17 	ldw	r2,-16(fp)
 1804478:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 180447c:	e0bffe17 	ldw	r2,-8(fp)
 1804480:	00bfc716 	blt	zero,r2,18043a0 <__alt_data_end+0xff8043a0>
 1804484:	00000106 	br	180448c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1804488:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180448c:	0005303a 	rdctl	r2,status
 1804490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1804494:	e0fffb17 	ldw	r3,-20(fp)
 1804498:	00bfff84 	movi	r2,-2
 180449c:	1884703a 	and	r2,r3,r2
 18044a0:	1001703a 	wrctl	status,r2
  
  return context;
 18044a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 18044a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 18044ac:	e0bffc17 	ldw	r2,-16(fp)
 18044b0:	10800817 	ldw	r2,32(r2)
 18044b4:	10c00094 	ori	r3,r2,2
 18044b8:	e0bffc17 	ldw	r2,-16(fp)
 18044bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 18044c0:	e0bffc17 	ldw	r2,-16(fp)
 18044c4:	10800017 	ldw	r2,0(r2)
 18044c8:	10800104 	addi	r2,r2,4
 18044cc:	1007883a 	mov	r3,r2
 18044d0:	e0bffc17 	ldw	r2,-16(fp)
 18044d4:	10800817 	ldw	r2,32(r2)
 18044d8:	18800035 	stwio	r2,0(r3)
 18044dc:	e0bffa17 	ldw	r2,-24(fp)
 18044e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18044e4:	e0bff817 	ldw	r2,-32(fp)
 18044e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 18044ec:	e0bffe17 	ldw	r2,-8(fp)
 18044f0:	0080100e 	bge	zero,r2,1804534 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 18044f4:	e0bfff17 	ldw	r2,-4(fp)
 18044f8:	1090000c 	andi	r2,r2,16384
 18044fc:	1000101e 	bne	r2,zero,1804540 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1804500:	0001883a 	nop
 1804504:	e0bffc17 	ldw	r2,-16(fp)
 1804508:	10c00d17 	ldw	r3,52(r2)
 180450c:	e0bff517 	ldw	r2,-44(fp)
 1804510:	1880051e 	bne	r3,r2,1804528 <altera_avalon_jtag_uart_write+0x1b8>
 1804514:	e0bffc17 	ldw	r2,-16(fp)
 1804518:	10c00917 	ldw	r3,36(r2)
 180451c:	e0bffc17 	ldw	r2,-16(fp)
 1804520:	10800117 	ldw	r2,4(r2)
 1804524:	18bff736 	bltu	r3,r2,1804504 <__alt_data_end+0xff804504>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1804528:	e0bffc17 	ldw	r2,-16(fp)
 180452c:	10800917 	ldw	r2,36(r2)
 1804530:	1000051e 	bne	r2,zero,1804548 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1804534:	e0bffe17 	ldw	r2,-8(fp)
 1804538:	00bfd016 	blt	zero,r2,180447c <__alt_data_end+0xff80447c>
 180453c:	00000306 	br	180454c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1804540:	0001883a 	nop
 1804544:	00000106 	br	180454c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1804548:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 180454c:	e0fffd17 	ldw	r3,-12(fp)
 1804550:	e0bff717 	ldw	r2,-36(fp)
 1804554:	18800426 	beq	r3,r2,1804568 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1804558:	e0fffd17 	ldw	r3,-12(fp)
 180455c:	e0bff717 	ldw	r2,-36(fp)
 1804560:	1885c83a 	sub	r2,r3,r2
 1804564:	00000606 	br	1804580 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1804568:	e0bfff17 	ldw	r2,-4(fp)
 180456c:	1090000c 	andi	r2,r2,16384
 1804570:	10000226 	beq	r2,zero,180457c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1804574:	00bffd44 	movi	r2,-11
 1804578:	00000106 	br	1804580 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 180457c:	00bffec4 	movi	r2,-5
}
 1804580:	e037883a 	mov	sp,fp
 1804584:	dfc00117 	ldw	ra,4(sp)
 1804588:	df000017 	ldw	fp,0(sp)
 180458c:	dec00204 	addi	sp,sp,8
 1804590:	f800283a 	ret

01804594 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1804594:	defffa04 	addi	sp,sp,-24
 1804598:	dfc00515 	stw	ra,20(sp)
 180459c:	df000415 	stw	fp,16(sp)
 18045a0:	df000404 	addi	fp,sp,16
 18045a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 18045a8:	0007883a 	mov	r3,zero
 18045ac:	e0bfff17 	ldw	r2,-4(fp)
 18045b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 18045b4:	e0bfff17 	ldw	r2,-4(fp)
 18045b8:	10800104 	addi	r2,r2,4
 18045bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18045c0:	0005303a 	rdctl	r2,status
 18045c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18045c8:	e0fffd17 	ldw	r3,-12(fp)
 18045cc:	00bfff84 	movi	r2,-2
 18045d0:	1884703a 	and	r2,r3,r2
 18045d4:	1001703a 	wrctl	status,r2
  
  return context;
 18045d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 18045dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 18045e0:	18051500 	call	1805150 <alt_tick>
 18045e4:	e0bffc17 	ldw	r2,-16(fp)
 18045e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18045ec:	e0bffe17 	ldw	r2,-8(fp)
 18045f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 18045f4:	0001883a 	nop
 18045f8:	e037883a 	mov	sp,fp
 18045fc:	dfc00117 	ldw	ra,4(sp)
 1804600:	df000017 	ldw	fp,0(sp)
 1804604:	dec00204 	addi	sp,sp,8
 1804608:	f800283a 	ret

0180460c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 180460c:	defff804 	addi	sp,sp,-32
 1804610:	dfc00715 	stw	ra,28(sp)
 1804614:	df000615 	stw	fp,24(sp)
 1804618:	df000604 	addi	fp,sp,24
 180461c:	e13ffc15 	stw	r4,-16(fp)
 1804620:	e17ffd15 	stw	r5,-12(fp)
 1804624:	e1bffe15 	stw	r6,-8(fp)
 1804628:	e1ffff15 	stw	r7,-4(fp)
 180462c:	e0bfff17 	ldw	r2,-4(fp)
 1804630:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1804634:	00806074 	movhi	r2,385
 1804638:	10a39604 	addi	r2,r2,-29096
 180463c:	10800017 	ldw	r2,0(r2)
 1804640:	1000041e 	bne	r2,zero,1804654 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 1804644:	00806074 	movhi	r2,385
 1804648:	10a39604 	addi	r2,r2,-29096
 180464c:	e0fffb17 	ldw	r3,-20(fp)
 1804650:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1804654:	e0bffc17 	ldw	r2,-16(fp)
 1804658:	10800104 	addi	r2,r2,4
 180465c:	00c001c4 	movi	r3,7
 1804660:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1804664:	d8000015 	stw	zero,0(sp)
 1804668:	e1fffc17 	ldw	r7,-16(fp)
 180466c:	01806034 	movhi	r6,384
 1804670:	31916504 	addi	r6,r6,17812
 1804674:	e17ffe17 	ldw	r5,-8(fp)
 1804678:	e13ffd17 	ldw	r4,-12(fp)
 180467c:	18049e00 	call	18049e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1804680:	0001883a 	nop
 1804684:	e037883a 	mov	sp,fp
 1804688:	dfc00117 	ldw	ra,4(sp)
 180468c:	df000017 	ldw	fp,0(sp)
 1804690:	dec00204 	addi	sp,sp,8
 1804694:	f800283a 	ret

01804698 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1804698:	defff504 	addi	sp,sp,-44
 180469c:	df000a15 	stw	fp,40(sp)
 18046a0:	df000a04 	addi	fp,sp,40
 18046a4:	e13ffc15 	stw	r4,-16(fp)
 18046a8:	e17ffd15 	stw	r5,-12(fp)
 18046ac:	e1bffe15 	stw	r6,-8(fp)
 18046b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 18046b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 18046b8:	00806074 	movhi	r2,385
 18046bc:	10a39604 	addi	r2,r2,-29096
 18046c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 18046c4:	10003f26 	beq	r2,zero,18047c4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 18046c8:	e0bffc17 	ldw	r2,-16(fp)
 18046cc:	10003b26 	beq	r2,zero,18047bc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 18046d0:	e0bffc17 	ldw	r2,-16(fp)
 18046d4:	e0fffe17 	ldw	r3,-8(fp)
 18046d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 18046dc:	e0bffc17 	ldw	r2,-16(fp)
 18046e0:	e0ffff17 	ldw	r3,-4(fp)
 18046e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18046e8:	0005303a 	rdctl	r2,status
 18046ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18046f0:	e0fff917 	ldw	r3,-28(fp)
 18046f4:	00bfff84 	movi	r2,-2
 18046f8:	1884703a 	and	r2,r3,r2
 18046fc:	1001703a 	wrctl	status,r2
  
  return context;
 1804700:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1804704:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1804708:	00806074 	movhi	r2,385
 180470c:	10a39704 	addi	r2,r2,-29092
 1804710:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1804714:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1804718:	e0fffd17 	ldw	r3,-12(fp)
 180471c:	e0bff617 	ldw	r2,-40(fp)
 1804720:	1885883a 	add	r2,r3,r2
 1804724:	10c00044 	addi	r3,r2,1
 1804728:	e0bffc17 	ldw	r2,-16(fp)
 180472c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1804730:	e0bffc17 	ldw	r2,-16(fp)
 1804734:	10c00217 	ldw	r3,8(r2)
 1804738:	e0bff617 	ldw	r2,-40(fp)
 180473c:	1880042e 	bgeu	r3,r2,1804750 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 1804740:	e0bffc17 	ldw	r2,-16(fp)
 1804744:	00c00044 	movi	r3,1
 1804748:	10c00405 	stb	r3,16(r2)
 180474c:	00000206 	br	1804758 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 1804750:	e0bffc17 	ldw	r2,-16(fp)
 1804754:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1804758:	e0fffc17 	ldw	r3,-16(fp)
 180475c:	00806034 	movhi	r2,384
 1804760:	109cf104 	addi	r2,r2,29636
 1804764:	e0bffa15 	stw	r2,-24(fp)
 1804768:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 180476c:	e0bffb17 	ldw	r2,-20(fp)
 1804770:	e0fffa17 	ldw	r3,-24(fp)
 1804774:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1804778:	e0bffa17 	ldw	r2,-24(fp)
 180477c:	10c00017 	ldw	r3,0(r2)
 1804780:	e0bffb17 	ldw	r2,-20(fp)
 1804784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1804788:	e0bffa17 	ldw	r2,-24(fp)
 180478c:	10800017 	ldw	r2,0(r2)
 1804790:	e0fffb17 	ldw	r3,-20(fp)
 1804794:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1804798:	e0bffa17 	ldw	r2,-24(fp)
 180479c:	e0fffb17 	ldw	r3,-20(fp)
 18047a0:	10c00015 	stw	r3,0(r2)
 18047a4:	e0bff817 	ldw	r2,-32(fp)
 18047a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18047ac:	e0bff717 	ldw	r2,-36(fp)
 18047b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 18047b4:	0005883a 	mov	r2,zero
 18047b8:	00000306 	br	18047c8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 18047bc:	00bffa84 	movi	r2,-22
 18047c0:	00000106 	br	18047c8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 18047c4:	00bfde84 	movi	r2,-134
  }
}
 18047c8:	e037883a 	mov	sp,fp
 18047cc:	df000017 	ldw	fp,0(sp)
 18047d0:	dec00104 	addi	sp,sp,4
 18047d4:	f800283a 	ret

018047d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 18047d8:	deffff04 	addi	sp,sp,-4
 18047dc:	df000015 	stw	fp,0(sp)
 18047e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 18047e4:	0001883a 	nop
 18047e8:	e037883a 	mov	sp,fp
 18047ec:	df000017 	ldw	fp,0(sp)
 18047f0:	dec00104 	addi	sp,sp,4
 18047f4:	f800283a 	ret

018047f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18047f8:	defffe04 	addi	sp,sp,-8
 18047fc:	dfc00115 	stw	ra,4(sp)
 1804800:	df000015 	stw	fp,0(sp)
 1804804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1804808:	00806034 	movhi	r2,384
 180480c:	109cee04 	addi	r2,r2,29624
 1804810:	10800017 	ldw	r2,0(r2)
 1804814:	10000526 	beq	r2,zero,180482c <alt_get_errno+0x34>
 1804818:	00806034 	movhi	r2,384
 180481c:	109cee04 	addi	r2,r2,29624
 1804820:	10800017 	ldw	r2,0(r2)
 1804824:	103ee83a 	callr	r2
 1804828:	00000206 	br	1804834 <alt_get_errno+0x3c>
 180482c:	00806074 	movhi	r2,385
 1804830:	10a39104 	addi	r2,r2,-29116
}
 1804834:	e037883a 	mov	sp,fp
 1804838:	dfc00117 	ldw	ra,4(sp)
 180483c:	df000017 	ldw	fp,0(sp)
 1804840:	dec00204 	addi	sp,sp,8
 1804844:	f800283a 	ret

01804848 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1804848:	defffa04 	addi	sp,sp,-24
 180484c:	dfc00515 	stw	ra,20(sp)
 1804850:	df000415 	stw	fp,16(sp)
 1804854:	df000404 	addi	fp,sp,16
 1804858:	e13ffe15 	stw	r4,-8(fp)
 180485c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1804860:	e0bffe17 	ldw	r2,-8(fp)
 1804864:	10000326 	beq	r2,zero,1804874 <alt_dev_llist_insert+0x2c>
 1804868:	e0bffe17 	ldw	r2,-8(fp)
 180486c:	10800217 	ldw	r2,8(r2)
 1804870:	1000061e 	bne	r2,zero,180488c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1804874:	18047f80 	call	18047f8 <alt_get_errno>
 1804878:	1007883a 	mov	r3,r2
 180487c:	00800584 	movi	r2,22
 1804880:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1804884:	00bffa84 	movi	r2,-22
 1804888:	00001306 	br	18048d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 180488c:	e0bffe17 	ldw	r2,-8(fp)
 1804890:	e0ffff17 	ldw	r3,-4(fp)
 1804894:	e0fffc15 	stw	r3,-16(fp)
 1804898:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 180489c:	e0bffd17 	ldw	r2,-12(fp)
 18048a0:	e0fffc17 	ldw	r3,-16(fp)
 18048a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 18048a8:	e0bffc17 	ldw	r2,-16(fp)
 18048ac:	10c00017 	ldw	r3,0(r2)
 18048b0:	e0bffd17 	ldw	r2,-12(fp)
 18048b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 18048b8:	e0bffc17 	ldw	r2,-16(fp)
 18048bc:	10800017 	ldw	r2,0(r2)
 18048c0:	e0fffd17 	ldw	r3,-12(fp)
 18048c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 18048c8:	e0bffc17 	ldw	r2,-16(fp)
 18048cc:	e0fffd17 	ldw	r3,-12(fp)
 18048d0:	10c00015 	stw	r3,0(r2)

  return 0;  
 18048d4:	0005883a 	mov	r2,zero
}
 18048d8:	e037883a 	mov	sp,fp
 18048dc:	dfc00117 	ldw	ra,4(sp)
 18048e0:	df000017 	ldw	fp,0(sp)
 18048e4:	dec00204 	addi	sp,sp,8
 18048e8:	f800283a 	ret

018048ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 18048ec:	defffd04 	addi	sp,sp,-12
 18048f0:	dfc00215 	stw	ra,8(sp)
 18048f4:	df000115 	stw	fp,4(sp)
 18048f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 18048fc:	00806034 	movhi	r2,384
 1804900:	10964504 	addi	r2,r2,22804
 1804904:	e0bfff15 	stw	r2,-4(fp)
 1804908:	00000606 	br	1804924 <_do_ctors+0x38>
        (*ctor) (); 
 180490c:	e0bfff17 	ldw	r2,-4(fp)
 1804910:	10800017 	ldw	r2,0(r2)
 1804914:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1804918:	e0bfff17 	ldw	r2,-4(fp)
 180491c:	10bfff04 	addi	r2,r2,-4
 1804920:	e0bfff15 	stw	r2,-4(fp)
 1804924:	e0ffff17 	ldw	r3,-4(fp)
 1804928:	00806034 	movhi	r2,384
 180492c:	10964604 	addi	r2,r2,22808
 1804930:	18bff62e 	bgeu	r3,r2,180490c <__alt_data_end+0xff80490c>
        (*ctor) (); 
}
 1804934:	0001883a 	nop
 1804938:	e037883a 	mov	sp,fp
 180493c:	dfc00117 	ldw	ra,4(sp)
 1804940:	df000017 	ldw	fp,0(sp)
 1804944:	dec00204 	addi	sp,sp,8
 1804948:	f800283a 	ret

0180494c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 180494c:	defffd04 	addi	sp,sp,-12
 1804950:	dfc00215 	stw	ra,8(sp)
 1804954:	df000115 	stw	fp,4(sp)
 1804958:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 180495c:	00806034 	movhi	r2,384
 1804960:	10964504 	addi	r2,r2,22804
 1804964:	e0bfff15 	stw	r2,-4(fp)
 1804968:	00000606 	br	1804984 <_do_dtors+0x38>
        (*dtor) (); 
 180496c:	e0bfff17 	ldw	r2,-4(fp)
 1804970:	10800017 	ldw	r2,0(r2)
 1804974:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1804978:	e0bfff17 	ldw	r2,-4(fp)
 180497c:	10bfff04 	addi	r2,r2,-4
 1804980:	e0bfff15 	stw	r2,-4(fp)
 1804984:	e0ffff17 	ldw	r3,-4(fp)
 1804988:	00806034 	movhi	r2,384
 180498c:	10964604 	addi	r2,r2,22808
 1804990:	18bff62e 	bgeu	r3,r2,180496c <__alt_data_end+0xff80496c>
        (*dtor) (); 
}
 1804994:	0001883a 	nop
 1804998:	e037883a 	mov	sp,fp
 180499c:	dfc00117 	ldw	ra,4(sp)
 18049a0:	df000017 	ldw	fp,0(sp)
 18049a4:	dec00204 	addi	sp,sp,8
 18049a8:	f800283a 	ret

018049ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 18049ac:	defffe04 	addi	sp,sp,-8
 18049b0:	dfc00115 	stw	ra,4(sp)
 18049b4:	df000015 	stw	fp,0(sp)
 18049b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 18049bc:	01480004 	movi	r5,8192
 18049c0:	0009883a 	mov	r4,zero
 18049c4:	18054f40 	call	18054f4 <alt_icache_flush>
#endif
}
 18049c8:	0001883a 	nop
 18049cc:	e037883a 	mov	sp,fp
 18049d0:	dfc00117 	ldw	ra,4(sp)
 18049d4:	df000017 	ldw	fp,0(sp)
 18049d8:	dec00204 	addi	sp,sp,8
 18049dc:	f800283a 	ret

018049e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 18049e0:	defff904 	addi	sp,sp,-28
 18049e4:	dfc00615 	stw	ra,24(sp)
 18049e8:	df000515 	stw	fp,20(sp)
 18049ec:	df000504 	addi	fp,sp,20
 18049f0:	e13ffc15 	stw	r4,-16(fp)
 18049f4:	e17ffd15 	stw	r5,-12(fp)
 18049f8:	e1bffe15 	stw	r6,-8(fp)
 18049fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1804a00:	e0800217 	ldw	r2,8(fp)
 1804a04:	d8800015 	stw	r2,0(sp)
 1804a08:	e1ffff17 	ldw	r7,-4(fp)
 1804a0c:	e1bffe17 	ldw	r6,-8(fp)
 1804a10:	e17ffd17 	ldw	r5,-12(fp)
 1804a14:	e13ffc17 	ldw	r4,-16(fp)
 1804a18:	1804bc00 	call	1804bc0 <alt_iic_isr_register>
}  
 1804a1c:	e037883a 	mov	sp,fp
 1804a20:	dfc00117 	ldw	ra,4(sp)
 1804a24:	df000017 	ldw	fp,0(sp)
 1804a28:	dec00204 	addi	sp,sp,8
 1804a2c:	f800283a 	ret

01804a30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1804a30:	defff904 	addi	sp,sp,-28
 1804a34:	df000615 	stw	fp,24(sp)
 1804a38:	df000604 	addi	fp,sp,24
 1804a3c:	e13ffe15 	stw	r4,-8(fp)
 1804a40:	e17fff15 	stw	r5,-4(fp)
 1804a44:	e0bfff17 	ldw	r2,-4(fp)
 1804a48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1804a4c:	0005303a 	rdctl	r2,status
 1804a50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1804a54:	e0fffb17 	ldw	r3,-20(fp)
 1804a58:	00bfff84 	movi	r2,-2
 1804a5c:	1884703a 	and	r2,r3,r2
 1804a60:	1001703a 	wrctl	status,r2
  
  return context;
 1804a64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1804a68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1804a6c:	00c00044 	movi	r3,1
 1804a70:	e0bffa17 	ldw	r2,-24(fp)
 1804a74:	1884983a 	sll	r2,r3,r2
 1804a78:	1007883a 	mov	r3,r2
 1804a7c:	00806074 	movhi	r2,385
 1804a80:	10a39504 	addi	r2,r2,-29100
 1804a84:	10800017 	ldw	r2,0(r2)
 1804a88:	1886b03a 	or	r3,r3,r2
 1804a8c:	00806074 	movhi	r2,385
 1804a90:	10a39504 	addi	r2,r2,-29100
 1804a94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1804a98:	00806074 	movhi	r2,385
 1804a9c:	10a39504 	addi	r2,r2,-29100
 1804aa0:	10800017 	ldw	r2,0(r2)
 1804aa4:	100170fa 	wrctl	ienable,r2
 1804aa8:	e0bffc17 	ldw	r2,-16(fp)
 1804aac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1804ab0:	e0bffd17 	ldw	r2,-12(fp)
 1804ab4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1804ab8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1804abc:	0001883a 	nop
}
 1804ac0:	e037883a 	mov	sp,fp
 1804ac4:	df000017 	ldw	fp,0(sp)
 1804ac8:	dec00104 	addi	sp,sp,4
 1804acc:	f800283a 	ret

01804ad0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1804ad0:	defff904 	addi	sp,sp,-28
 1804ad4:	df000615 	stw	fp,24(sp)
 1804ad8:	df000604 	addi	fp,sp,24
 1804adc:	e13ffe15 	stw	r4,-8(fp)
 1804ae0:	e17fff15 	stw	r5,-4(fp)
 1804ae4:	e0bfff17 	ldw	r2,-4(fp)
 1804ae8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1804aec:	0005303a 	rdctl	r2,status
 1804af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1804af4:	e0fffb17 	ldw	r3,-20(fp)
 1804af8:	00bfff84 	movi	r2,-2
 1804afc:	1884703a 	and	r2,r3,r2
 1804b00:	1001703a 	wrctl	status,r2
  
  return context;
 1804b04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1804b08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1804b0c:	00c00044 	movi	r3,1
 1804b10:	e0bffa17 	ldw	r2,-24(fp)
 1804b14:	1884983a 	sll	r2,r3,r2
 1804b18:	0084303a 	nor	r2,zero,r2
 1804b1c:	1007883a 	mov	r3,r2
 1804b20:	00806074 	movhi	r2,385
 1804b24:	10a39504 	addi	r2,r2,-29100
 1804b28:	10800017 	ldw	r2,0(r2)
 1804b2c:	1886703a 	and	r3,r3,r2
 1804b30:	00806074 	movhi	r2,385
 1804b34:	10a39504 	addi	r2,r2,-29100
 1804b38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1804b3c:	00806074 	movhi	r2,385
 1804b40:	10a39504 	addi	r2,r2,-29100
 1804b44:	10800017 	ldw	r2,0(r2)
 1804b48:	100170fa 	wrctl	ienable,r2
 1804b4c:	e0bffc17 	ldw	r2,-16(fp)
 1804b50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1804b54:	e0bffd17 	ldw	r2,-12(fp)
 1804b58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1804b5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1804b60:	0001883a 	nop
}
 1804b64:	e037883a 	mov	sp,fp
 1804b68:	df000017 	ldw	fp,0(sp)
 1804b6c:	dec00104 	addi	sp,sp,4
 1804b70:	f800283a 	ret

01804b74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1804b74:	defffc04 	addi	sp,sp,-16
 1804b78:	df000315 	stw	fp,12(sp)
 1804b7c:	df000304 	addi	fp,sp,12
 1804b80:	e13ffe15 	stw	r4,-8(fp)
 1804b84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1804b88:	000530fa 	rdctl	r2,ienable
 1804b8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1804b90:	00c00044 	movi	r3,1
 1804b94:	e0bfff17 	ldw	r2,-4(fp)
 1804b98:	1884983a 	sll	r2,r3,r2
 1804b9c:	1007883a 	mov	r3,r2
 1804ba0:	e0bffd17 	ldw	r2,-12(fp)
 1804ba4:	1884703a 	and	r2,r3,r2
 1804ba8:	1004c03a 	cmpne	r2,r2,zero
 1804bac:	10803fcc 	andi	r2,r2,255
}
 1804bb0:	e037883a 	mov	sp,fp
 1804bb4:	df000017 	ldw	fp,0(sp)
 1804bb8:	dec00104 	addi	sp,sp,4
 1804bbc:	f800283a 	ret

01804bc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1804bc0:	defff504 	addi	sp,sp,-44
 1804bc4:	dfc00a15 	stw	ra,40(sp)
 1804bc8:	df000915 	stw	fp,36(sp)
 1804bcc:	df000904 	addi	fp,sp,36
 1804bd0:	e13ffc15 	stw	r4,-16(fp)
 1804bd4:	e17ffd15 	stw	r5,-12(fp)
 1804bd8:	e1bffe15 	stw	r6,-8(fp)
 1804bdc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1804be0:	00bffa84 	movi	r2,-22
 1804be4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1804be8:	e0bffd17 	ldw	r2,-12(fp)
 1804bec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1804bf0:	e0bff817 	ldw	r2,-32(fp)
 1804bf4:	10800808 	cmpgei	r2,r2,32
 1804bf8:	1000271e 	bne	r2,zero,1804c98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1804bfc:	0005303a 	rdctl	r2,status
 1804c00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1804c04:	e0fffb17 	ldw	r3,-20(fp)
 1804c08:	00bfff84 	movi	r2,-2
 1804c0c:	1884703a 	and	r2,r3,r2
 1804c10:	1001703a 	wrctl	status,r2
  
  return context;
 1804c14:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1804c18:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1804c1c:	00806074 	movhi	r2,385
 1804c20:	10a3a204 	addi	r2,r2,-29048
 1804c24:	e0fff817 	ldw	r3,-32(fp)
 1804c28:	180690fa 	slli	r3,r3,3
 1804c2c:	10c5883a 	add	r2,r2,r3
 1804c30:	e0fffe17 	ldw	r3,-8(fp)
 1804c34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1804c38:	00806074 	movhi	r2,385
 1804c3c:	10a3a204 	addi	r2,r2,-29048
 1804c40:	e0fff817 	ldw	r3,-32(fp)
 1804c44:	180690fa 	slli	r3,r3,3
 1804c48:	10c5883a 	add	r2,r2,r3
 1804c4c:	10800104 	addi	r2,r2,4
 1804c50:	e0ffff17 	ldw	r3,-4(fp)
 1804c54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1804c58:	e0bffe17 	ldw	r2,-8(fp)
 1804c5c:	10000526 	beq	r2,zero,1804c74 <alt_iic_isr_register+0xb4>
 1804c60:	e0bff817 	ldw	r2,-32(fp)
 1804c64:	100b883a 	mov	r5,r2
 1804c68:	e13ffc17 	ldw	r4,-16(fp)
 1804c6c:	1804a300 	call	1804a30 <alt_ic_irq_enable>
 1804c70:	00000406 	br	1804c84 <alt_iic_isr_register+0xc4>
 1804c74:	e0bff817 	ldw	r2,-32(fp)
 1804c78:	100b883a 	mov	r5,r2
 1804c7c:	e13ffc17 	ldw	r4,-16(fp)
 1804c80:	1804ad00 	call	1804ad0 <alt_ic_irq_disable>
 1804c84:	e0bff715 	stw	r2,-36(fp)
 1804c88:	e0bffa17 	ldw	r2,-24(fp)
 1804c8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1804c90:	e0bff917 	ldw	r2,-28(fp)
 1804c94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1804c98:	e0bff717 	ldw	r2,-36(fp)
}
 1804c9c:	e037883a 	mov	sp,fp
 1804ca0:	dfc00117 	ldw	ra,4(sp)
 1804ca4:	df000017 	ldw	fp,0(sp)
 1804ca8:	dec00204 	addi	sp,sp,8
 1804cac:	f800283a 	ret

01804cb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1804cb0:	defff804 	addi	sp,sp,-32
 1804cb4:	dfc00715 	stw	ra,28(sp)
 1804cb8:	df000615 	stw	fp,24(sp)
 1804cbc:	dc000515 	stw	r16,20(sp)
 1804cc0:	df000604 	addi	fp,sp,24
 1804cc4:	e13ffb15 	stw	r4,-20(fp)
 1804cc8:	e17ffc15 	stw	r5,-16(fp)
 1804ccc:	e1bffd15 	stw	r6,-12(fp)
 1804cd0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 1804cd4:	e1bffe17 	ldw	r6,-8(fp)
 1804cd8:	e17ffd17 	ldw	r5,-12(fp)
 1804cdc:	e13ffc17 	ldw	r4,-16(fp)
 1804ce0:	1804f540 	call	1804f54 <open>
 1804ce4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1804ce8:	e0bffa17 	ldw	r2,-24(fp)
 1804cec:	10002216 	blt	r2,zero,1804d78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1804cf0:	04006034 	movhi	r16,384
 1804cf4:	84186d04 	addi	r16,r16,25012
 1804cf8:	e0bffa17 	ldw	r2,-24(fp)
 1804cfc:	01400304 	movi	r5,12
 1804d00:	1009883a 	mov	r4,r2
 1804d04:	18030140 	call	1803014 <__mulsi3>
 1804d08:	8085883a 	add	r2,r16,r2
 1804d0c:	10c00017 	ldw	r3,0(r2)
 1804d10:	e0bffb17 	ldw	r2,-20(fp)
 1804d14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1804d18:	04006034 	movhi	r16,384
 1804d1c:	84186d04 	addi	r16,r16,25012
 1804d20:	e0bffa17 	ldw	r2,-24(fp)
 1804d24:	01400304 	movi	r5,12
 1804d28:	1009883a 	mov	r4,r2
 1804d2c:	18030140 	call	1803014 <__mulsi3>
 1804d30:	8085883a 	add	r2,r16,r2
 1804d34:	10800104 	addi	r2,r2,4
 1804d38:	10c00017 	ldw	r3,0(r2)
 1804d3c:	e0bffb17 	ldw	r2,-20(fp)
 1804d40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1804d44:	04006034 	movhi	r16,384
 1804d48:	84186d04 	addi	r16,r16,25012
 1804d4c:	e0bffa17 	ldw	r2,-24(fp)
 1804d50:	01400304 	movi	r5,12
 1804d54:	1009883a 	mov	r4,r2
 1804d58:	18030140 	call	1803014 <__mulsi3>
 1804d5c:	8085883a 	add	r2,r16,r2
 1804d60:	10800204 	addi	r2,r2,8
 1804d64:	10c00017 	ldw	r3,0(r2)
 1804d68:	e0bffb17 	ldw	r2,-20(fp)
 1804d6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1804d70:	e13ffa17 	ldw	r4,-24(fp)
 1804d74:	18037c40 	call	18037c4 <alt_release_fd>
  }
} 
 1804d78:	0001883a 	nop
 1804d7c:	e6ffff04 	addi	sp,fp,-4
 1804d80:	dfc00217 	ldw	ra,8(sp)
 1804d84:	df000117 	ldw	fp,4(sp)
 1804d88:	dc000017 	ldw	r16,0(sp)
 1804d8c:	dec00304 	addi	sp,sp,12
 1804d90:	f800283a 	ret

01804d94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1804d94:	defffb04 	addi	sp,sp,-20
 1804d98:	dfc00415 	stw	ra,16(sp)
 1804d9c:	df000315 	stw	fp,12(sp)
 1804da0:	df000304 	addi	fp,sp,12
 1804da4:	e13ffd15 	stw	r4,-12(fp)
 1804da8:	e17ffe15 	stw	r5,-8(fp)
 1804dac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1804db0:	01c07fc4 	movi	r7,511
 1804db4:	01800044 	movi	r6,1
 1804db8:	e17ffd17 	ldw	r5,-12(fp)
 1804dbc:	01006034 	movhi	r4,384
 1804dc0:	21187004 	addi	r4,r4,25024
 1804dc4:	1804cb00 	call	1804cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1804dc8:	01c07fc4 	movi	r7,511
 1804dcc:	000d883a 	mov	r6,zero
 1804dd0:	e17ffe17 	ldw	r5,-8(fp)
 1804dd4:	01006034 	movhi	r4,384
 1804dd8:	21186d04 	addi	r4,r4,25012
 1804ddc:	1804cb00 	call	1804cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1804de0:	01c07fc4 	movi	r7,511
 1804de4:	01800044 	movi	r6,1
 1804de8:	e17fff17 	ldw	r5,-4(fp)
 1804dec:	01006034 	movhi	r4,384
 1804df0:	21187304 	addi	r4,r4,25036
 1804df4:	1804cb00 	call	1804cb0 <alt_open_fd>
}  
 1804df8:	0001883a 	nop
 1804dfc:	e037883a 	mov	sp,fp
 1804e00:	dfc00117 	ldw	ra,4(sp)
 1804e04:	df000017 	ldw	fp,0(sp)
 1804e08:	dec00204 	addi	sp,sp,8
 1804e0c:	f800283a 	ret

01804e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1804e10:	defffe04 	addi	sp,sp,-8
 1804e14:	dfc00115 	stw	ra,4(sp)
 1804e18:	df000015 	stw	fp,0(sp)
 1804e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1804e20:	00806034 	movhi	r2,384
 1804e24:	109cee04 	addi	r2,r2,29624
 1804e28:	10800017 	ldw	r2,0(r2)
 1804e2c:	10000526 	beq	r2,zero,1804e44 <alt_get_errno+0x34>
 1804e30:	00806034 	movhi	r2,384
 1804e34:	109cee04 	addi	r2,r2,29624
 1804e38:	10800017 	ldw	r2,0(r2)
 1804e3c:	103ee83a 	callr	r2
 1804e40:	00000206 	br	1804e4c <alt_get_errno+0x3c>
 1804e44:	00806074 	movhi	r2,385
 1804e48:	10a39104 	addi	r2,r2,-29116
}
 1804e4c:	e037883a 	mov	sp,fp
 1804e50:	dfc00117 	ldw	ra,4(sp)
 1804e54:	df000017 	ldw	fp,0(sp)
 1804e58:	dec00204 	addi	sp,sp,8
 1804e5c:	f800283a 	ret

01804e60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1804e60:	defffb04 	addi	sp,sp,-20
 1804e64:	dfc00415 	stw	ra,16(sp)
 1804e68:	df000315 	stw	fp,12(sp)
 1804e6c:	dc000215 	stw	r16,8(sp)
 1804e70:	df000304 	addi	fp,sp,12
 1804e74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1804e78:	e0bffe17 	ldw	r2,-8(fp)
 1804e7c:	10800217 	ldw	r2,8(r2)
 1804e80:	10d00034 	orhi	r3,r2,16384
 1804e84:	e0bffe17 	ldw	r2,-8(fp)
 1804e88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1804e8c:	e03ffd15 	stw	zero,-12(fp)
 1804e90:	00002306 	br	1804f20 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1804e94:	04006034 	movhi	r16,384
 1804e98:	84186d04 	addi	r16,r16,25012
 1804e9c:	e0bffd17 	ldw	r2,-12(fp)
 1804ea0:	01400304 	movi	r5,12
 1804ea4:	1009883a 	mov	r4,r2
 1804ea8:	18030140 	call	1803014 <__mulsi3>
 1804eac:	8085883a 	add	r2,r16,r2
 1804eb0:	10c00017 	ldw	r3,0(r2)
 1804eb4:	e0bffe17 	ldw	r2,-8(fp)
 1804eb8:	10800017 	ldw	r2,0(r2)
 1804ebc:	1880151e 	bne	r3,r2,1804f14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1804ec0:	04006034 	movhi	r16,384
 1804ec4:	84186d04 	addi	r16,r16,25012
 1804ec8:	e0bffd17 	ldw	r2,-12(fp)
 1804ecc:	01400304 	movi	r5,12
 1804ed0:	1009883a 	mov	r4,r2
 1804ed4:	18030140 	call	1803014 <__mulsi3>
 1804ed8:	8085883a 	add	r2,r16,r2
 1804edc:	10800204 	addi	r2,r2,8
 1804ee0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1804ee4:	10000b0e 	bge	r2,zero,1804f14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1804ee8:	01400304 	movi	r5,12
 1804eec:	e13ffd17 	ldw	r4,-12(fp)
 1804ef0:	18030140 	call	1803014 <__mulsi3>
 1804ef4:	1007883a 	mov	r3,r2
 1804ef8:	00806034 	movhi	r2,384
 1804efc:	10986d04 	addi	r2,r2,25012
 1804f00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1804f04:	e0bffe17 	ldw	r2,-8(fp)
 1804f08:	18800226 	beq	r3,r2,1804f14 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1804f0c:	00bffcc4 	movi	r2,-13
 1804f10:	00000a06 	br	1804f3c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1804f14:	e0bffd17 	ldw	r2,-12(fp)
 1804f18:	10800044 	addi	r2,r2,1
 1804f1c:	e0bffd15 	stw	r2,-12(fp)
 1804f20:	00806034 	movhi	r2,384
 1804f24:	109ced04 	addi	r2,r2,29620
 1804f28:	10800017 	ldw	r2,0(r2)
 1804f2c:	1007883a 	mov	r3,r2
 1804f30:	e0bffd17 	ldw	r2,-12(fp)
 1804f34:	18bfd72e 	bgeu	r3,r2,1804e94 <__alt_data_end+0xff804e94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1804f38:	0005883a 	mov	r2,zero
}
 1804f3c:	e6ffff04 	addi	sp,fp,-4
 1804f40:	dfc00217 	ldw	ra,8(sp)
 1804f44:	df000117 	ldw	fp,4(sp)
 1804f48:	dc000017 	ldw	r16,0(sp)
 1804f4c:	dec00304 	addi	sp,sp,12
 1804f50:	f800283a 	ret

01804f54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1804f54:	defff604 	addi	sp,sp,-40
 1804f58:	dfc00915 	stw	ra,36(sp)
 1804f5c:	df000815 	stw	fp,32(sp)
 1804f60:	df000804 	addi	fp,sp,32
 1804f64:	e13ffd15 	stw	r4,-12(fp)
 1804f68:	e17ffe15 	stw	r5,-8(fp)
 1804f6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1804f70:	00bfffc4 	movi	r2,-1
 1804f74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1804f78:	00bffb44 	movi	r2,-19
 1804f7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1804f80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1804f84:	01406034 	movhi	r5,384
 1804f88:	295ceb04 	addi	r5,r5,29612
 1804f8c:	e13ffd17 	ldw	r4,-12(fp)
 1804f90:	180527c0 	call	180527c <alt_find_dev>
 1804f94:	e0bff815 	stw	r2,-32(fp)
 1804f98:	e0bff817 	ldw	r2,-32(fp)
 1804f9c:	1000051e 	bne	r2,zero,1804fb4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1804fa0:	e13ffd17 	ldw	r4,-12(fp)
 1804fa4:	180530c0 	call	180530c <alt_find_file>
 1804fa8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1804fac:	00800044 	movi	r2,1
 1804fb0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1804fb4:	e0bff817 	ldw	r2,-32(fp)
 1804fb8:	10002b26 	beq	r2,zero,1805068 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1804fbc:	e13ff817 	ldw	r4,-32(fp)
 1804fc0:	18054200 	call	1805420 <alt_get_fd>
 1804fc4:	e0bff915 	stw	r2,-28(fp)
 1804fc8:	e0bff917 	ldw	r2,-28(fp)
 1804fcc:	1000030e 	bge	r2,zero,1804fdc <open+0x88>
    {
      status = index;
 1804fd0:	e0bff917 	ldw	r2,-28(fp)
 1804fd4:	e0bffa15 	stw	r2,-24(fp)
 1804fd8:	00002506 	br	1805070 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1804fdc:	01400304 	movi	r5,12
 1804fe0:	e13ff917 	ldw	r4,-28(fp)
 1804fe4:	18030140 	call	1803014 <__mulsi3>
 1804fe8:	1007883a 	mov	r3,r2
 1804fec:	00806034 	movhi	r2,384
 1804ff0:	10986d04 	addi	r2,r2,25012
 1804ff4:	1885883a 	add	r2,r3,r2
 1804ff8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1804ffc:	e0fffe17 	ldw	r3,-8(fp)
 1805000:	00900034 	movhi	r2,16384
 1805004:	10bfffc4 	addi	r2,r2,-1
 1805008:	1886703a 	and	r3,r3,r2
 180500c:	e0bffc17 	ldw	r2,-16(fp)
 1805010:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1805014:	e0bffb17 	ldw	r2,-20(fp)
 1805018:	1000051e 	bne	r2,zero,1805030 <open+0xdc>
 180501c:	e13ffc17 	ldw	r4,-16(fp)
 1805020:	1804e600 	call	1804e60 <alt_file_locked>
 1805024:	e0bffa15 	stw	r2,-24(fp)
 1805028:	e0bffa17 	ldw	r2,-24(fp)
 180502c:	10001016 	blt	r2,zero,1805070 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1805030:	e0bff817 	ldw	r2,-32(fp)
 1805034:	10800317 	ldw	r2,12(r2)
 1805038:	10000826 	beq	r2,zero,180505c <open+0x108>
 180503c:	e0bff817 	ldw	r2,-32(fp)
 1805040:	10800317 	ldw	r2,12(r2)
 1805044:	e1ffff17 	ldw	r7,-4(fp)
 1805048:	e1bffe17 	ldw	r6,-8(fp)
 180504c:	e17ffd17 	ldw	r5,-12(fp)
 1805050:	e13ffc17 	ldw	r4,-16(fp)
 1805054:	103ee83a 	callr	r2
 1805058:	00000106 	br	1805060 <open+0x10c>
 180505c:	0005883a 	mov	r2,zero
 1805060:	e0bffa15 	stw	r2,-24(fp)
 1805064:	00000206 	br	1805070 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1805068:	00bffb44 	movi	r2,-19
 180506c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1805070:	e0bffa17 	ldw	r2,-24(fp)
 1805074:	1000090e 	bge	r2,zero,180509c <open+0x148>
  {
    alt_release_fd (index);  
 1805078:	e13ff917 	ldw	r4,-28(fp)
 180507c:	18037c40 	call	18037c4 <alt_release_fd>
    ALT_ERRNO = -status;
 1805080:	1804e100 	call	1804e10 <alt_get_errno>
 1805084:	1007883a 	mov	r3,r2
 1805088:	e0bffa17 	ldw	r2,-24(fp)
 180508c:	0085c83a 	sub	r2,zero,r2
 1805090:	18800015 	stw	r2,0(r3)
    return -1;
 1805094:	00bfffc4 	movi	r2,-1
 1805098:	00000106 	br	18050a0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 180509c:	e0bff917 	ldw	r2,-28(fp)
}
 18050a0:	e037883a 	mov	sp,fp
 18050a4:	dfc00117 	ldw	ra,4(sp)
 18050a8:	df000017 	ldw	fp,0(sp)
 18050ac:	dec00204 	addi	sp,sp,8
 18050b0:	f800283a 	ret

018050b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 18050b4:	defffa04 	addi	sp,sp,-24
 18050b8:	df000515 	stw	fp,20(sp)
 18050bc:	df000504 	addi	fp,sp,20
 18050c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18050c4:	0005303a 	rdctl	r2,status
 18050c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18050cc:	e0fffc17 	ldw	r3,-16(fp)
 18050d0:	00bfff84 	movi	r2,-2
 18050d4:	1884703a 	and	r2,r3,r2
 18050d8:	1001703a 	wrctl	status,r2
  
  return context;
 18050dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 18050e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 18050e4:	e0bfff17 	ldw	r2,-4(fp)
 18050e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 18050ec:	e0bffd17 	ldw	r2,-12(fp)
 18050f0:	10800017 	ldw	r2,0(r2)
 18050f4:	e0fffd17 	ldw	r3,-12(fp)
 18050f8:	18c00117 	ldw	r3,4(r3)
 18050fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1805100:	e0bffd17 	ldw	r2,-12(fp)
 1805104:	10800117 	ldw	r2,4(r2)
 1805108:	e0fffd17 	ldw	r3,-12(fp)
 180510c:	18c00017 	ldw	r3,0(r3)
 1805110:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1805114:	e0bffd17 	ldw	r2,-12(fp)
 1805118:	e0fffd17 	ldw	r3,-12(fp)
 180511c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1805120:	e0bffd17 	ldw	r2,-12(fp)
 1805124:	e0fffd17 	ldw	r3,-12(fp)
 1805128:	10c00015 	stw	r3,0(r2)
 180512c:	e0bffb17 	ldw	r2,-20(fp)
 1805130:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1805134:	e0bffe17 	ldw	r2,-8(fp)
 1805138:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 180513c:	0001883a 	nop
 1805140:	e037883a 	mov	sp,fp
 1805144:	df000017 	ldw	fp,0(sp)
 1805148:	dec00104 	addi	sp,sp,4
 180514c:	f800283a 	ret

01805150 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1805150:	defffb04 	addi	sp,sp,-20
 1805154:	dfc00415 	stw	ra,16(sp)
 1805158:	df000315 	stw	fp,12(sp)
 180515c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1805160:	d0a00c17 	ldw	r2,-32720(gp)
 1805164:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1805168:	d0a6b217 	ldw	r2,-25912(gp)
 180516c:	10800044 	addi	r2,r2,1
 1805170:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1805174:	00002e06 	br	1805230 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1805178:	e0bffd17 	ldw	r2,-12(fp)
 180517c:	10800017 	ldw	r2,0(r2)
 1805180:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1805184:	e0bffd17 	ldw	r2,-12(fp)
 1805188:	10800403 	ldbu	r2,16(r2)
 180518c:	10803fcc 	andi	r2,r2,255
 1805190:	10000426 	beq	r2,zero,18051a4 <alt_tick+0x54>
 1805194:	d0a6b217 	ldw	r2,-25912(gp)
 1805198:	1000021e 	bne	r2,zero,18051a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 180519c:	e0bffd17 	ldw	r2,-12(fp)
 18051a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 18051a4:	e0bffd17 	ldw	r2,-12(fp)
 18051a8:	10800217 	ldw	r2,8(r2)
 18051ac:	d0e6b217 	ldw	r3,-25912(gp)
 18051b0:	18801d36 	bltu	r3,r2,1805228 <alt_tick+0xd8>
 18051b4:	e0bffd17 	ldw	r2,-12(fp)
 18051b8:	10800403 	ldbu	r2,16(r2)
 18051bc:	10803fcc 	andi	r2,r2,255
 18051c0:	1000191e 	bne	r2,zero,1805228 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 18051c4:	e0bffd17 	ldw	r2,-12(fp)
 18051c8:	10800317 	ldw	r2,12(r2)
 18051cc:	e0fffd17 	ldw	r3,-12(fp)
 18051d0:	18c00517 	ldw	r3,20(r3)
 18051d4:	1809883a 	mov	r4,r3
 18051d8:	103ee83a 	callr	r2
 18051dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 18051e0:	e0bfff17 	ldw	r2,-4(fp)
 18051e4:	1000031e 	bne	r2,zero,18051f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 18051e8:	e13ffd17 	ldw	r4,-12(fp)
 18051ec:	18050b40 	call	18050b4 <alt_alarm_stop>
 18051f0:	00000d06 	br	1805228 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 18051f4:	e0bffd17 	ldw	r2,-12(fp)
 18051f8:	10c00217 	ldw	r3,8(r2)
 18051fc:	e0bfff17 	ldw	r2,-4(fp)
 1805200:	1887883a 	add	r3,r3,r2
 1805204:	e0bffd17 	ldw	r2,-12(fp)
 1805208:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 180520c:	e0bffd17 	ldw	r2,-12(fp)
 1805210:	10c00217 	ldw	r3,8(r2)
 1805214:	d0a6b217 	ldw	r2,-25912(gp)
 1805218:	1880032e 	bgeu	r3,r2,1805228 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 180521c:	e0bffd17 	ldw	r2,-12(fp)
 1805220:	00c00044 	movi	r3,1
 1805224:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1805228:	e0bffe17 	ldw	r2,-8(fp)
 180522c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1805230:	e0fffd17 	ldw	r3,-12(fp)
 1805234:	d0a00c04 	addi	r2,gp,-32720
 1805238:	18bfcf1e 	bne	r3,r2,1805178 <__alt_data_end+0xff805178>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 180523c:	0001883a 	nop
}
 1805240:	0001883a 	nop
 1805244:	e037883a 	mov	sp,fp
 1805248:	dfc00117 	ldw	ra,4(sp)
 180524c:	df000017 	ldw	fp,0(sp)
 1805250:	dec00204 	addi	sp,sp,8
 1805254:	f800283a 	ret

01805258 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1805258:	deffff04 	addi	sp,sp,-4
 180525c:	df000015 	stw	fp,0(sp)
 1805260:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1805264:	000170fa 	wrctl	ienable,zero
}
 1805268:	0001883a 	nop
 180526c:	e037883a 	mov	sp,fp
 1805270:	df000017 	ldw	fp,0(sp)
 1805274:	dec00104 	addi	sp,sp,4
 1805278:	f800283a 	ret

0180527c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 180527c:	defffa04 	addi	sp,sp,-24
 1805280:	dfc00515 	stw	ra,20(sp)
 1805284:	df000415 	stw	fp,16(sp)
 1805288:	df000404 	addi	fp,sp,16
 180528c:	e13ffe15 	stw	r4,-8(fp)
 1805290:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1805294:	e0bfff17 	ldw	r2,-4(fp)
 1805298:	10800017 	ldw	r2,0(r2)
 180529c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 18052a0:	e13ffe17 	ldw	r4,-8(fp)
 18052a4:	18003040 	call	1800304 <strlen>
 18052a8:	10800044 	addi	r2,r2,1
 18052ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 18052b0:	00000d06 	br	18052e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 18052b4:	e0bffc17 	ldw	r2,-16(fp)
 18052b8:	10800217 	ldw	r2,8(r2)
 18052bc:	e0fffd17 	ldw	r3,-12(fp)
 18052c0:	180d883a 	mov	r6,r3
 18052c4:	e17ffe17 	ldw	r5,-8(fp)
 18052c8:	1009883a 	mov	r4,r2
 18052cc:	18055d00 	call	18055d0 <memcmp>
 18052d0:	1000021e 	bne	r2,zero,18052dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 18052d4:	e0bffc17 	ldw	r2,-16(fp)
 18052d8:	00000706 	br	18052f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 18052dc:	e0bffc17 	ldw	r2,-16(fp)
 18052e0:	10800017 	ldw	r2,0(r2)
 18052e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 18052e8:	e0fffc17 	ldw	r3,-16(fp)
 18052ec:	e0bfff17 	ldw	r2,-4(fp)
 18052f0:	18bff01e 	bne	r3,r2,18052b4 <__alt_data_end+0xff8052b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 18052f4:	0005883a 	mov	r2,zero
}
 18052f8:	e037883a 	mov	sp,fp
 18052fc:	dfc00117 	ldw	ra,4(sp)
 1805300:	df000017 	ldw	fp,0(sp)
 1805304:	dec00204 	addi	sp,sp,8
 1805308:	f800283a 	ret

0180530c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 180530c:	defffb04 	addi	sp,sp,-20
 1805310:	dfc00415 	stw	ra,16(sp)
 1805314:	df000315 	stw	fp,12(sp)
 1805318:	df000304 	addi	fp,sp,12
 180531c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1805320:	00806034 	movhi	r2,384
 1805324:	109ce904 	addi	r2,r2,29604
 1805328:	10800017 	ldw	r2,0(r2)
 180532c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1805330:	00003106 	br	18053f8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1805334:	e0bffd17 	ldw	r2,-12(fp)
 1805338:	10800217 	ldw	r2,8(r2)
 180533c:	1009883a 	mov	r4,r2
 1805340:	18003040 	call	1800304 <strlen>
 1805344:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1805348:	e0bffd17 	ldw	r2,-12(fp)
 180534c:	10c00217 	ldw	r3,8(r2)
 1805350:	e0bffe17 	ldw	r2,-8(fp)
 1805354:	10bfffc4 	addi	r2,r2,-1
 1805358:	1885883a 	add	r2,r3,r2
 180535c:	10800003 	ldbu	r2,0(r2)
 1805360:	10803fcc 	andi	r2,r2,255
 1805364:	1080201c 	xori	r2,r2,128
 1805368:	10bfe004 	addi	r2,r2,-128
 180536c:	10800bd8 	cmpnei	r2,r2,47
 1805370:	1000031e 	bne	r2,zero,1805380 <alt_find_file+0x74>
    {
      len -= 1;
 1805374:	e0bffe17 	ldw	r2,-8(fp)
 1805378:	10bfffc4 	addi	r2,r2,-1
 180537c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1805380:	e0bffe17 	ldw	r2,-8(fp)
 1805384:	e0ffff17 	ldw	r3,-4(fp)
 1805388:	1885883a 	add	r2,r3,r2
 180538c:	10800003 	ldbu	r2,0(r2)
 1805390:	10803fcc 	andi	r2,r2,255
 1805394:	1080201c 	xori	r2,r2,128
 1805398:	10bfe004 	addi	r2,r2,-128
 180539c:	10800be0 	cmpeqi	r2,r2,47
 18053a0:	1000081e 	bne	r2,zero,18053c4 <alt_find_file+0xb8>
 18053a4:	e0bffe17 	ldw	r2,-8(fp)
 18053a8:	e0ffff17 	ldw	r3,-4(fp)
 18053ac:	1885883a 	add	r2,r3,r2
 18053b0:	10800003 	ldbu	r2,0(r2)
 18053b4:	10803fcc 	andi	r2,r2,255
 18053b8:	1080201c 	xori	r2,r2,128
 18053bc:	10bfe004 	addi	r2,r2,-128
 18053c0:	10000a1e 	bne	r2,zero,18053ec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 18053c4:	e0bffd17 	ldw	r2,-12(fp)
 18053c8:	10800217 	ldw	r2,8(r2)
 18053cc:	e0fffe17 	ldw	r3,-8(fp)
 18053d0:	180d883a 	mov	r6,r3
 18053d4:	e17fff17 	ldw	r5,-4(fp)
 18053d8:	1009883a 	mov	r4,r2
 18053dc:	18055d00 	call	18055d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 18053e0:	1000021e 	bne	r2,zero,18053ec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 18053e4:	e0bffd17 	ldw	r2,-12(fp)
 18053e8:	00000806 	br	180540c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 18053ec:	e0bffd17 	ldw	r2,-12(fp)
 18053f0:	10800017 	ldw	r2,0(r2)
 18053f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 18053f8:	e0fffd17 	ldw	r3,-12(fp)
 18053fc:	00806034 	movhi	r2,384
 1805400:	109ce904 	addi	r2,r2,29604
 1805404:	18bfcb1e 	bne	r3,r2,1805334 <__alt_data_end+0xff805334>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1805408:	0005883a 	mov	r2,zero
}
 180540c:	e037883a 	mov	sp,fp
 1805410:	dfc00117 	ldw	ra,4(sp)
 1805414:	df000017 	ldw	fp,0(sp)
 1805418:	dec00204 	addi	sp,sp,8
 180541c:	f800283a 	ret

01805420 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1805420:	defffa04 	addi	sp,sp,-24
 1805424:	dfc00515 	stw	ra,20(sp)
 1805428:	df000415 	stw	fp,16(sp)
 180542c:	dc000315 	stw	r16,12(sp)
 1805430:	df000404 	addi	fp,sp,16
 1805434:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1805438:	00bffa04 	movi	r2,-24
 180543c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1805440:	e03ffc15 	stw	zero,-16(fp)
 1805444:	00002106 	br	18054cc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 1805448:	04006034 	movhi	r16,384
 180544c:	84186d04 	addi	r16,r16,25012
 1805450:	e0bffc17 	ldw	r2,-16(fp)
 1805454:	01400304 	movi	r5,12
 1805458:	1009883a 	mov	r4,r2
 180545c:	18030140 	call	1803014 <__mulsi3>
 1805460:	8085883a 	add	r2,r16,r2
 1805464:	10800017 	ldw	r2,0(r2)
 1805468:	1000151e 	bne	r2,zero,18054c0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 180546c:	04006034 	movhi	r16,384
 1805470:	84186d04 	addi	r16,r16,25012
 1805474:	e0bffc17 	ldw	r2,-16(fp)
 1805478:	01400304 	movi	r5,12
 180547c:	1009883a 	mov	r4,r2
 1805480:	18030140 	call	1803014 <__mulsi3>
 1805484:	8085883a 	add	r2,r16,r2
 1805488:	e0fffe17 	ldw	r3,-8(fp)
 180548c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1805490:	00806034 	movhi	r2,384
 1805494:	109ced04 	addi	r2,r2,29620
 1805498:	10c00017 	ldw	r3,0(r2)
 180549c:	e0bffc17 	ldw	r2,-16(fp)
 18054a0:	1880040e 	bge	r3,r2,18054b4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 18054a4:	00806034 	movhi	r2,384
 18054a8:	109ced04 	addi	r2,r2,29620
 18054ac:	e0fffc17 	ldw	r3,-16(fp)
 18054b0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 18054b4:	e0bffc17 	ldw	r2,-16(fp)
 18054b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 18054bc:	00000606 	br	18054d8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 18054c0:	e0bffc17 	ldw	r2,-16(fp)
 18054c4:	10800044 	addi	r2,r2,1
 18054c8:	e0bffc15 	stw	r2,-16(fp)
 18054cc:	e0bffc17 	ldw	r2,-16(fp)
 18054d0:	10800810 	cmplti	r2,r2,32
 18054d4:	103fdc1e 	bne	r2,zero,1805448 <__alt_data_end+0xff805448>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 18054d8:	e0bffd17 	ldw	r2,-12(fp)
}
 18054dc:	e6ffff04 	addi	sp,fp,-4
 18054e0:	dfc00217 	ldw	ra,8(sp)
 18054e4:	df000117 	ldw	fp,4(sp)
 18054e8:	dc000017 	ldw	r16,0(sp)
 18054ec:	dec00304 	addi	sp,sp,12
 18054f0:	f800283a 	ret

018054f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 18054f4:	defffb04 	addi	sp,sp,-20
 18054f8:	df000415 	stw	fp,16(sp)
 18054fc:	df000404 	addi	fp,sp,16
 1805500:	e13ffe15 	stw	r4,-8(fp)
 1805504:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1805508:	e0bfff17 	ldw	r2,-4(fp)
 180550c:	10880070 	cmpltui	r2,r2,8193
 1805510:	1000021e 	bne	r2,zero,180551c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1805514:	00880004 	movi	r2,8192
 1805518:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 180551c:	e0fffe17 	ldw	r3,-8(fp)
 1805520:	e0bfff17 	ldw	r2,-4(fp)
 1805524:	1885883a 	add	r2,r3,r2
 1805528:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 180552c:	e0bffe17 	ldw	r2,-8(fp)
 1805530:	e0bffc15 	stw	r2,-16(fp)
 1805534:	00000506 	br	180554c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1805538:	e0bffc17 	ldw	r2,-16(fp)
 180553c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1805540:	e0bffc17 	ldw	r2,-16(fp)
 1805544:	10800804 	addi	r2,r2,32
 1805548:	e0bffc15 	stw	r2,-16(fp)
 180554c:	e0fffc17 	ldw	r3,-16(fp)
 1805550:	e0bffd17 	ldw	r2,-12(fp)
 1805554:	18bff836 	bltu	r3,r2,1805538 <__alt_data_end+0xff805538>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1805558:	e0bffe17 	ldw	r2,-8(fp)
 180555c:	108007cc 	andi	r2,r2,31
 1805560:	10000226 	beq	r2,zero,180556c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1805564:	e0bffc17 	ldw	r2,-16(fp)
 1805568:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 180556c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1805570:	0001883a 	nop
 1805574:	e037883a 	mov	sp,fp
 1805578:	df000017 	ldw	fp,0(sp)
 180557c:	dec00104 	addi	sp,sp,4
 1805580:	f800283a 	ret

01805584 <atexit>:
 1805584:	200b883a 	mov	r5,r4
 1805588:	000f883a 	mov	r7,zero
 180558c:	000d883a 	mov	r6,zero
 1805590:	0009883a 	mov	r4,zero
 1805594:	180564c1 	jmpi	180564c <__register_exitproc>

01805598 <exit>:
 1805598:	defffe04 	addi	sp,sp,-8
 180559c:	000b883a 	mov	r5,zero
 18055a0:	dc000015 	stw	r16,0(sp)
 18055a4:	dfc00115 	stw	ra,4(sp)
 18055a8:	2021883a 	mov	r16,r4
 18055ac:	18057640 	call	1805764 <__call_exitprocs>
 18055b0:	00806034 	movhi	r2,384
 18055b4:	109ce504 	addi	r2,r2,29588
 18055b8:	11000017 	ldw	r4,0(r2)
 18055bc:	20800f17 	ldw	r2,60(r4)
 18055c0:	10000126 	beq	r2,zero,18055c8 <exit+0x30>
 18055c4:	103ee83a 	callr	r2
 18055c8:	8009883a 	mov	r4,r16
 18055cc:	18058e40 	call	18058e4 <_exit>

018055d0 <memcmp>:
 18055d0:	01c000c4 	movi	r7,3
 18055d4:	3980192e 	bgeu	r7,r6,180563c <memcmp+0x6c>
 18055d8:	2144b03a 	or	r2,r4,r5
 18055dc:	11c4703a 	and	r2,r2,r7
 18055e0:	10000f26 	beq	r2,zero,1805620 <memcmp+0x50>
 18055e4:	20800003 	ldbu	r2,0(r4)
 18055e8:	28c00003 	ldbu	r3,0(r5)
 18055ec:	10c0151e 	bne	r2,r3,1805644 <memcmp+0x74>
 18055f0:	31bfff84 	addi	r6,r6,-2
 18055f4:	01ffffc4 	movi	r7,-1
 18055f8:	00000406 	br	180560c <memcmp+0x3c>
 18055fc:	20800003 	ldbu	r2,0(r4)
 1805600:	28c00003 	ldbu	r3,0(r5)
 1805604:	31bfffc4 	addi	r6,r6,-1
 1805608:	10c00e1e 	bne	r2,r3,1805644 <memcmp+0x74>
 180560c:	21000044 	addi	r4,r4,1
 1805610:	29400044 	addi	r5,r5,1
 1805614:	31fff91e 	bne	r6,r7,18055fc <__alt_data_end+0xff8055fc>
 1805618:	0005883a 	mov	r2,zero
 180561c:	f800283a 	ret
 1805620:	20c00017 	ldw	r3,0(r4)
 1805624:	28800017 	ldw	r2,0(r5)
 1805628:	18bfee1e 	bne	r3,r2,18055e4 <__alt_data_end+0xff8055e4>
 180562c:	31bfff04 	addi	r6,r6,-4
 1805630:	21000104 	addi	r4,r4,4
 1805634:	29400104 	addi	r5,r5,4
 1805638:	39bff936 	bltu	r7,r6,1805620 <__alt_data_end+0xff805620>
 180563c:	303fe91e 	bne	r6,zero,18055e4 <__alt_data_end+0xff8055e4>
 1805640:	003ff506 	br	1805618 <__alt_data_end+0xff805618>
 1805644:	10c5c83a 	sub	r2,r2,r3
 1805648:	f800283a 	ret

0180564c <__register_exitproc>:
 180564c:	defffa04 	addi	sp,sp,-24
 1805650:	dc000315 	stw	r16,12(sp)
 1805654:	04006034 	movhi	r16,384
 1805658:	841ce504 	addi	r16,r16,29588
 180565c:	80c00017 	ldw	r3,0(r16)
 1805660:	dc400415 	stw	r17,16(sp)
 1805664:	dfc00515 	stw	ra,20(sp)
 1805668:	18805217 	ldw	r2,328(r3)
 180566c:	2023883a 	mov	r17,r4
 1805670:	10003726 	beq	r2,zero,1805750 <__register_exitproc+0x104>
 1805674:	10c00117 	ldw	r3,4(r2)
 1805678:	010007c4 	movi	r4,31
 180567c:	20c00e16 	blt	r4,r3,18056b8 <__register_exitproc+0x6c>
 1805680:	1a000044 	addi	r8,r3,1
 1805684:	8800221e 	bne	r17,zero,1805710 <__register_exitproc+0xc4>
 1805688:	18c00084 	addi	r3,r3,2
 180568c:	18c7883a 	add	r3,r3,r3
 1805690:	18c7883a 	add	r3,r3,r3
 1805694:	12000115 	stw	r8,4(r2)
 1805698:	10c7883a 	add	r3,r2,r3
 180569c:	19400015 	stw	r5,0(r3)
 18056a0:	0005883a 	mov	r2,zero
 18056a4:	dfc00517 	ldw	ra,20(sp)
 18056a8:	dc400417 	ldw	r17,16(sp)
 18056ac:	dc000317 	ldw	r16,12(sp)
 18056b0:	dec00604 	addi	sp,sp,24
 18056b4:	f800283a 	ret
 18056b8:	00800034 	movhi	r2,0
 18056bc:	10800004 	addi	r2,r2,0
 18056c0:	10002626 	beq	r2,zero,180575c <__register_exitproc+0x110>
 18056c4:	01006404 	movi	r4,400
 18056c8:	d9400015 	stw	r5,0(sp)
 18056cc:	d9800115 	stw	r6,4(sp)
 18056d0:	d9c00215 	stw	r7,8(sp)
 18056d4:	00000000 	call	0 <__alt_mem_sdram-0x1800000>
 18056d8:	d9400017 	ldw	r5,0(sp)
 18056dc:	d9800117 	ldw	r6,4(sp)
 18056e0:	d9c00217 	ldw	r7,8(sp)
 18056e4:	10001d26 	beq	r2,zero,180575c <__register_exitproc+0x110>
 18056e8:	81000017 	ldw	r4,0(r16)
 18056ec:	10000115 	stw	zero,4(r2)
 18056f0:	02000044 	movi	r8,1
 18056f4:	22405217 	ldw	r9,328(r4)
 18056f8:	0007883a 	mov	r3,zero
 18056fc:	12400015 	stw	r9,0(r2)
 1805700:	20805215 	stw	r2,328(r4)
 1805704:	10006215 	stw	zero,392(r2)
 1805708:	10006315 	stw	zero,396(r2)
 180570c:	883fde26 	beq	r17,zero,1805688 <__alt_data_end+0xff805688>
 1805710:	18c9883a 	add	r4,r3,r3
 1805714:	2109883a 	add	r4,r4,r4
 1805718:	1109883a 	add	r4,r2,r4
 180571c:	21802215 	stw	r6,136(r4)
 1805720:	01800044 	movi	r6,1
 1805724:	12406217 	ldw	r9,392(r2)
 1805728:	30cc983a 	sll	r6,r6,r3
 180572c:	4992b03a 	or	r9,r9,r6
 1805730:	12406215 	stw	r9,392(r2)
 1805734:	21c04215 	stw	r7,264(r4)
 1805738:	01000084 	movi	r4,2
 180573c:	893fd21e 	bne	r17,r4,1805688 <__alt_data_end+0xff805688>
 1805740:	11006317 	ldw	r4,396(r2)
 1805744:	218cb03a 	or	r6,r4,r6
 1805748:	11806315 	stw	r6,396(r2)
 180574c:	003fce06 	br	1805688 <__alt_data_end+0xff805688>
 1805750:	18805304 	addi	r2,r3,332
 1805754:	18805215 	stw	r2,328(r3)
 1805758:	003fc606 	br	1805674 <__alt_data_end+0xff805674>
 180575c:	00bfffc4 	movi	r2,-1
 1805760:	003fd006 	br	18056a4 <__alt_data_end+0xff8056a4>

01805764 <__call_exitprocs>:
 1805764:	defff504 	addi	sp,sp,-44
 1805768:	df000915 	stw	fp,36(sp)
 180576c:	dd400615 	stw	r21,24(sp)
 1805770:	dc800315 	stw	r18,12(sp)
 1805774:	dfc00a15 	stw	ra,40(sp)
 1805778:	ddc00815 	stw	r23,32(sp)
 180577c:	dd800715 	stw	r22,28(sp)
 1805780:	dd000515 	stw	r20,20(sp)
 1805784:	dcc00415 	stw	r19,16(sp)
 1805788:	dc400215 	stw	r17,8(sp)
 180578c:	dc000115 	stw	r16,4(sp)
 1805790:	d9000015 	stw	r4,0(sp)
 1805794:	2839883a 	mov	fp,r5
 1805798:	04800044 	movi	r18,1
 180579c:	057fffc4 	movi	r21,-1
 18057a0:	00806034 	movhi	r2,384
 18057a4:	109ce504 	addi	r2,r2,29588
 18057a8:	12000017 	ldw	r8,0(r2)
 18057ac:	45005217 	ldw	r20,328(r8)
 18057b0:	44c05204 	addi	r19,r8,328
 18057b4:	a0001c26 	beq	r20,zero,1805828 <__call_exitprocs+0xc4>
 18057b8:	a0800117 	ldw	r2,4(r20)
 18057bc:	15ffffc4 	addi	r23,r2,-1
 18057c0:	b8000d16 	blt	r23,zero,18057f8 <__call_exitprocs+0x94>
 18057c4:	14000044 	addi	r16,r2,1
 18057c8:	8421883a 	add	r16,r16,r16
 18057cc:	8421883a 	add	r16,r16,r16
 18057d0:	84402004 	addi	r17,r16,128
 18057d4:	a463883a 	add	r17,r20,r17
 18057d8:	a421883a 	add	r16,r20,r16
 18057dc:	e0001e26 	beq	fp,zero,1805858 <__call_exitprocs+0xf4>
 18057e0:	80804017 	ldw	r2,256(r16)
 18057e4:	e0801c26 	beq	fp,r2,1805858 <__call_exitprocs+0xf4>
 18057e8:	bdffffc4 	addi	r23,r23,-1
 18057ec:	843fff04 	addi	r16,r16,-4
 18057f0:	8c7fff04 	addi	r17,r17,-4
 18057f4:	bd7ff91e 	bne	r23,r21,18057dc <__alt_data_end+0xff8057dc>
 18057f8:	00800034 	movhi	r2,0
 18057fc:	10800004 	addi	r2,r2,0
 1805800:	10000926 	beq	r2,zero,1805828 <__call_exitprocs+0xc4>
 1805804:	a0800117 	ldw	r2,4(r20)
 1805808:	1000301e 	bne	r2,zero,18058cc <__call_exitprocs+0x168>
 180580c:	a0800017 	ldw	r2,0(r20)
 1805810:	10003226 	beq	r2,zero,18058dc <__call_exitprocs+0x178>
 1805814:	a009883a 	mov	r4,r20
 1805818:	98800015 	stw	r2,0(r19)
 180581c:	00000000 	call	0 <__alt_mem_sdram-0x1800000>
 1805820:	9d000017 	ldw	r20,0(r19)
 1805824:	a03fe41e 	bne	r20,zero,18057b8 <__alt_data_end+0xff8057b8>
 1805828:	dfc00a17 	ldw	ra,40(sp)
 180582c:	df000917 	ldw	fp,36(sp)
 1805830:	ddc00817 	ldw	r23,32(sp)
 1805834:	dd800717 	ldw	r22,28(sp)
 1805838:	dd400617 	ldw	r21,24(sp)
 180583c:	dd000517 	ldw	r20,20(sp)
 1805840:	dcc00417 	ldw	r19,16(sp)
 1805844:	dc800317 	ldw	r18,12(sp)
 1805848:	dc400217 	ldw	r17,8(sp)
 180584c:	dc000117 	ldw	r16,4(sp)
 1805850:	dec00b04 	addi	sp,sp,44
 1805854:	f800283a 	ret
 1805858:	a0800117 	ldw	r2,4(r20)
 180585c:	80c00017 	ldw	r3,0(r16)
 1805860:	10bfffc4 	addi	r2,r2,-1
 1805864:	15c01426 	beq	r2,r23,18058b8 <__call_exitprocs+0x154>
 1805868:	80000015 	stw	zero,0(r16)
 180586c:	183fde26 	beq	r3,zero,18057e8 <__alt_data_end+0xff8057e8>
 1805870:	95c8983a 	sll	r4,r18,r23
 1805874:	a0806217 	ldw	r2,392(r20)
 1805878:	a5800117 	ldw	r22,4(r20)
 180587c:	2084703a 	and	r2,r4,r2
 1805880:	10000b26 	beq	r2,zero,18058b0 <__call_exitprocs+0x14c>
 1805884:	a0806317 	ldw	r2,396(r20)
 1805888:	2088703a 	and	r4,r4,r2
 180588c:	20000c1e 	bne	r4,zero,18058c0 <__call_exitprocs+0x15c>
 1805890:	89400017 	ldw	r5,0(r17)
 1805894:	d9000017 	ldw	r4,0(sp)
 1805898:	183ee83a 	callr	r3
 180589c:	a0800117 	ldw	r2,4(r20)
 18058a0:	15bfbf1e 	bne	r2,r22,18057a0 <__alt_data_end+0xff8057a0>
 18058a4:	98800017 	ldw	r2,0(r19)
 18058a8:	153fcf26 	beq	r2,r20,18057e8 <__alt_data_end+0xff8057e8>
 18058ac:	003fbc06 	br	18057a0 <__alt_data_end+0xff8057a0>
 18058b0:	183ee83a 	callr	r3
 18058b4:	003ff906 	br	180589c <__alt_data_end+0xff80589c>
 18058b8:	a5c00115 	stw	r23,4(r20)
 18058bc:	003feb06 	br	180586c <__alt_data_end+0xff80586c>
 18058c0:	89000017 	ldw	r4,0(r17)
 18058c4:	183ee83a 	callr	r3
 18058c8:	003ff406 	br	180589c <__alt_data_end+0xff80589c>
 18058cc:	a0800017 	ldw	r2,0(r20)
 18058d0:	a027883a 	mov	r19,r20
 18058d4:	1029883a 	mov	r20,r2
 18058d8:	003fb606 	br	18057b4 <__alt_data_end+0xff8057b4>
 18058dc:	0005883a 	mov	r2,zero
 18058e0:	003ffb06 	br	18058d0 <__alt_data_end+0xff8058d0>

018058e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 18058e4:	defffd04 	addi	sp,sp,-12
 18058e8:	df000215 	stw	fp,8(sp)
 18058ec:	df000204 	addi	fp,sp,8
 18058f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 18058f4:	0001883a 	nop
 18058f8:	e0bfff17 	ldw	r2,-4(fp)
 18058fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1805900:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1805904:	10000226 	beq	r2,zero,1805910 <_exit+0x2c>
    ALT_SIM_FAIL();
 1805908:	002af070 	cmpltui	zero,zero,43969
 180590c:	00000106 	br	1805914 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1805910:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1805914:	003fff06 	br	1805914 <__alt_data_end+0xff805914>
